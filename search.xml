<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaScript</title>
      <link href="posts/18006.html"/>
      <url>posts/18006.html</url>
      
        <content type="html"><![CDATA[<h2 id="了解JavaScript"><a href="#了解JavaScript" class="headerlink" title="了解JavaScript"></a>了解JavaScript</h2><h3 id="1-概述："><a href="#1-概述：" class="headerlink" title="1.概述："></a>1.概述：</h3><p>JavaScript是目前web开发中不可缺少的<strong>脚本</strong>语言，js不需要编译即可运行，运行在客户端，需要通过浏览器来解析执行JavaScript代码。</p><p>诞生于1995年，当时的主要目的是<strong>验证表单的数据是否合法</strong>。</p><p>JavaScript本来应该叫Livescript，但是在发布前夕，想搭上当时超热的java顺风车，临时把名字改为了JavaScript。（也就是说js跟java没有关系，当时只是想借助java的名气）。</p><h3 id="2-JS的组成部分"><a href="#2-JS的组成部分" class="headerlink" title="2.JS的组成部分"></a>2.JS的组成部分</h3><table><thead><tr><th align="center">组成部分</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">ECMA Script</td><td align="center">构成了JS核心的语法基础</td></tr><tr><td align="center">BOM</td><td align="center">Browser Object Model 浏览器对象模型，用来操作浏览器上的对象</td></tr><tr><td align="center">DOM</td><td align="center">Document Object Model 文档对象模型，用来操作网页中的元素</td></tr></tbody></table><ul><li><p>核心（ECMAScript）：这一部分主要是js的基本语法。</p></li><li><p>BOM：Brower Object Model（浏览器对象模型），主要是获取浏览器信息或操作浏览器的，例如：浏览器的前进与后退、浏览器弹出提示框、浏览器地址栏输入网址跳转等操作等。</p></li><li><p>DOM：Document Object Model（文档对象模型），此处的文档暂且理解为html，html加载到浏览器的内存中，可以使用js的DOM技术对内存中的html节点进行修改，用户从浏览器看到的是js动态修改后的页面。（增删改查）</p></li></ul><h3 id="JS的特点："><a href="#JS的特点：" class="headerlink" title="JS的特点："></a>JS的特点：</h3><ol><li>交互性（它可以做的就是信息的动态交互）</li><li>安全性（不允许直接访问本地硬盘）</li><li>跨平台性（只要是可以解析js的浏览器都可以执行，和平台无关）</li></ol><h3 id="JS和Java的区别："><a href="#JS和Java的区别：" class="headerlink" title="JS和Java的区别："></a>JS和Java的区别：</h3><table><thead><tr><th align="center">JavaScript</th><th align="center">Java</th></tr></thead><tbody><tr><td align="center">弱类型语言</td><td align="center">强类型语言</td></tr></tbody></table><h3 id="JS的作用"><a href="#JS的作用" class="headerlink" title="JS的作用"></a>JS的作用</h3><p>avaScript 被用来改进设计、验证表单、检测浏览器、创建cookies，等等。JavaScript 是因特网上最流行的脚本语言，并且可在所有主要的浏览器中运行，比如： Internet Explorer、 Maxthon、Mozilla、Firefox、Netscape、Chrome和 Opera等。</p><p>在目前学习阶段只要记住最常用的二个：（1）运态修改html及css代码 （2）验证表单</p><h2 id="JavaScript-的基本用法"><a href="#JavaScript-的基本用法" class="headerlink" title="JavaScript 的基本用法"></a>JavaScript 的基本用法</h2><ol><li>HTML 中的脚本必须位于 <script> 与 </script> 标签之间。</li><li>脚本可被放置在 HTML 页面的 <body> 和 <head> 部分中。</li><li>注释：跟java中一样，单行注释：”//“ ,多行注释：”/*  */“</li></ol><hr><h3 id="lt-script-gt-标签"><a href="#lt-script-gt-标签" class="headerlink" title="&lt;script&gt;标签"></a><code>&lt;script&gt;</code>标签</h3><p>如需在 HTML 页面中插入 JavaScript，请使用<code>&lt;script&gt;</code>标签。<br><code>&lt;script&gt;</code> 和 <code>&lt;/script&gt;</code> 会告诉 JavaScript 在何处开始和结束。<br><code>&lt;script&gt;</code> 和 <code>&lt;/script&gt; </code>之间的代码行包含了 JavaScript:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">alert(&quot;我的第一个 JavaScript&quot;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="JS的写入位置"><a href="#JS的写入位置" class="headerlink" title="JS的写入位置"></a>JS的写入位置</h3><ul><li>行内式</li><li>内嵌式</li><li>外链式</li></ul><h4 id="行内式"><a href="#行内式" class="headerlink" title="行内式"></a>行内式</h4><p>直接书写在标签身上，是一个简写的事件，所以又称之为事件属性。     onclick单击事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;按钮1!&quot; onclick&#x3D;&quot;alert(&#39;提示内容！&#39;);&quot;&gt;</span><br><span class="line">&lt;button onclick&#x3D;&quot;alert(&#39;提示内容&#39;);&quot;&gt;按钮2&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure><h4 id="内嵌式"><a href="#内嵌式" class="headerlink" title="内嵌式"></a>内嵌式</h4><p>理论上js可以书写在页面的任意位置，为了不影响内容，可以统一写<head>中或者写在<body>最后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">alert(&quot;内嵌式&quot;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h4 id="外链式"><a href="#外链式" class="headerlink" title="外链式"></a>外链式</h4><p>首先新建一个文件类型为.js的文件，然后在该文件中写js语句，通过script标签对引入到html页面中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;js文件路径地址&quot;&gt;这里不能写js语句&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="JavaScript-函数和事件"><a href="#JavaScript-函数和事件" class="headerlink" title="JavaScript 函数和事件"></a>JavaScript 函数和事件</h3><p>上面例子中的 JavaScript 语句，会在页面加载时执行。</p><p>通常，我们需要在某个事件发生时执行代码，比如当用户点击按钮时。</p><p>如果我们把 JavaScript 代码放入函数中，就可以在事件发生时调用该函数。</p><p>您将在稍后的章节学到更多有关 JavaScript 函数和事件的知识。</p><h3 id="在-lt-head-gt-或-lt-body-gt-的JavaScript"><a href="#在-lt-head-gt-或-lt-body-gt-的JavaScript" class="headerlink" title="在&lt;head&gt;或&lt;body&gt;的JavaScript"></a>在<code>&lt;head</code>&gt;或<code>&lt;body&gt;</code>的JavaScript</h3><p>您可以在 HTML 文档中放入不限数量的脚本。</p><p>脚本可位于 HTML 的 <code>&lt;body&gt;</code> 或 <code>&lt;head&gt;</code> 部分中，或者同时存在于两个部分中。</p><p>通常的做法是把函数放入 <code>&lt;head&gt;</code> 部分中，或者放在页面底部。这样就可以把它们安置到同一处位置，不会干扰页面的内容。</p><h2 id="对JavaScript语言的基本了解"><a href="#对JavaScript语言的基本了解" class="headerlink" title="对JavaScript语言的基本了解"></a>对JavaScript语言的基本了解</h2><p>JS也是一门语言，每一条语句要加上”;”表示结束。与Java语言类似</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>JS中的数据类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">数值型：number（凡是数字都是数值型，不区分整数和小数）</span><br><span class="line">字符串：string（凡是引号包裹起来的内容全部都是字符串）</span><br><span class="line">布尔：boolean（true、false）</span><br><span class="line">对象类型：object（特殊取值null）</span><br><span class="line">未定义型：undefined</span><br></pre></td></tr></table></figure><p>对比Java中的数据类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">整数：byte short int long</span><br><span class="line">小数：float double</span><br><span class="line">字符：char </span><br><span class="line">布尔：boolean</span><br><span class="line">字符串：String</span><br></pre></td></tr></table></figure><h3 id="变量（variable）"><a href="#变量（variable）" class="headerlink" title="变量（variable）"></a>变量（variable）</h3><p>定义：存储数据</p><p>声明变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var 变量名称 &#x3D; 存储的数据;</span><br></pre></td></tr></table></figure><p>变量命名规范：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 只能由字母、数字、_（下划线）、$（美元符号）组成。</span><br><span class="line">2. 不能以数字开头。</span><br><span class="line">3. 命名中不能出现-（js会理解成减号进行减法的操作），不能和关键字冲突。</span><br></pre></td></tr></table></figure><p><strong>js是弱类型语言，不重视类型的定义，但js会根据为变量赋值的情况自定判断该变量是何种类型：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">数值型：var i &#x3D; 1;var d &#x3D; 2.35;</span><br><span class="line">字符串：var str &#x3D; &quot;用心学习&quot;;</span><br><span class="line">布尔型：var b &#x3D; true;</span><br></pre></td></tr></table></figure><p>对比Java:java是强类型的语言，注重类型的定义，Java定义类型如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">整型：int i &#x3D; 1;</span><br><span class="line">浮点型：double d &#x3D; 2.35;</span><br><span class="line">字符串：String str &#x3D; “用心学习”;</span><br><span class="line">布尔型：boolean b &#x3D; true;</span><br></pre></td></tr></table></figure><p><strong>总结：js中变量的定义。只要加一个var就行。java则使用什么类型的变量就要定义什么类型的。</strong></p><h3 id="检测数据类型："><a href="#检测数据类型：" class="headerlink" title="检测数据类型："></a>检测数据类型：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">typeof(value); 或者typeof value;     返回这个变量的类型. </span><br><span class="line">说明 : 同一个变量, 可以进行不同类型的数据赋值.</span><br></pre></td></tr></table></figure><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h4><p><code>+    -    *    /    %    ++    --</code><br>注意：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 由于js中的小数和整数都是number类型，不存在类似整数除以整数还是整数的结论。</span><br><span class="line">2. 字符串和其他的数据使用+号运算，会连接成一个新的字符串。</span><br><span class="line">3. 字符串使用除了+以外的运算符：如果字符串本身是一个数字，那么会自动转成number进行运算</span><br><span class="line">，否则就会返回一个NaN的结果，表示这不是一个数字。NaN：not a number</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"> </span><br><span class="line">    alert(1234 &#x2F; 1000 * 1000); &#x2F;&#x2F; 1234</span><br><span class="line">  </span><br><span class="line">    var s &#x3D; &quot;12&quot;;</span><br><span class="line">     s -&#x3D; 10;</span><br><span class="line">    alert(s);  &#x2F;&#x2F; 2</span><br><span class="line"> </span><br><span class="line">    var s &#x3D; &quot;aa&quot;;</span><br><span class="line">    s -&#x3D; 10;</span><br><span class="line">    alert(s);  &#x2F;&#x2F; NaN       Not a Number 不是一个数字</span><br><span class="line"> </span><br><span class="line">    var s &#x3D; &quot;12&quot;;</span><br><span class="line">    s +&#x3D; 10;</span><br><span class="line">    alert(s);       &#x2F;&#x2F; 1210 </span><br><span class="line"> </span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h4 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&#x3D;&lt;&lt;&#x3D;  !&#x3D;</span><br><span class="line">&#x3D;&#x3D;等于（只比较内容）&#x3D;&#x3D;&#x3D;恒等于（比较内容的同时还要比较数据类型）</span><br><span class="line">注意：关系运算符返回的结果只有两个：true &#x2F; false</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 请问1 : 3 &gt; 5, 结果为 ?</span><br><span class="line">    alert(3 &gt; 5);   &#x2F;&#x2F; false</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 请问2 : “22” &#x3D;&#x3D; 22  结果为 ?</span><br><span class="line">    alert(&quot;22&quot; &#x3D;&#x3D; 22); &#x2F;&#x2F; true  (仅仅判断数值)</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 请问3 : “22” &#x3D;&#x3D;&#x3D; 22  结果为 ?</span><br><span class="line">    alert(&quot;22&quot; &#x3D;&#x3D;&#x3D; 22);  &#x2F;&#x2F; false  (恒等于, 数值和类型都要相等)</span><br><span class="line">    </span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&amp;&amp; 与true&amp;&amp;false&#x3D;&#x3D;&#x3D;&#x3D;&gt;false</span><br><span class="line">|| 或true||false&#x3D;&#x3D;&#x3D;&#x3D;&gt;true</span><br><span class="line">！ 非!true&#x3D;&#x3D;&#x3D;&#x3D;&gt;false</span><br><span class="line">false（理解）：false,  0,  null,  undefined </span><br><span class="line">true（理解）：true, 非0,  非null,  非undefined</span><br><span class="line"> </span><br><span class="line"> &amp;&amp; : 找第一个出现的假值. (一假即假)</span><br><span class="line"> || : 找第一个出现的真值. (一真即真)</span><br></pre></td></tr></table></figure><p>与演示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 短路与 (一假即假)</span><br><span class="line">    &#x2F;&#x2F; 口诀 : 找第一个为假的值.</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 请问1 :  8 &lt; 7 &amp;&amp; 3 &lt; 4, 结果为 ?</span><br><span class="line">    alert(8 &lt; 7 &amp;&amp; 3 &lt; 4);  &#x2F;&#x2F; false</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 请问2 :  -2 &amp;&amp; 6 + 6 &amp;&amp; null 结果为 ?</span><br><span class="line">    alert(-2 &amp;&amp; 6 + 6 &amp;&amp; null); &#x2F;&#x2F; null</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 请问3 :  1 + 1 &amp;&amp; 0 &amp;&amp; 5  结果为 ?</span><br><span class="line">    alert(1 + 1 &amp;&amp; 0 &amp;&amp; 5); &#x2F;&#x2F; 0</span><br><span class="line"> </span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>或演示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 短路或 : 一真即真.</span><br><span class="line">    &#x2F;&#x2F; 口诀 : 找第一个为真的值.</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 请问1 :  0 || 23 结果为 ?</span><br><span class="line">    alert(0 || 23); &#x2F;&#x2F; 23</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 请问2 :  0 || false || true  结果为 ?</span><br><span class="line">    alert(0 || false || true); &#x2F;&#x2F; true</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 请问3 :  null || 10 &lt; 8 || 10 + 10结果为 ?</span><br><span class="line">    alert(null || 10 &lt; 8 || 10 + 10);  &#x2F;&#x2F; 20</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 请问4 :  null || 10 &lt; 8 || false结果为 ?</span><br><span class="line">    alert(null || 10 &lt; 8 || false); &#x2F;&#x2F; false</span><br><span class="line">    </span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h4 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h4><p>条件？表达式1：表达式2<br>如果条件为true，返回表达式1的结果<br>如果条件为false，返回表达式2的结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 请问1 :  3 ? “aaa” : “bbb” 结果为 ?</span><br><span class="line">    alert(3 ? &quot;aaa&quot; : &quot;bbb&quot;);       &#x2F;&#x2F; aaa</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 请问2 :  0 ? “ccc” : “ddd”  结果为 ?</span><br><span class="line">    alert(0 ? &quot;ccc&quot; : &quot;ddd&quot;);       &#x2F;&#x2F; ddd</span><br><span class="line">    </span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><p>很多与Java中的流程控制语句一样</p><h4 id="if条件语句"><a href="#if条件语句" class="headerlink" title="if条件语句"></a>if条件语句</h4><p>与Java中if语句一样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"> </span><br><span class="line">      var score &#x3D; 59;</span><br><span class="line"> </span><br><span class="line">      if (score &gt;&#x3D; 90) &#123;</span><br><span class="line">          alert(&quot;优秀&quot;);</span><br><span class="line">      &#125; else if (score &gt;&#x3D; 80) &#123;</span><br><span class="line">          alert(&quot;良好&quot;);</span><br><span class="line">      &#125; else if (score &gt;&#x3D; 60) &#123;</span><br><span class="line">          alert(&quot;及格&quot;);</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">          alert(&quot;不及格&quot;);</span><br><span class="line">      &#125;</span><br><span class="line"> </span><br><span class="line">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h4 id="switch分支结构"><a href="#switch分支结构" class="headerlink" title="switch分支结构"></a>switch分支结构</h4><p>这个和java中switch结构一样。只是Java中表达式为：常量 整型（去long）、字符、字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"> </span><br><span class="line">      var score &#x3D; 59;</span><br><span class="line"> </span><br><span class="line">      &#x2F;&#x2F; 需求 : 将需要一个整型数值, 不想要小数点.</span><br><span class="line">      &#x2F;&#x2F; window 对象的 parseInt 方法.</span><br><span class="line">      score &#x3D; window.parseInt(score &#x2F; 10 + &quot;&quot;);</span><br><span class="line">      &#x2F;&#x2F; alert(score);</span><br><span class="line"> </span><br><span class="line">      switch (score) &#123;</span><br><span class="line">          case 10:</span><br><span class="line">          case 9:</span><br><span class="line">              alert(&quot;优秀!&quot;);</span><br><span class="line">              break;</span><br><span class="line">          case 8:</span><br><span class="line">              alert(&quot;良好!&quot;);</span><br><span class="line">              break;</span><br><span class="line">          case 7:</span><br><span class="line">          case 6:</span><br><span class="line">              alert(&quot;及格!&quot;);</span><br><span class="line">              break;</span><br><span class="line">          default:</span><br><span class="line">              alert(&quot;不及格!&quot;);</span><br><span class="line">              break;</span><br><span class="line">      &#125;</span><br><span class="line"> </span><br><span class="line">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h4 id="循环结构while、do-while、for语句"><a href="#循环结构while、do-while、for语句" class="headerlink" title="循环结构while、do-while、for语句"></a>循环结构while、do-while、for语句</h4><ul><li>while(循环条件){循环体;}</li><li>do{循环体;}while(循环条件);</li><li>for(循环变量赋初值；循环条件；循环变量增值){循环语句;}</li><li>console.log（…）; 以日志的形式在控制台输出结果！</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 需求 : 统计 1~100 之间能够被3和7整除的数字个数</span><br><span class="line"> </span><br><span class="line">    var count &#x3D; 0;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 1. 遍历 1~100 之间的所有整型数值</span><br><span class="line">    for (var i &#x3D; 1; i &lt;&#x3D; 100; i++) &#123;</span><br><span class="line"> </span><br><span class="line">        &#x2F;&#x2F; 2. 判断</span><br><span class="line">        if (i % 3 &#x3D;&#x3D; 0 &amp;&amp; i % 7 &#x3D;&#x3D; 0) &#123;</span><br><span class="line">            &#x2F;&#x2F; alert(i);</span><br><span class="line">            console.log(i);</span><br><span class="line">            &#x2F;&#x2F; 3. 累加个数</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 4. 查看结果</span><br><span class="line">    &#x2F;&#x2F; alert(count);</span><br><span class="line">    console.log(count);</span><br></pre></td></tr></table></figure><h4 id="循环嵌套"><a href="#循环嵌套" class="headerlink" title="循环嵌套"></a>循环嵌套</h4><p>演示案例9*9乘法表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">       table &#123;</span><br><span class="line">           &#x2F;* 将 table 表格的线变成了细线 *&#x2F;</span><br><span class="line">           border-collapse: collapse;</span><br><span class="line">           &#x2F;*color: red;*&#x2F;</span><br><span class="line">           border-color: red;</span><br><span class="line">       &#125;</span><br><span class="line">   &lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">   &lt;script&gt;</span><br><span class="line"></span><br><span class="line">       &#x2F;&#x2F; 需求 : 九九乘法口诀表</span><br><span class="line">       document.write(&quot;&lt;table border&#x3D;&#39;1px solid red&#39; cellspacing&#x3D;&#39;0&#39; cellpadding&#x3D;&#39;8px&#39;&gt;&quot;);</span><br><span class="line">       document.write(&quot;&lt;caption&gt;九九乘法口诀表&lt;&#x2F;caption&gt;&quot;);</span><br><span class="line">       for (var i &#x3D; 1; i &lt;&#x3D; 9; i++) &#123;</span><br><span class="line">           document.write(&quot;&lt;tr&gt;&quot;);</span><br><span class="line">           for (var j &#x3D; 1; j &lt;&#x3D; i; j++) &#123;</span><br><span class="line">               document.write(&quot;&lt;td&gt;&quot;);</span><br><span class="line">               document.write(j + &quot;*&quot; + i + &quot;&#x3D;&quot; + (j*i) + &quot;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;);</span><br><span class="line">               document.write(&quot;&lt;&#x2F;td&gt;&quot;);</span><br><span class="line">           &#125;</span><br><span class="line">           document.write(&quot;&lt;&#x2F;tr&gt;&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">       document.write(&quot;&lt;&#x2F;table&gt;&quot;);</span><br><span class="line"></span><br><span class="line">   &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="案例-轮播图"><a href="#案例-轮播图" class="headerlink" title="案例-轮播图"></a>案例-轮播图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">说明1 : script 标签需要放在 body 标签之后.</span><br><span class="line"> </span><br><span class="line">说明2 : window.setInterval(“字符串函数名称()”, 时间毫秒数);</span><br><span class="line"> </span><br><span class="line">说明3 : window.setInterval(函数名称, 时间毫秒数);</span><br><span class="line"> </span><br><span class="line">说明4 : window.setInterval(匿名函数, 时间毫秒数);            推荐使用</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;轮播图&lt;&#x2F;title&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;style&gt;</span><br><span class="line"> </span><br><span class="line">        div &#123;</span><br><span class="line">            width: 80%;</span><br><span class="line">            margin: 50px auto;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        img &#123;</span><br><span class="line">            width: 100%;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line"> </span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">        &lt;img src&#x3D;&quot;..&#x2F;img&#x2F;01.jpg&quot; alt&#x3D;&quot;图片&quot;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><p>实现一：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 需求 : 动态获取页面中的 img 标签, 然后修改 img 标签的 src 属性.</span><br><span class="line">    &#x2F;&#x2F; 1. 获取 img 标签</span><br><span class="line">    var img &#x3D; document.getElementById(&quot;img&quot;);</span><br><span class="line">    &#x2F;&#x2F; alert(img);</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 定义一个变量</span><br><span class="line">    var count &#x3D; 1;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 1.2 定义一个函数</span><br><span class="line">    function changeImageSrc() &#123;</span><br><span class="line">        count++;</span><br><span class="line">        img.src &#x3D; &quot;..&#x2F;img&#x2F;0&quot;+count+&quot;.jpg&quot;;</span><br><span class="line"> </span><br><span class="line">        &#x2F;&#x2F; 判断</span><br><span class="line">        if (count &#x3D;&#x3D; 8) &#123;</span><br><span class="line">            count &#x3D; 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 2. 循环切换图片</span><br><span class="line">    &#x2F;&#x2F; window.setInterval(函数, 时间毫秒); 在指定的时间毫秒间隔, 不断调用第一个参数传入的函数.</span><br><span class="line">    &#x2F;&#x2F; 调用方式一 :</span><br><span class="line">    &#x2F;&#x2F; window.setInterval(&quot;changeImageSrc()&quot;, 1000);</span><br><span class="line">    &#x2F;&#x2F; 调用方式二 :</span><br><span class="line">    window.setInterval(changeImageSrc, 1000);</span><br><span class="line"> </span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>实现二：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 需求 : 动态获取页面中的 img 标签, 然后修改 img 标签的 src 属性.</span><br><span class="line">    &#x2F;&#x2F; 1. 获取 img 标签</span><br><span class="line">    var img &#x3D; document.getElementById(&quot;img&quot;);</span><br><span class="line">    &#x2F;&#x2F; alert(img);</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 定义一个变量</span><br><span class="line">    var count &#x3D; 1;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 2. 循环切换图片</span><br><span class="line">    &#x2F;&#x2F; window.setInterval(匿名函数, 时间毫秒); 在指定的时间毫秒间隔, 不断调用第一个参数传入的匿名函数.</span><br><span class="line">    window.setInterval(function() &#123;</span><br><span class="line">        count++;</span><br><span class="line">        img.src &#x3D; &quot;..&#x2F;img&#x2F;0&quot;+count+&quot;.jpg&quot;;</span><br><span class="line"> </span><br><span class="line">        &#x2F;&#x2F; 判断</span><br><span class="line">        if (count &#x3D;&#x3D; 8) &#123;</span><br><span class="line">            count &#x3D; 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, 1000);</span><br><span class="line"> </span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="JavaScript-输出"><a href="#JavaScript-输出" class="headerlink" title="JavaScript 输出"></a>JavaScript 输出</h2><p>JavaScript没有任何打印或输出的函数</p><h3 id="JavaScript-显示数据"><a href="#JavaScript-显示数据" class="headerlink" title="JavaScript 显示数据"></a>JavaScript 显示数据</h3><p>JavaScript可以通过不同的方式来输出数据：</p><ul><li>使用**window.alert()**弹出警告框</li><li>使用**document.write()**方法将内容写到HTML中</li><li>使用<strong>innerHTML</strong>写入到HTML元素</li><li>使用**console.log()**写入到浏览器的控制台</li></ul><h4 id="window-alert"><a href="#window-alert" class="headerlink" title="window.alert()"></a>window.alert()</h4><p>你可以弹出警告框来显示数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;我的第一个页面&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;p&gt;我的第一个段落。&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">window.alert(&quot;弹出的警告框要显示的内容&quot;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h4 id="document-write"><a href="#document-write" class="headerlink" title="document.write()"></a>document.write()</h4><p>一般用于测试目的，可以将JavaScript直接写在HTML文档中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;我的第一个 Web 页面&lt;&#x2F;h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;我的第一个段落。&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">document.write(Date()); &lt;!--显示时间方法Data()--&gt;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>tips：如果在文档已完成加载后执行 document.write，整个 HTML 页面将被覆盖。比如将 document.write(Date())封装在function myFunction()函数中，用按钮<button onclick="myFunction()">点击</button>调用的话，则会覆盖掉原有的已经加载过得内容</p><h4 id="innerHTML"><a href="#innerHTML" class="headerlink" title="innerHTML()"></a>innerHTML()</h4><p>如需从 JavaScript 访问某个 HTML 元素，您可以使用 document.getElementById(id) 方法。<br>请使用 “id” 属性来标识 HTML 元素，并 innerHTML 来获取或插入元素内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;我的第一个 Web 页面&lt;&#x2F;h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;p id&#x3D;&quot;demo&quot;&gt;我的第一个段落&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">document.getElementById(&quot;demo&quot;).innerHTML &#x3D; &quot;段落已修改。&quot;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p><strong>document.getElementById(“demo”)</strong> 是使用 id 属性来查找 HTML 元素的 JavaScript 代码 。<br><strong>innerHTML = “段落已修改。”</strong> 是用于修改原来元素的 HTML 内容为(innerHTML)的 JavaScript 代码。</p><h4 id="console-log"><a href="#console-log" class="headerlink" title="console.log()"></a>console.log()</h4><p>如果您的浏览器支持调试，你可以使用 console.log() 方法在浏览器中显示 JavaScript 值。</p><p>浏览器中使用 F12 来启用调试模式， 在调试窗口中点击 “Console” 菜单。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;我的第一个 Web 页面&lt;&#x2F;h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">a &#x3D; 5;</span><br><span class="line">b &#x3D; 6;</span><br><span class="line">c &#x3D; a + b;</span><br><span class="line">console.log(c);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h2 id="JS-函数"><a href="#JS-函数" class="headerlink" title="JS 函数"></a>JS 函数</h2><h3 id="JavaScript-函数定义"><a href="#JavaScript-函数定义" class="headerlink" title="JavaScript 函数定义"></a>JavaScript 函数定义</h3><h4 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h4><p>函数是命名的独立的语句段，这个语句段可以被当作一个整体来引用和执行：</p><p>格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function 函数名(形式参数)&#123;函数体&#125;</span><br><span class="line"></span><br><span class="line">调用函数：函数名(实际参数);</span><br></pre></td></tr></table></figure><hr><p>1、函数只有被调用后才会执行<br>2、如果函数需要返回值、直接使用return 返回、不会像java一样要考虑返回值的类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 定义一个函数 : function</span><br><span class="line">    function demo1() &#123;</span><br><span class="line">        return 50;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 调用函数 :</span><br><span class="line">    alert(demo1()); &#x2F;&#x2F;出现内容为50的弹窗</span><br><span class="line"> </span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><hr><p>3、如果函数需要传递参数、不需要指定参数的类型、直接使用变量即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 定义一个函数 : function</span><br><span class="line">    function demo2(a, b) &#123;</span><br><span class="line">        return a * b;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 调用函数 :</span><br><span class="line">    alert(demo2(5,10));&#x2F;&#x2F;显示50</span><br><span class="line"> </span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><hr><p>4、js中出现二个重名的函数名、后者会把前面的覆盖掉<br>对比java、java有重载（同名不同参）、重写（同名同参同返回值类型、方法体不一样）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 定义一个函数 : function</span><br><span class="line">    function demo4(a, b) &#123;</span><br><span class="line">        alert(&quot;调用1...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">   function demo4() &#123;</span><br><span class="line">       alert(&quot;调用2...&quot;);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">    demo4(10, 20);</span><br><span class="line">    demo4();</span><br><span class="line"> </span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><p>解释：匿名函数是没有名字的函数。在函数表达式存储在变量后，变量也可作为一个函数使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function(形式参数)&#123;函数体&#125;</span><br><span class="line"></span><br><span class="line">调用方式：将匿名函数赋值给一个变量，通过变量名调用函数</span><br><span class="line"></span><br><span class="line">定义函数并赋值给变量：var x &#x3D; function(形式参数)&#123;函数体&#125;</span><br><span class="line">调用函数：x(实际参数);</span><br></pre></td></tr></table></figure><p>演示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 匿名函数 : 没有名称的函数</span><br><span class="line">    var x &#x3D; function(a, b) &#123;</span><br><span class="line">        return a*b;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 调用函数 :</span><br><span class="line">   alert(x(5, 10));&#x2F;&#x2F;弹窗显示50</span><br><span class="line"> </span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h4 id="自调用函数"><a href="#自调用函数" class="headerlink" title="自调用函数"></a>自调用函数</h4><p>如果表达式后面紧跟 () ，则会自动调用。<br>不能自调用声明的函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(function () &#123;</span><br><span class="line">    var x &#x3D; &quot;Hello!!&quot;;      &#x2F;&#x2F; 我将调用自己</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>以上函数实际上是一个 匿名自我调用的函数 (没有函数名)。</p><h4 id="函数可作为一个值使用"><a href="#函数可作为一个值使用" class="headerlink" title="函数可作为一个值使用"></a>函数可作为一个值使用</h4><p>JavaScript 函数作为一个值使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function myFunction(a, b) &#123;</span><br><span class="line">    return a * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var x &#x3D; myFunction(4, 3);</span><br></pre></td></tr></table></figure><p>也可以作为表达式使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function myFunction(a, b) &#123;</span><br><span class="line">    return a * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var x &#x3D; myFunction(4, 3) * 2;</span><br></pre></td></tr></table></figure><h4 id="函数是对象"><a href="#函数是对象" class="headerlink" title="函数是对象"></a>函数是对象</h4><p>JavaScript 函数有 属性 和 方法</p><p>arguments.length 属性返回函数调用过程接收到的参数个数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function myFunction(a, b) &#123;</span><br><span class="line">    return arguments.length; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>toString() 方法将函数作为一个字符串返回:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function myFunction(a, b) &#123;</span><br><span class="line">    return a * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var txt &#x3D; myFunction.toString();</span><br></pre></td></tr></table></figure><h3 id="Js-函数的参数"><a href="#Js-函数的参数" class="headerlink" title="Js 函数的参数"></a>Js 函数的参数</h3><h4 id="显示参数（Parameters）"><a href="#显示参数（Parameters）" class="headerlink" title="显示参数（Parameters）"></a>显示参数（Parameters）</h4><ul><li>显示参数在函数定义时被列出</li><li>JavaScript 函数定义显式参数时没有指定数据类型</li></ul><p>默认参数<br>ES5 中如果函数在调用时未提供隐式参数，参数会默认设置为： undefined</p><p>有时这是可以接受的，但是建议最好为参数设置一个默认值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">实例(ES5)</span><br><span class="line">function myFunction(x, y) &#123;</span><br><span class="line">    if (y &#x3D;&#x3D;&#x3D; undefined) &#123;</span><br><span class="line">          y &#x3D; 0;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 调用函数</span><br><span class="line">alert(myFunction(4))  &#x2F;&#x2F; 弹窗显示0</span><br></pre></td></tr></table></figure><p><strong>ES6 函数可以自带参数</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">实例（ES6）</span><br><span class="line">function myFunction(x, y &#x3D; 10) &#123;</span><br><span class="line">    &#x2F;&#x2F; y is 10 if not passed or undefined</span><br><span class="line">    return x + y;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">myFunction(0, 2) &#x2F;&#x2F; 输出 2</span><br><span class="line">myFunction(5); &#x2F;&#x2F; 输出 15, y 参数的默认值</span><br></pre></td></tr></table></figure><h4 id="隐式参数（Arguments）"><a href="#隐式参数（Arguments）" class="headerlink" title="隐式参数（Arguments）"></a>隐式参数（Arguments）</h4><ul><li>隐式参数在函数调用是传递给函数真正的值</li><li>JavaScript 函数对隐式参数没有进行类型检测。</li><li>JavaScript 函数对隐式参数的个数没有进行检测。</li></ul><p><strong>arguments 对象</strong><br>JavaScript 函数有个内置的对象 arguments 对象。</p><p>argument 对象包含了函数调用的参数数组。</p><p>通过这种方式你可以很方便的找到最大的一个参数的值:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">实例：</span><br><span class="line"></span><br><span class="line">x &#x3D; findMax(1, 123, 500, 115, 44, 88);</span><br><span class="line"> </span><br><span class="line">function findMax() &#123;</span><br><span class="line">    var i, max &#x3D; arguments[0];</span><br><span class="line">    </span><br><span class="line">    if(arguments.length &lt; 2) return max;</span><br><span class="line"> </span><br><span class="line">    for (i &#x3D; 0; i &lt; arguments.length; i++) &#123;</span><br><span class="line">        if (arguments[i] &gt; max) &#123;</span><br><span class="line">            max &#x3D; arguments[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>通过值传递参数</strong><br>在函数中调用的参数是函数的隐式参数。</p><p>JavaScript 隐式参数通过值来传递：函数仅仅只是获取值。</p><p>如果函数修改参数的值，不会修改显式参数的初始值（在函数外定义）。</p><p>隐式参数的改变在函数外是不可见的。</p><p><strong>通过对象传递参数</strong><br>在JavaScript中，可以引用对象的值。</p><p>因此我们在函数内部修改对象的属性就会修改其初始的值。</p><p>修改对象属性可作用于函数外部（全局变量）。</p><p>修改对象属性在函数外是可见的。</p><h3 id="JavaScript-函数调用"><a href="#JavaScript-函数调用" class="headerlink" title="JavaScript 函数调用"></a>JavaScript 函数调用</h3><p>JavaScript函数有4中调用方式<br>每种方式不用在于this的初始化</p><p><strong>this关键字</strong><br>一般而言，在Javascript中，this指向函数执行时的当前对象。<br>注意 this 是保留关键字，你不能修改 this 的值。</p><h4 id="作为函数调用"><a href="#作为函数调用" class="headerlink" title="作为函数调用"></a>作为函数调用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function myFunction(a, b) &#123;</span><br><span class="line">    return a * b;</span><br><span class="line">&#125;</span><br><span class="line">myFunction(10, 2);           &#x2F;&#x2F; myFunction(10, 2) 返回 20</span><br><span class="line">&#x2F;&#x2F; window.myFunction(10, 2);    &#x2F;&#x2F; window.myFunction(10, 2) 返回 20</span><br></pre></td></tr></table></figure><p>以上函数不属于任何对象。但是在 JavaScript 中它始终是默认的全局对象。</p><p>在 HTML 中默认的全局对象是 HTML 页面本身，所以函数是属于 HTML 页面。</p><p>在浏览器中的页面对象是浏览器窗口(window 对象)。以上函数会自动变为 window 对象的函数。</p><p>myFunction() 和 window.myFunction() 是一样的：</p><h4 id="作为方法调用"><a href="#作为方法调用" class="headerlink" title="作为方法调用"></a>作为方法调用</h4><p>在 JavaScript 中你可以将函数定义为对象的方法。</p><p>以下实例创建了一个对象 (myObject), 对象有两个属性 (firstName 和 lastName), 及一个方法 (fullName):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">实例</span><br><span class="line">var myObject &#x3D; &#123;</span><br><span class="line">    firstName:&quot;John&quot;,</span><br><span class="line">    lastName: &quot;Doe&quot;,</span><br><span class="line">    fullName: function () &#123;</span><br><span class="line">        return this.firstName + &quot; &quot; + this.lastName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">myObject.fullName();         &#x2F;&#x2F; 返回 &quot;John Doe&quot;</span><br></pre></td></tr></table></figure><p>tips: 函数作为对象方法调用，会使得 this 的值成为对象本身。</p><h4 id="使用构造函数调用函数"><a href="#使用构造函数调用函数" class="headerlink" title="使用构造函数调用函数"></a>使用构造函数调用函数</h4><p>如果函数调用前使用了 new 关键字, 则是调用了构造函数。<br>这看起来就像创建了新的函数，但实际上 JavaScript 函数是重新创建的对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 构造函数:</span><br><span class="line">function myFunction(arg1, arg2) &#123;</span><br><span class="line">    this.firstName &#x3D; arg1;</span><br><span class="line">    this.lastName  &#x3D; arg2;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; This    creates a new object</span><br><span class="line">var x &#x3D; new myFunction(&quot;John&quot;,&quot;Doe&quot;);</span><br><span class="line">x.firstName;                             &#x2F;&#x2F; 返回 &quot;John&quot;</span><br></pre></td></tr></table></figure><p>构造函数的调用会创建一个新的对象。新对象会继承构造函数的属性和方法。</p><p>tips: 构造函数中 this 关键字没有任何的值。this 的值在函数调用实例化对象(new object)时创建。</p><h4 id="作为函数方法调用函数"><a href="#作为函数方法调用函数" class="headerlink" title="作为函数方法调用函数"></a>作为函数方法调用函数</h4><p>在 JavaScript 中, 函数是对象。JavaScript 函数有它的属性和方法。<br>call() 和 apply() 是预定义的函数方法。 两个方法可用于调用函数，两个方法的第一个参数必须是对象本身。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function myFunction(a, b) &#123;</span><br><span class="line">    return a * b;</span><br><span class="line">&#125;</span><br><span class="line">myObject &#x3D; myFunction.call(myObject, 10, 2);     &#x2F;&#x2F; 返回 20</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function myFunction(a, b) &#123;</span><br><span class="line">    return a * b;</span><br><span class="line">&#125;</span><br><span class="line">myArray &#x3D; [10, 2];</span><br><span class="line">myObject &#x3D; myFunction.apply(myObject, myArray);  &#x2F;&#x2F; 返回 20</span><br></pre></td></tr></table></figure><p>两个方法都使用了对象本身作为第一个参数。 两者的区别在于第二个参数： apply传入的是一个参数数组，也就是将多个参数组合成为一个数组传入，而call则作为call的参数传入（从第二个参数开始）。</p><p>在 JavaScript 严格模式(strict mode)下, 在调用函数时第一个参数会成为 this 的值， 即使该参数不是一个对象。</p><p>在 JavaScript 非严格模式(non-strict mode)下, 如果第一个参数的值是 null 或 undefined, 它将使用全局对象替代。</p><p>tips:通过 call() 或 apply() 方法你可以设置 this 的值, 且作为已存在对象的新方法调用。</p><h2 id="JavaScript-HTML-DOM"><a href="#JavaScript-HTML-DOM" class="headerlink" title="JavaScript HTML DOM"></a>JavaScript HTML DOM</h2><p>通过 HTML DOM，可访问 JavaScript HTML 文档的所有元素。</p><h3 id="DOM-简介"><a href="#DOM-简介" class="headerlink" title="DOM 简介"></a>DOM 简介</h3><p><strong>HTML DOM (文档对象模型)</strong><br>当网页被加载时，浏览器会创建页面的文档对象模型（Document Object Model）。</p><ul><li>JavaScript 能够改变页面中的所有 HTML 元素</li><li>JavaScript 能够改变页面中的所有 HTML 属性</li><li>JavaScript 能够改变页面中的所有 CSS 样式</li><li>JavaScript 能够对页面中的所有事件做出反应</li></ul><h4 id="查找HTML元素"><a href="#查找HTML元素" class="headerlink" title="查找HTML元素"></a>查找HTML元素</h4><p>通常，通过 JavaScript，您需要操作 HTML 元素。<br>为了做到这件事情，您必须首先找到该元素。有三种方法来做这件事：</p><ul><li>通过id找到HTML元素</li><li>通过标签名找到 HTML 元素</li><li>通过类名找到 HTML 元素</li></ul><p><strong>通过 id 查找 HTML 元素</strong><br>最简单，最常用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">例如： 查找&lt;p id&#x3D;&quot;demo&quot;&gt;</span><br><span class="line">var x&#x3D;document.getElementById(&quot;demo&quot;);</span><br></pre></td></tr></table></figure><p><strong>通过标签名查找 HTML 元素</strong><br>本例查找 id=”main” 的元素，然后查找 id=”main” 元素中的所有 <p> 元素：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var x&#x3D;document.getElementById(&quot;main&quot;);</span><br><span class="line">var y&#x3D;x.getElementsByTagName(&quot;p&quot;);</span><br></pre></td></tr></table></figure><p><strong>通过类名找到 HTML 元素</strong><br>查找 class=”intro” 的元素：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var x&#x3D;document.getElementsByClassName(&quot;intro&quot;);</span><br></pre></td></tr></table></figure><h3 id="DOM-HTML（改变HTML）"><a href="#DOM-HTML（改变HTML）" class="headerlink" title="DOM HTML（改变HTML）"></a>DOM HTML（改变HTML）</h3><p>HTML DOM 允许 JavaScript 改变 HTML 元素的内容。</p><h4 id="改变HTML输出流"><a href="#改变HTML输出流" class="headerlink" title="改变HTML输出流"></a>改变HTML输出流</h4><p>在 JavaScript 中，document.write() 可用于直接向 HTML 输出流写内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">document.write(Date());</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h4 id="改变HTML内容"><a href="#改变HTML内容" class="headerlink" title="改变HTML内容"></a>改变HTML内容</h4><p>修改 HTML 内容的最简单的方法是使用 innerHTML 属性。<br>如需改变 HTML 元素的内容，请使用这个语法：<br><code>document.getElementById(id).innerHTML=新的 HTML</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">本例改变了 &lt;p&gt;元素的内容：</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;p id&#x3D;&quot;p1&quot;&gt;Hello World!&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">document.getElementById(&quot;p1&quot;).innerHTML&#x3D;&quot;新文本!&quot;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h4 id="改变HTML属性"><a href="#改变HTML属性" class="headerlink" title="改变HTML属性"></a>改变HTML属性</h4><p>如需改变 HTML 元素的属性，请使用这个语法：<br><code>document.getElementById(id).attribute=新属性值</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">改变&lt;img&gt;元素的src属性</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;img id&#x3D;&quot;image&quot; src&#x3D;&quot;smiley.gif&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">document.getElementById(&quot;image&quot;).src&#x3D;&quot;landscape.jpg&quot;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="DOM-CSS（改变CSS）"><a href="#DOM-CSS（改变CSS）" class="headerlink" title="DOM CSS（改变CSS）"></a>DOM CSS（改变CSS）</h3><p>HTML DOM 允许 JavaScript 改变 HTML 元素的样式。<br><strong>改变HTML样式</strong><br>如需改变 HTML 元素的样式，请使用这个语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.getElementById(id).style.property&#x3D;新样式</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">改变&lt;p&gt;元素的样式：</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;菜鸟教程(runoob.com)&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"> </span><br><span class="line">&lt;p id&#x3D;&quot;p1&quot;&gt;Hello World!&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p id&#x3D;&quot;p2&quot;&gt;Hello World!&lt;&#x2F;p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">document.getElementById(&quot;p2&quot;).style.color&#x3D;&quot;blue&quot;;</span><br><span class="line">document.getElementById(&quot;p2&quot;).style.fontFamily&#x3D;&quot;Arial&quot;;</span><br><span class="line">document.getElementById(&quot;p2&quot;).style.fontSize&#x3D;&quot;larger&quot;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;p&gt;以上段落通过脚本修改。&lt;&#x2F;p&gt;</span><br><span class="line"> </span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p><strong>使用事件</strong><br>HTML DOM 允许我们通过触发事件来执行代码。</p><p>比如以下事件：</p><ul><li>元素被点击。</li><li>页面加载完成。</li><li>输入框被修改</li><li>……</li></ul><p>本例改变了 id=”id1” 的 HTML 元素的样式，当用户点击按钮时</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1 id&#x3D;&quot;id1&quot;&gt;我的标题 1&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;button type&#x3D;&quot;button&quot;</span><br><span class="line">onclick&#x3D;&quot;document.getElementById(&#39;id1&#39;).style.color&#x3D;&#39;red&#39;&quot;&gt;</span><br><span class="line">按钮&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="DOM-事件"><a href="#DOM-事件" class="headerlink" title="DOM 事件"></a>DOM 事件</h3><h4 id="事件概述"><a href="#事件概述" class="headerlink" title="事件概述"></a>事件概述</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">事件三要素：</span><br><span class="line">1.事件源：被监听的html元素（就是这个事件加给谁），就是某个（某些）html标签</span><br><span class="line">2.事件类型：某类动作，例如点击事件，移入移除事件，敲击键盘事件等</span><br><span class="line">3.执行指令：事件触发后需要执行的代码，一般使用函数进行封装</span><br><span class="line">语法格式：事件源.事件类型&#x3D;执行指令</span><br></pre></td></tr></table></figure><h4 id="常用的事件："><a href="#常用的事件：" class="headerlink" title="常用的事件："></a>常用的事件：</h4><table><thead><tr><th align="center">事件名</th><th align="center">表现描述</th></tr></thead><tbody><tr><td align="center"><strong>onload</strong></td><td align="center"><strong>某个页面或图像被完成加载</strong></td></tr><tr><td align="center"><strong>onsubmit</strong></td><td align="center"><strong>当表单提交时触发该事件—注意事件源是表单form</strong></td></tr><tr><td align="center"><strong>onclick</strong></td><td align="center"><strong>鼠标点击某个对象</strong></td></tr><tr><td align="center">ondblclick</td><td align="center">鼠标双击某个对象</td></tr><tr><td align="center"><strong>onblur</strong></td><td align="center"><strong>元素失去焦点，通常针对表单元素</strong></td></tr><tr><td align="center"><strong>onfocus</strong></td><td align="center">元素获得焦点，通常针对表单元素</td></tr><tr><td align="center"><strong>onchange</strong></td><td align="center"><strong>用户改变域的内容，通常针对表单元素</strong></td></tr><tr><td align="center">onkeydown</td><td align="center">某个键盘的键被按下</td></tr><tr><td align="center">onkeypress</td><td align="center">某个键盘的键被按下或按住</td></tr><tr><td align="center">onkeyup</td><td align="center">某个键盘的键被松开</td></tr><tr><td align="center">onmousedown</td><td align="center">某个鼠标键被按下</td></tr><tr><td align="center">onmouseup</td><td align="center">某个鼠标键被松开</td></tr><tr><td align="center"><strong>onmouseove</strong>r</td><td align="center"><strong>鼠标被移到某元素上</strong></td></tr><tr><td align="center"><strong>onmouseout</strong></td><td align="center"><strong>鼠标从某元素移开</strong></td></tr><tr><td align="center">onmousemove</td><td align="center">鼠标被移动</td></tr></tbody></table><h5 id="onclick-事件"><a href="#onclick-事件" class="headerlink" title="onclick 事件"></a>onclick 事件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">实例onclick，当用户在 &lt;h1&gt; 元素上点击时，会改变其内容：</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1 onclick&#x3D;&quot;this.innerHTML&#x3D;&#39;Ooops!&#39;&quot;&gt;点击文本!&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>HTML事件属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">向 button 元素分配 onclick 事件</span><br><span class="line">名为 displayDate 的函数将在按钮被点击时执行。</span><br><span class="line"></span><br><span class="line">&lt;button onclick&#x3D;&quot;displayDate()&quot;&gt;点这里&lt;&#x2F;button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">function displayDate()&#123;</span><br><span class="line">document.getElementById(&quot;demo&quot;).innerHTML&#x3D;Date();</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure><h5 id="onload和onunload-事件"><a href="#onload和onunload-事件" class="headerlink" title="onload和onunload 事件"></a>onload和onunload 事件</h5><p>onload 和 onunload 事件会在用户进入或离开页面时被触发。<br>onload 事件可用于检测访问者的浏览器类型和浏览器版本，并基于这些信息来加载网页的正确版本。<br>onload 和 onunload 事件可用于处理 cookie。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body onload&#x3D;&quot;checkCookies()&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">function checkCookies()&#123;</span><br><span class="line">if (navigator.cookieEnabled&#x3D;&#x3D;true)&#123;</span><br><span class="line">alert(&quot;Cookies 可用&quot;)</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">alert(&quot;Cookies 不可用&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;p&gt;弹窗-提示浏览器 cookie 是否可用。&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><h5 id="onchange-事件"><a href="#onchange-事件" class="headerlink" title="onchange 事件"></a>onchange 事件</h5><p>onchange 事件常结合对输入字段的验证来使用。</p><p>下面是一个如何使用 onchange 的例子。当用户改变输入字段的内容时，会调用 upperCase() 函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">function myFunction()&#123;</span><br><span class="line">var x&#x3D;document.getElementById(&quot;fname&quot;);</span><br><span class="line">x.value&#x3D;x.value.toUpperCase();</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">输入你的名字: &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;fname&quot; onchange&#x3D;&quot;myFunction()&quot;&gt;</span><br><span class="line">&lt;p&gt;当你离开输入框后，函数将被触发，将小写字母转为大写字母。&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><h5 id="onmouseover-和-onmouseout-事件"><a href="#onmouseover-和-onmouseout-事件" class="headerlink" title="onmouseover 和 onmouseout 事件"></a>onmouseover 和 onmouseout 事件</h5><p>onmouseover 和 onmouseout 事件可用于在用户的鼠标移至 HTML 元素上方或移出元素时触发函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div onmouseover&#x3D;&quot;mOver(this)&quot; onmouseout&#x3D;&quot;mOut(this)&quot; style&#x3D;&quot;background-color:#D94A38;width:120px;height:20px;padding:40px;&quot;&gt;Mouse Over Me&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">function mOver(obj)&#123;</span><br><span class="line">obj.innerHTML&#x3D;&quot;Thank You&quot;</span><br><span class="line">&#125;</span><br><span class="line">function mOut(obj)&#123;</span><br><span class="line">obj.innerHTML&#x3D;&quot;Mouse Over Me&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><p>案列：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;事件&lt;&#x2F;title&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        &#x2F;&#x2F; 窗口 : window 对象提供了一个事件类型  onload 页面加载完成事件.</span><br><span class="line">        &#x2F;&#x2F; 事件源 : window    事件类型 : 页面加载完成事件 (onload)  执行指令: 就是赋值的 function 函数.</span><br><span class="line">        window.onload &#x3D; function () &#123;</span><br><span class="line"> </span><br><span class="line">            &#x2F;&#x2F; 获取页面的 btn 按钮</span><br><span class="line">            var btn &#x3D; document.getElementById(&quot;btn&quot;);</span><br><span class="line">            &#x2F;&#x2F; alert(btn);</span><br><span class="line"> </span><br><span class="line">            &#x2F;&#x2F; 给 btn 按钮绑定一个事件 (单击事件 onclick)</span><br><span class="line">            &#x2F;&#x2F; 事件源 : btn按钮    事件类型 : 单击事件 (onclick)  执行指令: 就是赋值的 function 函数.</span><br><span class="line">            btn.onclick &#x3D; function () &#123;</span><br><span class="line">                alert(&quot;恭喜你, 中了 500 万!&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line"> </span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button id&#x3D;&quot;btn&quot;&gt;按钮&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="DOM-Eventlistener"><a href="#DOM-Eventlistener" class="headerlink" title="DOM Eventlistener"></a>DOM Eventlistener</h3><h4 id="addEventListener-方法"><a href="#addEventListener-方法" class="headerlink" title="addEventListener() 方法"></a>addEventListener() 方法</h4><p><strong>语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.addEventListener(event, function, useCapture);</span><br></pre></td></tr></table></figure><p>第一个参数是事件的类型 (如 “click” 或 “mousedown”).</p><p>第二个参数是事件触发后调用的函数。</p><p>第三个参数是个布尔值用于描述事件是冒泡还是捕获。该参数是可选的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">实例</span><br><span class="line">在用户点击按钮时触发监听事件：</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;该实例使用 addEventListener() 方法在按钮中添加点击事件。 &lt;&#x2F;p&gt;</span><br><span class="line">&lt;button id&#x3D;&quot;myBtn&quot;&gt;点我&lt;&#x2F;button&gt;</span><br><span class="line">&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">document.getElementById(&quot;myBtn&quot;).addEventListener(&quot;click&quot;, displayDate);</span><br><span class="line">function displayDate() &#123;</span><br><span class="line">    document.getElementById(&quot;demo&quot;).innerHTML &#x3D; Date();</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><h4 id="removeEventListener-方法"><a href="#removeEventListener-方法" class="headerlink" title="removeEventListener() 方法"></a>removeEventListener() 方法</h4><p>removeEventListener() 方法移除由 addEventListener() 方法添加的事件句柄</p><h3 id="DOM-元素"><a href="#DOM-元素" class="headerlink" title="DOM 元素"></a>DOM 元素</h3><h4 id="创建新的-HTML-元素-节点-appendChild"><a href="#创建新的-HTML-元素-节点-appendChild" class="headerlink" title="创建新的 HTML 元素 (节点) - appendChild()"></a>创建新的 HTML 元素 (节点) - appendChild()</h4><p>要创建新的 HTML 元素 (节点)需要先创建一个元素，然后在已存在的元素中添加它。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;div1&quot;&gt;</span><br><span class="line">&lt;p id&#x3D;&quot;p1&quot;&gt;这是一个段落。&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p id&#x3D;&quot;p2&quot;&gt;这是另外一个段落。&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script&gt;</span><br><span class="line">var para &#x3D; document.createElement(&quot;p&quot;);</span><br><span class="line">var node &#x3D; document.createTextNode(&quot;这是一个新的段落。&quot;);</span><br><span class="line">para.appendChild(node);</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; 添加新元素到尾部</span><br><span class="line">var element &#x3D; document.getElementById(&quot;div1&quot;);</span><br><span class="line">element.appendChild(para);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 添加新元素到开始位置，可以使用insertBefore方法</span><br><span class="line">var element &#x3D; document.getElementById(&quot;div1&quot;);</span><br><span class="line">var child &#x3D; document.getElementById(&quot;p1&quot;);</span><br><span class="line">element.insertBefore(para, child);</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>实例解析<br>以下代码是用于创建 <p> 元素:</p><p>var para = document.createElement(“p”);<br>为 <p> 元素创建一个新的文本节点：</p><p>var node = document.createTextNode(“这是一个新的段落。”);<br>将文本节点添加到 <p> 元素中：</p><p>para.appendChild(node);<br>最后，在一个已存在的元素中添加 p 元素。</p><p>查找已存在的元素：</p><p>var element = document.getElementById(“div1”);<br>添加到已存在的元素中:</p><p>element.appendChild(para);</p><h4 id="移除已存在的元素"><a href="#移除已存在的元素" class="headerlink" title="移除已存在的元素"></a>移除已存在的元素</h4><p>要移除一个元素，你需要知道该元素的父元素。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;div1&quot;&gt;</span><br><span class="line">&lt;p id&#x3D;&quot;p1&quot;&gt;这是一个段落。&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p id&#x3D;&quot;p2&quot;&gt;这是另外一个段落。&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script&gt;</span><br><span class="line">var parent &#x3D; document.getElementById(&quot;div1&quot;);</span><br><span class="line">var child &#x3D; document.getElementById(&quot;p1&quot;);</span><br><span class="line">parent.removeChild(child);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>实例解析<br>HTML 文档中 <div> 元素包含两个子节点 (两个 <p> 元素):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;div1&quot;&gt;</span><br><span class="line">&lt;p id&#x3D;&quot;p1&quot;&gt;这是一个段落。&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p id&#x3D;&quot;p2&quot;&gt;这是另外一个段落。&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;&#96;</span><br></pre></td></tr></table></figure><p>查找 id=”div1” 的元素:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var parent &#x3D; document.getElementById(&quot;div1&quot;);</span><br></pre></td></tr></table></figure><p>查找 id=”p1” 的 <code>&lt;p&gt;</code> 元素:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var child &#x3D; document.getElementById(&quot;p1&quot;);</span><br></pre></td></tr></table></figure><p>从父元素中移除子节点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parent.removeChild(child);</span><br></pre></td></tr></table></figure><p>注意：    如果能够在不引用父元素的情况下删除某个元素，就太好了。<br>不过很遗憾。DOM 需要清楚您需要删除的元素，以及它的父元素。<br>以下代码是已知要查找的子元素，然后查找其父元素，再删除这个子元素（删除节点必须知道父节点）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var child &#x3D; document.getElementById(&quot;p1&quot;);</span><br><span class="line">child.parentNode.removeChild(child);</span><br></pre></td></tr></table></figure><h4 id="替换-HTML-元素-replaceChild"><a href="#替换-HTML-元素-replaceChild" class="headerlink" title="替换 HTML 元素 - replaceChild()"></a>替换 HTML 元素 - replaceChild()</h4><p>我们可以使用 replaceChild() 方法来替换 HTML DOM 中的元素。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;div1&quot;&gt;</span><br><span class="line">&lt;p id&#x3D;&quot;p1&quot;&gt;这是一个段落。&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p id&#x3D;&quot;p2&quot;&gt;这是另外一个段落。&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script&gt;</span><br><span class="line">var para &#x3D; document.createElement(&quot;p&quot;);</span><br><span class="line">var node &#x3D; document.createTextNode(&quot;这是一个新的段落。&quot;);</span><br><span class="line">para.appendChild(node);</span><br><span class="line"> </span><br><span class="line">var parent &#x3D; document.getElementById(&quot;div1&quot;);</span><br><span class="line">var child &#x3D; document.getElementById(&quot;p1&quot;);</span><br><span class="line">parent.replaceChild(para, child);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="HTMLCollection-对象"><a href="#HTMLCollection-对象" class="headerlink" title="HTMLCollection 对象"></a>HTMLCollection 对象</h3><h3 id="NodeList对象"><a href="#NodeList对象" class="headerlink" title="NodeList对象"></a>NodeList对象</h3>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS</title>
      <link href="posts/52116.html"/>
      <url>posts/52116.html</url>
      
        <content type="html"><![CDATA[<h2 id="CSS是什么"><a href="#CSS是什么" class="headerlink" title="CSS是什么"></a>CSS是什么</h2><p>叠层样式表 作用：修饰HTML，通俗来说就是内容的呈现方式</p><h2 id="CSS样式规则"><a href="#CSS样式规则" class="headerlink" title="CSS样式规则"></a>CSS样式规则</h2><p>CSS规则由两部分构成：选择器，一条或多条声明</p><h2 id="引入方式-CSS创建"><a href="#引入方式-CSS创建" class="headerlink" title="引入方式(CSS创建)"></a>引入方式(CSS创建)</h2><p>插入样式表的方法有三种：</p><ul><li>外部样式表</li><li>内部样式表</li><li>内联样式</li><li>导入式</li></ul><h3 id="外部样式表-方便用于多个页面的样式"><a href="#外部样式表-方便用于多个页面的样式" class="headerlink" title="外部样式表(方便用于多个页面的样式)"></a>外部样式表(方便用于多个页面的样式)</h3><p>将CSS样式代码单独写在一个.css后缀的外部文件中，通过<link>标签放到HTML的<head>标签之间来引入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;xxx.css&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">样式表案例:</span><br><span class="line">hr &#123;color:sienna;&#125;</span><br><span class="line">p &#123;margin-left:20px;&#125;</span><br><span class="line">body &#123;background-image:url(&quot;&#x2F;images&#x2F;back40.gif&quot;);&#125;</span><br></pre></td></tr></table></figure><h3 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h3><p>当单个文档需要特殊样式时，可以使用内部样式表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">hr &#123;color:sienna;&#125;</span><br><span class="line">p &#123;margin-left:20px;&#125;</span><br><span class="line">body &#123;background-image:url(&quot;images&#x2F;back40.gif&quot;);&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br></pre></td></tr></table></figure><h3 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h3><p>直接在某个标签中定义其样式，效率低。请慎用这种方法，例如当样式仅需要在一个元素上应用一次时。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p style&#x3D;&quot;color:sienna;margin-left:20px&quot;&gt;这是一个段落。&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure><h3 id="导入式（不常用，了解即可）"><a href="#导入式（不常用，了解即可）" class="headerlink" title="导入式（不常用，了解即可）"></a>导入式（不常用，了解即可）</h3><p>需要放在<code>&lt;head&gt;</code>标签里的<code>&lt;style&gt;</code>标签中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@ import url(&quot;文件地址&quot;):</span><br></pre></td></tr></table></figure><h3 id="扩展（多重样式，多重样式的优先级）"><a href="#扩展（多重样式，多重样式的优先级）" class="headerlink" title="扩展（多重样式，多重样式的优先级）"></a>扩展（多重样式，多重样式的优先级）</h3><h4 id="多重样式"><a href="#多重样式" class="headerlink" title="多重样式"></a>多重样式</h4><p>当一种属性在不用样式表中被同样的选择器定义，属性值将会从更具体的样式表中被继承。</p><h4 id="多重样式优秀级"><a href="#多重样式优秀级" class="headerlink" title="多重样式优秀级"></a>多重样式优秀级</h4><p>一般情况下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">（内联样式）Inline style &gt; （内部样式）Internal style sheet &gt;（外部样式）External style sheet &gt; 浏览器默认样式</span><br></pre></td></tr></table></figure><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><ul><li>标签选择器</li><li>id选择器</li><li>类选择器</li><li>全选择器</li><li>伪类</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Document&lt;&#x2F;title&gt;</span><br><span class="line">&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt; </span><br><span class="line"></span><br><span class="line">         p&#123;font-size:20px;&#125;  &lt;!--选择器+&#123;声明&#125;--&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt; </span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">         &lt;p&gt;这是一个段落&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h3><p>直接引用标签作为选择器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    div&#123;color:red;&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div&gt;这是一个块&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h3 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h3><p>CSS 中 id 选择器以 “#”+id名称来定义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#p1&#123;text-align:center; color:red;&#125;</span><br><span class="line">id选择器p1，&#123;&#125;写要实现的样式功能</span><br><span class="line"></span><br><span class="line">&lt;p id&#x3D;&quot;p1&quot;&gt;在标签中指定 id为p1以此来实现其定义的样式</span><br><span class="line">例如：</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt; </span><br><span class="line">&lt;title&gt; id选择器的使用 &lt;&#x2F;title&gt; </span><br><span class="line">&lt;style&gt;</span><br><span class="line">#p1</span><br><span class="line">&#123;</span><br><span class="line">text-align:center;</span><br><span class="line">color:red;</span><br><span class="line">&#125; </span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p id&#x3D;&quot;p1&quot;&gt;Hello World!&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;这个段落不受该样式的影响。&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><p> “.”+class名称，在要使用该样式的标签中用class命名标签。也可以指定特定的HTML元素使用class，例如 p.center{}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt; </span><br><span class="line">&lt;title&gt;类选择器的使用&lt;&#x2F;title&gt; </span><br><span class="line">&lt;style&gt;</span><br><span class="line">.center&#123;</span><br><span class="line">text-align:center;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1 class&#x3D;&quot;center&quot;&gt;标题居中&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;p class&#x3D;&quot;center&quot;&gt;段落居中。&lt;&#x2F;p&gt; </span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>tips：ID和class的命名不要以数字开头，数字开头的ID在 Mozilla/Firefox 浏览器中不起作用</p><h3 id="群组选择器、全选择器"><a href="#群组选择器、全选择器" class="headerlink" title="群组选择器、全选择器"></a>群组选择器、全选择器</h3><p>使用*号来表示 对整个html中的所有标签都起作用<br>(以下省略head和body部分)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">div,p,span&#123;&#125;  &#x2F;* 群组选择器 *&#x2F;</span><br><span class="line">*&#123; text-align:center; &#125; &#x2F;* 通配选择器 *&#x2F;</span><br></pre></td></tr></table></figure><h3 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h3><p><strong>语法</strong><br>selector:pseudo-class { }</p><p>伪类（pseudo-classes）作用于链接上，可以实现你对链接的不同交互效果。</p><ul><li>link</li><li>visited</li><li>hover</li><li>active</li></ul><h4 id="1-link"><a href="#1-link" class="headerlink" title="1.link"></a>1.link</h4><p>用于未访问的链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a:link&#123;</span><br><span class="line">     &lt;!--此处为你没有点击过的链接所展示的效果--&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-visited"><a href="#2-visited" class="headerlink" title="2.visited"></a>2.visited</h4><p>用于以访问链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a:visited&#123;</span><br><span class="line">     &lt;!--当你点击链接后，该链接会展示出点击后的效果--&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-hover"><a href="#3-hover" class="headerlink" title="3.hover"></a>3.hover</h4><p>当鼠标移动到链接上时</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a:hover&#123;</span><br><span class="line">      &lt;!--当你鼠标悬停在链接上时链接产生的效果--&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-active"><a href="#4-active" class="headerlink" title="4.active"></a>4.active</h4><p>按下链接后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a:active&#123;</span><br><span class="line">     &lt;!--按下链接后链接会发生变化--&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt; </span><br><span class="line">&lt;title&gt;菜鸟教程(runoob.com)&lt;&#x2F;title&gt; </span><br><span class="line">&lt;style&gt;</span><br><span class="line">a:link &#123;color:#000000;&#125;      &#x2F;* 未访问链接*&#x2F;</span><br><span class="line">a:visited &#123;color:#00FF00;&#125;  &#x2F;* 已访问链接 *&#x2F;</span><br><span class="line">a:hover &#123;color:#FF00FF;&#125;  &#x2F;* 鼠标移动到链接上 *&#x2F;</span><br><span class="line">a:active &#123;color:#0000FF;&#125;  &#x2F;* 鼠标点击时 *&#x2F;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;&lt;b&gt;&lt;a href&#x3D;&quot;&#x2F;css&#x2F;&quot; target&#x3D;&quot;_blank&quot;&gt;这是一个链接&lt;&#x2F;a&gt;&lt;&#x2F;b&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;&lt;b&gt;注意：&lt;&#x2F;b&gt; 定义的伪类作用于链接&lt;a&gt;标签。&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h4 id="after、-before"><a href="#after、-before" class="headerlink" title=":after、:before"></a>:after、:before</h4><ul><li><code>selector:after</code>：在目标之后添加内容（使用content属性）和样式</li><li><code>selector:before</code>：在目标之前添加内容和样式</li></ul><h4 id="表单元素相关"><a href="#表单元素相关" class="headerlink" title="表单元素相关"></a>表单元素相关</h4><ul><li><code>:checked</code>：当元素具有checked属性时被选中</li><li><code>:disabled</code>：当元素具有disabled属性时被选中</li><li><code>:focus</code>：当元素获取到光标时被选中</li></ul><p><strong>伪类和CSS类</strong><br>伪类可以与CSS类配合使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.red:visited &#123;color:#FF0000;&#125;</span><br><span class="line">&lt;a class&#x3D;&quot;red&quot; href&#x3D;&quot;css-syntax.html&quot;&gt;CSS 语法&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><p>以上4种用法均可用在不同的链接类型上（文字，图片等链接），想要的效果需自行设置（放大缩小，颜色变换的等）<br><strong>注意</strong>： 在CSS定义中，a:hover 必须被置于 a:link 和 a:visited 之后，才是有效的。</p><p><strong>注意</strong>： 在 CSS 定义中，a:active 必须被置于 a:hover 之后，才是有效的。</p><p><strong>注意</strong>：伪类的名称不区分大小写。</p><h2 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h2><ul><li>背景</li><li>边框</li><li>文字</li><li>文本</li><li>链接</li><li>列表(有序ul，无序ol)  </li></ul><h3 id="基本样式"><a href="#基本样式" class="headerlink" title="基本样式"></a>基本样式</h3><p><strong>长度单位</strong><br>像素px、百分比%、相对字体长度单位em</p><p><strong>样式的类型</strong><br>内联样式、内部样式、外部样式</p><p><strong>颜色表示法</strong></p><ul><li>单词表示法：red、blue、green、violet</li><li>十六进制表示法：#000000、#FF0000</li><li>rgb表示法：rgb(255,0,0)</li><li>透明颜色：transparent<br>提取颜色工具FeHelper</li></ul><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><ul><li><p>背景颜色：background-color:red</p></li><li><p>背景图片：background-image:url(“/example.jpg”)</p></li><li><p>背景图片的平铺方式：background-repeat:word，其中word=repeat-x|repeat-y|repeat|no-repeat</p></li><li><p>背景图片的位置：background-position:x y ，其中x=数值|left|right|center，y=数值|top|bottom|center</p></li><li><p>背景图片随滚动条移动的方式：background-attachment:attachment，其中attachment=scroll|fixed</p></li></ul><p>CSS3背景扩展样式：</p><p>background-size：背景图的尺寸、cover覆盖、contain包含</p><p>background-origin：背景图的填充位置、padding-box（默认）、 border-box、content-box</p><p>background-clip：背景图的裁切方式，padding-box、border-box（默认）、content-box</p><h3 id="CSS边框样式"><a href="#CSS边框样式" class="headerlink" title="CSS边框样式"></a>CSS边框样式</h3><ul><li>边框风格（border-style）：solid、dashed、dotted</li><li>边框大小（border-width）</li><li>边框颜色（border-color）</li></ul><p>单独设某一条边：border-left-style: solid;</p><p>绘制三角形：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">width: 0;</span><br><span class="line">height: 0;</span><br><span class="line">border-right: solid red 100px;</span><br><span class="line">border-left: solid transparent 100px;</span><br><span class="line">border-top: solid transparent 100px;</span><br><span class="line">border-bottom: solid transparent 100px;</span><br></pre></td></tr></table></figure><h3 id="文字样式"><a href="#文字样式" class="headerlink" title="文字样式"></a>文字样式</h3><ul><li>font-family：字体类型，中文、西文，衬线体与非衬线体，注意适当添加引号</li><li>font-size：字体大小，数值|xx-small|x-small|small|medium|- large|x-large|xx-large</li><li>font-weight：字体粗细，数值|normal|bold</li><li>font-style：字体样式，normal|italic|oblique，注意区别italic与oblique</li><li>color：字体颜色</li></ul><h3 id="段落样式"><a href="#段落样式" class="headerlink" title="段落样式"></a>段落样式</h3><ul><li>text-decoration：文本装饰，underline|overline|line-through|none</li><li>text-transform：文本大小写，lowercase|uppercase|capitalize</li><li>text-indent：首行缩进，数值表示，单位可以选择px、em等</li><li>text-align：文本对齐方式，left|right|center|justify</li><li>line-height：定义行高，行高=上边距+字体大小+下边距，上边距=下边距，默认行高与字体大小有关，绝对值（带单位）|比例值（不带单位）</li><li>letter-spacing：字间距</li><li>word-spacing：单词间距，针对西文</li><li>折行：word-break: break-all;或者word-wrap: break-word;，注意二者区别</li></ul><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>具体看伪类部分</p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><p>所有HTML元素可以看作盒子，在CSS中，”box model”这一术语是用来设计和布局时使用。</p><p>CSS盒模型本质上是一个盒子，封装周围的HTML元素，它包括：边距，边框，填充，和实际内容。</p><p>盒模型允许我们在其它元素和周围元素边框之间的空间放置元素。<br><img src="https://www.runoob.com/images/box-model.gif"></p><ul><li><strong>Margin(外边距)</strong> - 清除边框外的区域，外边距是透明的。</li><li><strong>Border(边框)</strong> - 围绕在内边距和内容外的边框。</li><li><strong>Padding(内边距)</strong> - 清除内容周围的区域，内边距是透明的。</li><li><strong>Content(内容)</strong> - 盒子的内容，显示文本和图像。</li></ul><h3 id="内容Content-即元素"><a href="#内容Content-即元素" class="headerlink" title="内容Content(即元素)"></a>内容Content(即元素)</h3><p>里边是你想要展示的东西</p><h3 id="内边距Padding"><a href="#内边距Padding" class="headerlink" title="内边距Padding"></a>内边距Padding</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;盒子名称&quot;&#123;</span><br><span class="line">     padding:0px;  上下左右</span><br><span class="line">     padding:0px 0px;  对应上下，左右</span><br><span class="line"> padding:0px 0px 0px 0px; 分别对应上，右，下，左</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">div&#123;padding: 30px;&#x2F;*上下左右*&#x2F;&#125;</span><br><span class="line">div&#123;padding: 30px 40px;&#x2F;*上下、左右*&#x2F;&#125;</span><br><span class="line">div&#123;padding: 30px 40px 50px 60px;&#x2F;*上、右、下、左*&#x2F;&#125;</span><br></pre></td></tr></table></figure><p>也可以单独设置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   padding-left:0px;</span><br><span class="line">   padding-right:0px;</span><br><span class="line">   padding-top:0px;</span><br><span class="line">   padding-bottom:0px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="边框Border"><a href="#边框Border" class="headerlink" title="边框Border"></a>边框Border</h3><p>可以设置边框大小，边框线的类型，线的颜色</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    border:1px solid black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>这种是同时设置四条边的样式，也可单独设置每条边的，用法同边距一样<br>边框线，分别为点状，实线，双线，虚线</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     border-style:dotted solid double dashed; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>颜色,可用颜色代号或者英文<br><code>border-color:#666666</code></p><h3 id="外边距Margin"><a href="#外边距Margin" class="headerlink" title="外边距Margin"></a>外边距Margin</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;盒子名称&quot;&#123;</span><br><span class="line">      margin:     &lt;!--用法同上--&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h2><ul><li>块状元素display:block</li><li>内联元素display:inline</li><li>内联块状元素display:inline-block</li><li>隐藏元素display:none</li></ul><h3 id="块状元素"><a href="#块状元素" class="headerlink" title="块状元素"></a>块状元素</h3><p>block:div、p、ul、li、h1……<br>盒子与盒子不能同行显示，但可以设置宽高</p><ul><li>独占一行</li><li>支持所有样式</li><li>宽度默认与父容器相同</li><li>占据矩形区域</li></ul><h3 id="内联元素"><a href="#内联元素" class="headerlink" title="内联元素"></a>内联元素</h3><p>inline：span、a、em、strong、img ……<br>即盒子与盒子可以同行显示，但不能设置宽和高</p><ul><li>紧挨在一起</li><li>不支持某些样式，例如width、height、margin、padding，但img元素支持宽高，因为是替换元素</li><li>宽度由内容决定</li><li>占据区域不一定是矩形</li><li>内联标签之间会有空隙，这是由于换行导致的，一般使用span修饰文本而不是布局，如果非要解决可以将空白的font-size设为0</li></ul><h3 id="内联块状元素"><a href="#内联块状元素" class="headerlink" title="内联块状元素"></a>内联块状元素</h3><p>inline-block：input、select ……</p><ul><li>紧挨在一起，但是支持宽高</li><li>占据矩形区域</li><li>内联块之间会有空隙</li></ul><h3 id="隐藏元素"><a href="#隐藏元素" class="headerlink" title="隐藏元素"></a>隐藏元素</h3><p>这个可以让元素内容不显示<br><code>display:none;   &lt;!--隐藏元素--&gt;</code></p><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><ul><li>Position（定位）</li><li>Overflow</li><li>Float（浮动）</li></ul><h3 id="Position"><a href="#Position" class="headerlink" title="Position"></a>Position</h3><p>position属性指定了元素的定位类型<br>属性值为：</p><ul><li>static</li><li>relative</li><li>fixed</li><li>absolute</li><li>sticky</li></ul><h4 id="static-默认定位"><a href="#static-默认定位" class="headerlink" title="static 默认定位"></a>static 默认定位</h4><p>默认类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">div.static &#123;</span><br><span class="line">    position: static;</span><br><span class="line">    border: 3px solid #73AD21;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="relative-相对定位"><a href="#relative-相对定位" class="headerlink" title="relative 相对定位"></a>relative 相对定位</h4><p>相对定位，相对正常位置的显示方式，对其进行相对的位移</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">h2.pos_left</span><br><span class="line">&#123;</span><br><span class="line">    position:relative;</span><br><span class="line">    left:-20px;</span><br><span class="line">&#125;</span><br><span class="line">h2.pos_right</span><br><span class="line">&#123;</span><br><span class="line">    position:relative;</span><br><span class="line">    left:20px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相对定位元素经常被用来作为绝对定位元素的容器块</p><h4 id="fixed-固定定位"><a href="#fixed-固定定位" class="headerlink" title="fixed 固定定位"></a>fixed 固定定位</h4><p>元素的位置相对于浏览器窗口是固定位置。<br>即使窗口是滚动的它也不会移动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">p.pos_fixed</span><br><span class="line">&#123;</span><br><span class="line">    position:fixed;</span><br><span class="line">    top:30px;</span><br><span class="line">    right:5px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Fixed定位使元素的位置与文档流无关，因此不占据空间。<br>Fixed定位的元素和其他元素重叠。</p><h4 id="absolute-绝对定位"><a href="#absolute-绝对定位" class="headerlink" title="absolute 绝对定位"></a>absolute 绝对定位</h4><p>绝对定位的元素的位置相对于最近的已定位父元素，如果元素没有已定位的父元素，那么它的位置相对于<code>&lt;html&gt;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">h2</span><br><span class="line">&#123;</span><br><span class="line">    position:absolute;</span><br><span class="line">    left:100px;</span><br><span class="line">    top:150px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>absolute 定位使元素的位置与文档流无关，因此不占据空间。<br>absolute 定位的元素和其他元素重叠。</p><h4 id="sticky-黏性定位，进行黏性操作"><a href="#sticky-黏性定位，进行黏性操作" class="headerlink" title="sticky 黏性定位，进行黏性操作"></a>sticky 黏性定位，进行黏性操作</h4><p>比如在Excel中将首行冻结置顶，无论滚动条如何滚动，始终在第一行</p><ul><li>配合偏移量使用，否则不起作用<br><code>&lt;div style=&quot;padding-bottom:2000px&quot;&gt;</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">div.sticky &#123;</span><br><span class="line">    position: -webkit-sticky; &#x2F;* Safari *&#x2F;</span><br><span class="line">    position: sticky;</span><br><span class="line">    top: 0;</span><br><span class="line">    background-color: green;</span><br><span class="line">    border: 2px solid #4CAF50;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="重叠的元素"><a href="#重叠的元素" class="headerlink" title="重叠的元素"></a>重叠的元素</h4><p>元素的定位与文档流无关，所以它们可以覆盖页面上的其它元素</p><p>z-index属性指定了一个元素的堆叠顺序（哪个元素应该放在前面，或后面）</p><p>一个元素可以有正数或负数的堆叠顺序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">img</span><br><span class="line">&#123;</span><br><span class="line">    position:absolute;</span><br><span class="line">    left:0px;</span><br><span class="line">    top:0px;</span><br><span class="line">    z-index:-1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Float（浮动）"><a href="#Float（浮动）" class="headerlink" title="Float（浮动）"></a>Float（浮动）</h3><p><strong>什么是CSS Float（浮动）？</strong><br>CSS 的 Float（浮动），会使元素向左或向右移动，其周围的元素也会重新排列。<br>Float（浮动），往往是用于图像，但它在布局时一样非常有用</p><p><strong>元素怎样浮动</strong><br>元素的水平方向浮动，意味着元素只能左右移动而不能上下移动。</p><p>一个浮动元素会尽量向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止。</p><p>浮动元素之后的元素将围绕它。</p><p>浮动元素之前的元素将不会受到影响。</p><p>如果图像是右浮动，下面的文本流将环绕在它左边：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">img</span><br><span class="line">&#123;</span><br><span class="line">    float:right&#x2F;right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>清除浮动 - 使用 clear</strong><br>元素浮动之后，周围的元素会重新排列，为了避免这种情况，使用 clear 属性。</p><p>clear 属性指定元素两侧不能出现浮动元素。</p><p>使用 clear 属性往文本中添加图片廊：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.text_line</span><br><span class="line">&#123;</span><br><span class="line">    clear:none;</span><br><span class="line"></span><br><span class="line"> &lt;!--none是两边都不能，left和right是单边不能--&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML</title>
      <link href="posts/54626.html"/>
      <url>posts/54626.html</url>
      
        <content type="html"><![CDATA[<h2 id="HTML是什么？"><a href="#HTML是什么？" class="headerlink" title="HTML是什么？"></a>HTML是什么？</h2><ul><li>超文本标记语言（Hypertext Markup Language, HTML）是一种用于创建网页的标记语言。<br>超文本: 就是指页面内可以包含图片、链接，甚至音乐、程序等非文字元素。<br>标记语言: 标记（标签）构成的语言。</li></ul><h3 id="什么是标签"><a href="#什么是标签" class="headerlink" title="什么是标签:"></a>什么是标签:</h3><ul><li>是由一对尖括号包裹的单词构成 例如: <html> *所有标签中的单词不可能以数字开头.</li><li>标签不区分大小写.<html> 和 <HTML>. 推荐使用小写.</li><li>标签分为两部分: 开始标签<a> 和 结束标签</a>. 两个标签之间的部分 我们叫做标签体.</li><li>有些标签功能比较简单.使用一个标签即可.这种标签叫做自闭和标签.例如: <code>&lt;br/&gt;&lt;hr/&gt;&lt;input/&gt;&lt;img/&gt;</code></li><li>标签可以嵌套.但是不能交叉嵌套. <code>&lt;a&gt;&lt;b&gt;&lt;/a&gt;&lt;/b&gt;</code></li></ul><h3 id="标签的属性"><a href="#标签的属性" class="headerlink" title="标签的属性:"></a>标签的属性:</h3><ul><li>通常是以键值对形式出现的. 例如 name=”nick”</li><li>属性只能出现在开始标签 或 自闭和标签中.</li><li>属性名字全部小写. *属性值必须使用双引号或单引号包裹 例如 name=”nick”</li><li>如果属性值和属性名完全一样.直接写属性名即可. 例如 readonly</li></ul><h3 id="HTML5基本结构"><a href="#HTML5基本结构" class="headerlink" title="HTML5基本结构:"></a>HTML5基本结构:</h3><p>　　将HTML4中的DTD定义为如下结构即可，其他不变。</p><ol><li><code>&lt;!DOCTYPE HTML&gt;</code></li></ol><h3 id="HTML5支持的两种指定页面使用的字符集的方式"><a href="#HTML5支持的两种指定页面使用的字符集的方式" class="headerlink" title="HTML5支持的两种指定页面使用的字符集的方式:"></a>HTML5支持的两种指定页面使用的字符集的方式:</h3><ul><li><p>使用Content-Type指定字符集</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html ;charset&#x3D;UTF-8&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure></li><li><p>直接使用charset指定字符集<br><code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code></p></li></ul><br><hr><h2 id="HMTL-基础"><a href="#HMTL-基础" class="headerlink" title="HMTL 基础"></a>HMTL 基础</h2><ol><li><p>HTML 标题</p><ul><li>HTML标题(Heading)通过<code>&lt;h1&gt;-&lt;h6&gt;</code>标签来定义的<figure class="highlight plain"><figcaption><span>.... </h1></span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    &lt;h2&gt; .... &lt;&#x2F;h2&gt; &#96;&#96;&#96;</span><br><span class="line">2. HTML 段落</span><br><span class="line"></span><br><span class="line">- HTML段落是通过标签&#96;&#96;&#96; &lt;p&gt; &#96;&#96;&#96;来定义的</span><br><span class="line">&#96;&#96;&#96;&lt;p&gt;...&lt;&#x2F;p&gt;&#96;&#96;&#96;</span><br><span class="line">3. HTML 链接</span><br><span class="line"></span><br><span class="line">- HTML 链接是通过标签&#96;&#96;&#96; &lt;a&gt; &#96;&#96;&#96;来定义的</span><br><span class="line">&#96;&#96;&#96; &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;www.baidu.com&quot;&gt;...&lt;&#x2F;a&gt;&#96;&#96;&#96;</span><br><span class="line">4. HTML 图像</span><br><span class="line"></span><br><span class="line">- HTML 图像是通过标签&#96;&#96;&#96; &lt;img&gt; &#96;&#96;&#96;来定义的</span><br></pre></td></tr></table></figure><img loading="lazy" src="/images/logo.png" width="x" height="y" /> ```</li></ul></li><li><p>tips:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1.xxx.html文件和xxx.jpg文件的相对路径</span><br><span class="line">1.1若两者在同一目录下：</span><br><span class="line">&lt;img src&#x3D;&quot;xxx.jpg&quot; width&#x3D;&quot;xxx&quot; height &#x3D; &quot;xxx&quot; &#x2F;&gt;</span><br><span class="line">1.2若二者在不同目录下：</span><br><span class="line">a.图片 *.jpg 在 image 文件夹中，*.html 跟 image 在同一目录下：</span><br><span class="line">&lt;img src&#x3D;&quot;image&#x2F;xxx.jpg&#x2F;&quot;width&#x3D;&quot;xxx&quot; height&#x3D;&quot;xxx&quot;&#x2F;&gt;</span><br><span class="line">b.图片 *.jpg 在 image 文件夹中，xxx.html 在 Web 文件夹中，image 跟 Web 在同一目录下：</span><br><span class="line">&lt;img src&#x3D;&quot;..&#x2F;image&#x2F;xxx.jpg&#x2F;&quot;width&#x3D;&quot;xxx&quot; height&#x3D;&quot;xxx&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line"> 2.若图片源于网络，使用绝对路径：</span><br><span class="line">&gt;&gt;&lt;img src&#x3D;&quot;http:&#x2F;&#x2F;xxx.xxx.com&#x2F;xxx...&#x2F;xxx.png&quot;</span><br></pre></td></tr></table></figure><br><hr></li></ol><h2 id="HTML文档结构"><a href="#HTML文档结构" class="headerlink" title="HTML文档结构"></a>HTML文档结构</h2><p>最基本的HTML文档</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;zh-CN&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt; html文档 &lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><ol><li><p><code>&lt;!DOCTYPE html&gt;</code>声明为HTML5文档。</p></li><li><p><code>&lt;html&gt;</code>、<code>&lt;/html&gt;</code>是文档的开始标记和结束的标记。是HTML页面的根元素，在它们之间是文档的头部（head）和主体（body）。</p></li><li><p><code>&lt;head&gt;</code>、<code>&lt;/head&gt;</code>定义了HTML文档的开头部分。它们之间的内容不会在浏览器的文档窗口显示。包含了文档的元（meta）数据。</p></li><li><p><code>&lt;title&gt;</code>、<code>&lt;/title&gt;</code>定义了网页标题，在浏览器标题栏显示。</p></li><li><p><code>&lt;body&gt;</code>、<code>&lt;/body&gt;</code>之间的文本是可见的网页主体内容。</p></li></ol><br><hr><h2 id="HTML-标签格式"><a href="#HTML-标签格式" class="headerlink" title="HTML 标签格式"></a>HTML 标签格式</h2><ul><li>标签的基本信息：<ul><li><p>HTML标签是由尖括号包围的关键字，如<code>&lt;html&gt;</code>, <code>&lt;div&gt;</code>等</p></li><li><p>HTML标签通常是成对出现的，比如：<code>&lt;div&gt;</code>和<code>&lt;/div&gt;</code>，第一个标签是开始，第二个标签是结束。结束标签会有斜线。</p></li><li><p>也有一部分标签是单独呈现的，比如：<code>&lt;br/&gt;、&lt;hr/&gt;、&lt;img src=&quot;1.jpg&quot; /&gt;</code>等。</p></li><li><p>标签里面可以有若干属性，也可以不带属性</p></li></ul></li><li>标签的语法<ul><li><p>&lt;标签名 属性1=“属性值1” 属性2=“属性值2”……&gt;内容部分&lt;/标签名&gt;</p></li><li><p>&lt;标签名 属性1=“属性值1” 属性2=“属性值2”…… /&gt;</p></li></ul></li><li>重要的属性：<ul><li><p>id：定义标签的唯一ID，HTML文档树中唯一</p></li><li><p>class：为html元素定义一个或多个类名（classname）(CSS样式类名)</p></li><li><p>style：规定元素的行内样式（CSS样式）</p></li></ul></li></ul><br><hr><h2 id="HTML-注释"><a href="#HTML-注释" class="headerlink" title="HTML 注释"></a>HTML 注释</h2><p><code>&lt;!--注释内容，这里边的信息不会显示出来--&gt;</code></p><br><hr><h2 id="lt-DOCTYPE-gt-标签"><a href="#lt-DOCTYPE-gt-标签" class="headerlink" title="&lt;!DOCTYPE&gt; 标签"></a>&lt;!DOCTYPE&gt; 标签</h2><!DOCTYPE><p> 声明必须是 HTML 文档的第一行，位于 <html> 标签之前。</p><!DOCTYPE><p> 声明不是 HTML 标签；它是指示 web 浏览器关于页面使用哪个 HTML 版本进行编写的指令。</p><br><hr><h2 id="HTML-常用标签"><a href="#HTML-常用标签" class="headerlink" title="HTML 常用标签"></a>HTML 常用标签</h2><h3 id="在head内常用的标签"><a href="#在head内常用的标签" class="headerlink" title="在head内常用的标签"></a>在head内常用的标签</h3><table><thead><tr><th align="center">标签</th><th align="center">意义</th></tr></thead><tbody><tr><td align="center"><code>&lt;title&gt;&lt;/title&gt;</code></td><td align="center">定义网页标题</td></tr><tr><td align="center"><code>&lt;style&gt;&lt;/style&gt;</code></td><td align="center">定义内部样式表</td></tr><tr><td align="center"><code>&lt;script&gt;&lt;/script&gt;</code></td><td align="center">定义JS代码或引入外部JS文件</td></tr><tr><td align="center"><code>&lt;link/&gt;</code></td><td align="center">引入外部样式表文件,重要属性有三个：rel、href、type。</td></tr><tr><td align="center"><code>&lt;meta/&gt;</code></td><td align="center">定义网页原信息</td></tr><tr><td align="center"><code>&lt;base/&gt;</code></td><td align="center">标签为页面上的所有链接规定默认地址或默认目标</td></tr></tbody></table><!--`|--|`第二行是为了定义表格的对齐方式，":-"左对齐，":-:"居中对齐，"-:"右对齐--><h4 id="Meta标签"><a href="#Meta标签" class="headerlink" title="Meta标签"></a>Meta标签</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Meta标签介绍：</span><br><span class="line">1.&lt;meta&gt;元素可提供有关页面的元信息（mata-information）,针对搜索引擎和更新频度的描述和关键词。</span><br><span class="line">2. &lt;meta&gt;标签位于文档的头部，不包含任何内容。</span><br><span class="line">3. &lt;meta&gt;提供的信息是用户不可见的。</span><br></pre></td></tr></table></figure><p>定义关于HTML文档的元数据。 重要的属性有三个：http-equiv、name、content</p><p>http-equiv  把content属性值关联到http头部。</p><ul><li>Content-Type（浏览器接受的文档类型，一般是text/html）</li><li>refresh（网页刷新，以秒为单位）</li><li>expires（设定网页到期时间，一旦过期，必须到服务器上重传）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. &#96;&lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html ;charset&#x3D;UTF-8&quot;&#x2F;&gt;&#96;</span><br><span class="line">2. &#96;&lt;meta http-equiv&#x3D;&quot;Refresh&quot; content&#x3D;&quot;2&quot;&gt;&#96;</span><br><span class="line">3. &#96;&lt;meta http-equiv&#x3D;&quot;Refresh&quot; content&#x3D;&quot;2;URL&#x3D;https:&#x2F;&#x2F;www.baidu.com&quot;&gt;&#96;</span><br><span class="line">4. &#96;&lt;meta http-equiv&#x3D;&quot;expires&quot; content&#x3D;&quot;6 Jun 2016&quot;&#x2F;&gt;&#96;</span><br></pre></td></tr></table></figure><p>name属性: 主要用于描述网页，把content属性关联到一个名称，content中的内容主要是便于搜索引擎机器人查找信息和分类信息用的。</p><ul><li>keywords（搜索关键字，用于搜索引擎抓取信息的显示）</li><li>description（搜索到网站后显示的网页内容简描述）</li><li>author（站点制作者信息）</li><li>generator（用以说明生成工具）</li><li>name也可以根据特定的功能自定义，在新浪网中有使用360认证和搜狐认证<code>（&lt;meta name=&quot;360-site-verification&quot;content=&quot;63349**********&quot;/&gt;、&lt;meta name=&quot;sogou_site_verification&quot;content=&quot;BVI*******&quot;/&gt;）。</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name&#x3D;&quot;keywords&quot; content&#x3D;&quot;搜索关键字&quot;&gt;</span><br><span class="line">&lt;meta name&#x3D;&quot;description&quot; content&#x3D;&quot;简要描述&quot;&gt;</span><br><span class="line">&lt;meta name&#x3D;&quot;author&quot; content&#x3D;&quot;http:&#x2F;&#x2F;cnblogs.com&#x2F;suoning&quot;&gt;</span><br><span class="line">&lt;meta name&#x3D;&quot;generator&quot; content&#x3D;&quot;用以说明生成工具&quot;&gt;</span><br></pre></td></tr></table></figure>content  定义与http-equiv或name属性相关的元信息，是必要的属性。</li></ul><h3 id="body内常用"><a href="#body内常用" class="headerlink" title="body内常用"></a>body内常用</h3><ul><li>基本标签(块级标签和内联标签)</li><li>块级标签：<code>&lt;p&gt;&lt;h1&gt;&lt;table&gt;&lt;ol&gt;&lt;ul&gt;&lt;form&gt;&lt;div&gt;</code></li><li>内联标签：<code>&lt;a&gt;&lt;input&gt;&lt;img&gt;&lt;sub&gt;&lt;sup&gt;&lt;textarea&gt;&lt;span&gt;</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;b&gt;加粗&lt;&#x2F;b&gt;</span><br><span class="line">&lt;i&gt;斜体&lt;&#x2F;i&gt;</span><br><span class="line">&lt;em&gt;斜体&lt;em&gt;</span><br><span class="line">&lt;u&gt;下划线&lt;&#x2F;u&gt;</span><br><span class="line">&lt;s&gt;删除&lt;&#x2F;s&gt;</span><br><span class="line">&lt;strike&gt;: 为文字加上一条中线</span><br><span class="line">&lt;sup&gt;和&lt;sub&gt;: 上角标 和 下角标</span><br><span class="line"></span><br><span class="line">&lt;p&gt;段落标签&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;标题1&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;h2&gt;标题2&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;h3&gt;标题3&lt;&#x2F;h3&gt;</span><br><span class="line">&lt;h4&gt;标题4&lt;&#x2F;h4&gt;</span><br><span class="line">&lt;h5&gt;标题5&lt;&#x2F;h5&gt;</span><br><span class="line">&lt;h6&gt;标题6&lt;&#x2F;h6&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--注释--&gt;</span><br><span class="line">&lt;br&gt;： 换行</span><br><span class="line">&lt;hr&gt;： 水平线</span><br><span class="line">&lt;div&gt;</span><br><span class="line"></span><br><span class="line">        块级标签。块级标签常用于布局，行级标签常用语显示内容。</span><br><span class="line"></span><br><span class="line">　　    div的显示通常使用id或class来标识。id为唯一的标签标识，class为标签的类标识。</span><br><span class="line"></span><br><span class="line">　　    div的大小是由内容来决定的，默认情况下，高度由内容的高度决定，宽度适应屏幕。</span><br><span class="line"></span><br><span class="line">　　    可以容纳其他元素，是一个容器。</span><br><span class="line"></span><br><span class="line">&lt;span&gt;</span><br></pre></td></tr></table></figure><ul><li>特殊字符</li></ul><table><thead><tr><th align="center">内容</th><th align="center">对应代码</th></tr></thead><tbody><tr><td align="center">空格</td><td align="center"></td></tr><tr><td align="center">&gt;</td><td align="center"><code>&amp;gt;</code></td></tr><tr><td align="center">&lt;</td><td align="center"><code>&amp;lt;</code></td></tr><tr><td align="center">&amp;</td><td align="center"><code>&amp;amp;</code></td></tr><tr><td align="center">¥</td><td align="center"><code>&amp;yen;</code></td></tr><tr><td align="center">版权©</td><td align="center"><code>&amp;copy;</code></td></tr><tr><td align="center">注册®</td><td align="center"><code>&amp;reg;</code></td></tr></tbody></table><h4 id="div标签和span标签"><a href="#div标签和span标签" class="headerlink" title="div标签和span标签"></a>div标签和span标签</h4><p>div标签用来定义一个块级元素，并无实际的意义。主要通过CSS样式为其赋予不同的表现。<br>span标签用来定义内联(行内)元素，并无实际的意义。主要通过CSS样式为其赋予不同的表现。</p><p>块级元素与行内元素的区别：<br>所谓块元素，是以另起一行开始渲染的元素，行内元素则不需另起一行。如果单独在网页中插入这两个元素，不会对页面产生任何的影响。<br>这两个元素是专门为定义CSS样式而生的。</p><p>注意：</p><p>关于标签嵌套：通常块级元素可以包含内联元素或某些块级元素，但内联元素不能包含块级元素，它只能包含其它内联元素。</p><p>p标签不能包含块级标签，p标签也不能包含p标签。</p><h4 id="img-标签"><a href="#img-标签" class="headerlink" title="img 标签"></a>img 标签</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;图片的路径&quot; alt&#x3D;&quot;图片未加载成功时的提示&quot; title&#x3D;&quot;鼠标悬浮时提示信息&quot; width&#x3D;&quot;宽&quot; height&#x3D;&quot;高(宽高两个属性只用一个会自动等比缩放)&quot;&gt;</span><br></pre></td></tr></table></figure><h4 id="a标签"><a href="#a标签" class="headerlink" title="a标签"></a>a标签</h4><p>超链接标签</p><p>所谓的超链接是指从一个网页指向一个目标的连接关系，这个目标可以是另一个网页，也可以是相同网页上的不同位置，还可以是一个图片，一个电子邮件地址，一个文件，甚至是一个应用程序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.oldboyedu.com&quot; target&#x3D;&quot;_blank&quot; &gt;点我&lt;&#x2F;a&gt;</span><br><span class="line">href属性指定目标网页地址。该地址可以有几种类型：</span><br><span class="line"></span><br><span class="line">绝对URL - 指向另一个站点（比如 href&#x3D;&quot;http:&#x2F;&#x2F;www.jd.com）</span><br><span class="line">相对URL - 指当前站点中确切的路径（href&#x3D;&quot;index.htm&quot;）</span><br><span class="line">锚URL - 指向页面中的锚（href&#x3D;&quot;#top&quot;）</span><br><span class="line"> </span><br><span class="line">target：</span><br><span class="line"></span><br><span class="line">_blank表示在新标签页中打开目标网页</span><br><span class="line">_self表示在当前标签页中打开目标网页</span><br><span class="line"></span><br><span class="line">URL</span><br><span class="line">什么是URL？</span><br><span class="line">URL是统一资源定位器(Uniform Resource Locator)的缩写，也被称为网页地址，是因特网上标准的资源的地址。</span><br><span class="line">URL举例</span><br><span class="line">http:&#x2F;&#x2F;www.sohu.com&#x2F;stu&#x2F;intro.html</span><br><span class="line">http:&#x2F;&#x2F;222.172.123.33&#x2F;stu&#x2F;intro.html</span><br><span class="line"></span><br><span class="line">URL地址由4部分组成</span><br><span class="line">第1部分：为协议：http:&#x2F;&#x2F;、ftp:&#x2F;&#x2F;等 </span><br><span class="line">第2部分：为站点地址：可以是域名或IP地址</span><br><span class="line">第3部分：为页面在站点中的目录：stu</span><br><span class="line">第4部分：为页面名称，例如 index.html</span><br><span class="line">各部分之间用“&#x2F;”符号隔开。</span><br></pre></td></tr></table></figure><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><h5 id="1-无序列表"><a href="#1-无序列表" class="headerlink" title="1. 无序列表"></a>1. 无序列表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul type&#x3D;&quot;disc&quot;&gt;</span><br><span class="line">  &lt;li&gt;第一项&lt;&#x2F;li&gt;</span><br><span class="line">  &lt;li&gt;第二项&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure><p>type属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">disc（实心圆点，默认值）</span><br><span class="line">circle（空心圆圈）</span><br><span class="line">square（实心方块）</span><br><span class="line">none（无样式）</span><br></pre></td></tr></table></figure><h5 id="2-有序列表"><a href="#2-有序列表" class="headerlink" title="2. 有序列表"></a>2. 有序列表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;ol type&#x3D;&quot;1&quot; start&#x3D;&quot;2&quot;&gt;</span><br><span class="line">  &lt;li&gt;第一项&lt;&#x2F;li&gt;</span><br><span class="line">  &lt;li&gt;第二项&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ol&gt;</span><br></pre></td></tr></table></figure><p>type属性：<br>1 数字列表，默认值<br>A 大写字母<br>a 小写字母<br>I 大写罗马<br>i 小写罗马</p><blockquote><blockquote><ol start="3"><li>标题列表</li></ol></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dl&gt;</span><br><span class="line">  &lt;dt&gt;标题1&lt;&#x2F;dt&gt;</span><br><span class="line">  &lt;dd&gt;内容1&lt;&#x2F;dd&gt;</span><br><span class="line">  &lt;dt&gt;标题2&lt;&#x2F;dt&gt;</span><br><span class="line">  &lt;dd&gt;内容1&lt;&#x2F;dd&gt;</span><br><span class="line">  &lt;dd&gt;内容2&lt;&#x2F;dd&gt;</span><br><span class="line">&lt;&#x2F;dl&gt;</span><br></pre></td></tr></table></figure><h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><p>表格是一个二维数据空间，一个表格由若干行组成，一个行又有若干单元格组成，单元格里可以包含文字、列表、图案、表单、数字符号、预置文本和其它的表格等内容。<br>表格最重要的目的是显示表格类数据。表格类数据是指最适合组织为表格格式（即按行和列组织）的数据。<br>表格的基本结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;table border&#x3D;&quot;1&quot;&gt;</span><br><span class="line">  &lt;thead&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;th&gt;序号&lt;&#x2F;th&gt;</span><br><span class="line">    &lt;th&gt;姓名&lt;&#x2F;th&gt;</span><br><span class="line">    &lt;th&gt;爱好&lt;&#x2F;th&gt;</span><br><span class="line">  &lt;&#x2F;tr&gt;</span><br><span class="line">  &lt;&#x2F;thead&gt;</span><br><span class="line">  &lt;tbody&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;1&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;td&gt;Egon&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;td&gt;杠娘&lt;&#x2F;td&gt;</span><br><span class="line">  &lt;&#x2F;tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;2&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;td&gt;Yuan&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;td&gt;日天&lt;&#x2F;td&gt;</span><br><span class="line">  &lt;&#x2F;tr&gt;</span><br><span class="line">  &lt;&#x2F;tbody&gt;</span><br><span class="line">&lt;&#x2F;table&gt;</span><br></pre></td></tr></table></figure><p><code>&lt;table&gt;</code>表格标签属性:</p><ul><li>border: 表格边框</li><li>align：水平对齐方式</li><li>bgcolor：背景颜色</li><li>cellpadding: 内边距</li><li>cellspacing: 外边距.</li><li>width: 像素 百分比.（最好通过css来设置长宽）<caption>  表格的标题</li></ul><p><code>&lt;tr&gt;</code>  表格的数据行，table row<br><code>&lt;th&gt;</code>  表格的表头名称，与<code>&lt;td&gt;</code>不同在于文字采用加粗居中的形式显示，table head cell<br><code>&lt;td&gt;</code>  单元格，用来显示表格内容，table data cell</p><p><code>&lt;thead&gt;</code>：表格头部，使结构更加分明<br><code>&lt;tbody&gt;</code>：表格主体部分，使结构更加分明<br>rowspan: 单元格竖跨多少行,作用在th或者td上<br>colspan: 单元格横跨多少列（即合并单元格，作用在th或者td上</p><h4 id="lt-form-gt-表单标签"><a href="#lt-form-gt-表单标签" class="headerlink" title="&lt;form&gt;表单标签"></a><code>&lt;form&gt;</code>表单标签</h4><p>功能：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">表单用于向服务器传输数据，从而实现用户与Web服务器的交互</span><br><span class="line">表单能够包含input系列标签，比如文本字段、复选框、单选框、提交按钮等等。</span><br><span class="line">表单还可以包含textarea、select、fieldset和 label标签。</span><br></pre></td></tr></table></figure><p>表单属性:</p><table><thead><tr><th align="center">属性</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">accept-charset</td><td align="center">规定在被提交表单中使用的字符集（默认：页面字符集）。</td></tr><tr><td align="center">action</td><td align="center">规定向何处提交表单的地址（URL）（提交页面）。</td></tr><tr><td align="center">autocomplete</td><td align="center">规定浏览器应该自动完成表单（默认：开启）。</td></tr><tr><td align="center">enctype</td><td align="center">规定被提交数据的编码（默认：url-encoded）。</td></tr><tr><td align="center">method</td><td align="center">规定在提交表单时所用的 HTTP 方法（默认：GET）。</td></tr><tr><td align="center">name</td><td align="center">规定识别表单的名称（对于 DOM 使用：document.forms.name）。</td></tr><tr><td align="center">novalidate</td><td align="center">规定浏览器不验证表单。</td></tr><tr><td align="center">target</td><td align="center">规定 action 属性中地址的目标（默认：_self）。</td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center">表单元素</td><td align="center"></td></tr></tbody></table><p>基本概念：<br>HTML表单是HTML元素中较为复杂的部分，表单往往和脚本、动态页面、数据处理等功能相结合，因此它是制作动态网站很重要的内容。<br>表单一般用来收集用户的输入信息<br>表单工作原理：<br>访问者在浏览有表单的网页时，可填写必需的信息，然后按某个按钮提交。这些信息通过Internet传送到服务器上。<br>服务器上专门的程序对这些数据进行处理，如果有错误会返回错误信息，并要求纠正错误。当数据完整无误后，服务器反馈一个输入完成的信息。</p><p>Django接收上传文件代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">from django.conf.urls import url</span><br><span class="line">from django.shortcuts import HttpResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def upload(request):</span><br><span class="line">    print(&quot;request.GET:&quot;, request.GET)</span><br><span class="line">    print(&quot;request.POST:&quot;, request.POST)</span><br><span class="line"></span><br><span class="line">    if request.FILES:</span><br><span class="line">        filename &#x3D; request.FILES[&quot;file&quot;].name</span><br><span class="line">        with open(filename, &#39;wb&#39;) as f:</span><br><span class="line">            for chunk in request.FILES[&#39;file&#39;].chunks():</span><br><span class="line">                f.write(chunk)</span><br><span class="line">            return HttpResponse(&#39;上传成功&#39;)</span><br><span class="line">    return HttpResponse(&quot;收到了！&quot;)</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^upload&#x2F;&#39;, upload),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="input"><a href="#input" class="headerlink" title="input"></a>input</h4><p><code>&lt;input&gt; </code>元素会根据不同的 type 属性，变化为多种形态。</p><table><thead><tr><th align="center">type属性值</th><th align="center">表现形式</th><th align="center">对应代码</th></tr></thead><tbody><tr><td align="center">text</td><td align="center">单行输入文本</td><td align="center"><code>&lt;input type=&quot;text&quot;/&gt;</code></td></tr><tr><td align="center">password</td><td align="center">密码输入框</td><td align="center"><code>&lt;input type=&quot;password&quot;/&gt;</code></td></tr><tr><td align="center">date</td><td align="center">日期输入框</td><td align="center"><code>&lt;input type=&quot;date&quot;/&gt;</code></td></tr><tr><td align="center">checkbox</td><td align="center">复选框</td><td align="center"><code>&lt;input type=&quot;checkbox&quot; checked=&quot;checked&quot;/&gt;</code></td></tr><tr><td align="center">radio</td><td align="center">单选框</td><td align="center"><code>&lt;input type=&quot;radio&quot;/</code>&gt;</td></tr><tr><td align="center">submit</td><td align="center">提交按钮</td><td align="center"><code>&lt;input type=&quot;submit&quot;/&gt;</code></td></tr><tr><td align="center">reset</td><td align="center">重置按钮</td><td align="center"><code>&lt;input type=&quot;reset&quot;/&gt;</code></td></tr><tr><td align="center">button</td><td align="center">普通按钮</td><td align="center"><code>&lt;input type=&quot;bottom&quot;/&gt;</code></td></tr><tr><td align="center">hidden</td><td align="center">隐藏输入框</td><td align="center"><code>&lt;input type=&quot;hidden&quot;/&gt;</code></td></tr><tr><td align="center">file</td><td align="center">文本选择框</td><td align="center"><code>&lt;input type=&quot;file&quot;/&gt;</code></td></tr></tbody></table><p>属性说明:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">&lt;input&gt; type 属性：</span><br><span class="line"></span><br><span class="line">  text  文本框输入（默认text文本框类型）。</span><br><span class="line"></span><br><span class="line">            autocomplete（自动完成输入的内容，要求表单元素要有name属性才有自动完成的效果，off表示自动完成不可用，on表示自动完成可用）</span><br><span class="line"></span><br><span class="line">            disabled（设置或者获取控件的状态，默认是false即可用，等于true时不可用，不能输入内容）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">　　　 password  密码框。（以下属性text和password共有）</span><br><span class="line"></span><br><span class="line">            size（指定表单元素的初始宽度。当type为text或password时，表单元素的大小以字符为单位，对于其他元素，宽度以像素为单位）</span><br><span class="line"></span><br><span class="line">            maxlength（type为text或password时，表示输入的最大字符数），有利于防止sql的注入攻击</span><br><span class="line"></span><br><span class="line">            readonly：text和password只读.　</span><br><span class="line"></span><br><span class="line">　　　　　　placeholder 框内预置内容(灰色)，写上内容时才消失</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       radio  单选按钮。属性：</span><br><span class="line"></span><br><span class="line">             name（将name的值设置为相同值，才表示一组数据，才能实现单选功能）</span><br><span class="line"></span><br><span class="line">             value（必须要写，提交到服务器的key值，实际开发过程中value一般是编号）</span><br><span class="line"></span><br><span class="line">             checked（是否被选中的状态）</span><br><span class="line"></span><br><span class="line">       checkbox  复选框。</span><br><span class="line"></span><br><span class="line">             name（名字一定要一样一样的，才表示是一组数据，添加到同一value值列表提交到服务器）</span><br><span class="line"></span><br><span class="line">             value（必须要写，提交到服务器的key值，实际开发过程中value一般是编号）</span><br><span class="line"></span><br><span class="line">             checked（是否被选中的状态）</span><br><span class="line"></span><br><span class="line">       file  文件域，上传文件（不同的浏览器表现形式不同）</span><br><span class="line"></span><br><span class="line">　　　　submit  提交按钮。用于提交表单。</span><br><span class="line"></span><br><span class="line">　　　　reset  重置按钮。清空表单的输入，恢复到表单默认的状态。</span><br><span class="line"></span><br><span class="line">       button  普通按钮。一般结合javascript使用。</span><br><span class="line"></span><br><span class="line">　　　　image  图片按钮，用来提交表单，与submit是一样的效果。</span><br><span class="line"></span><br><span class="line">             src（图片路径）</span><br><span class="line"></span><br><span class="line">　　　　hidden  隐藏字段。</span><br><span class="line"></span><br><span class="line">             value（隐藏的内容）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">　　　　color  颜色标签。value指定颜色值（采用#十六进制数表示）。</span><br><span class="line"></span><br><span class="line">　　　　date  日期。value值指定默认的日期，格式为****-**-**（年月日）。</span><br><span class="line"></span><br><span class="line">　　　　datetime-local  显示本地时间，value值指定默认的时间，格式为2016-05-20T11:10:10（年月日T时分秒）。 </span><br><span class="line"></span><br><span class="line">　　　　number  数字向上或者向下滑动。可以填数字然后向上或者向下选择不同的值。</span><br><span class="line"></span><br><span class="line">　　　　range  滑动标签。min（指定最小值）、max（指定最大值）、value（指定当前默认值）。</span><br><span class="line"></span><br><span class="line">　　　　week  每年的周数。value指定哪一年第几周，格式为2016-W25（2016年第25周）。</span><br><span class="line"></span><br><span class="line">   value: 表单提交项的值</span><br><span class="line"></span><br><span class="line">   对于不同的输入类型，value 属性的用法也不同：</span><br><span class="line">   type&#x3D;&quot;button&quot;, &quot;reset&quot;, &quot;submit&quot; - 定义按钮上的显示的文本</span><br><span class="line">   type&#x3D;&quot;text&quot;, &quot;password&quot;, &quot;hidden&quot; - 定义输入字段的初始值</span><br><span class="line">   type&#x3D;&quot;checkbox&quot;, &quot;radio&quot;, &quot;image&quot; - 定义与输入相关联的值</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">百度搜索实例</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">        &lt;form action&#x3D;&quot;https:&#x2F;&#x2F;www.baidu.com&#x2F;s&quot;&gt;</span><br><span class="line">            &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;wd&quot;&gt;</span><br><span class="line">            &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;百度一下&quot;&gt;</span><br><span class="line">        &lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h4 id="select标签"><a href="#select标签" class="headerlink" title="select标签"></a>select标签</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action&#x3D;&quot;&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">  &lt;select name&#x3D;&quot;city&quot; id&#x3D;&quot;city&quot;&gt;</span><br><span class="line">    &lt;option value&#x3D;&quot;1&quot;&gt;北京&lt;&#x2F;option&gt;</span><br><span class="line">    &lt;option selected&#x3D;&quot;selected&quot; value&#x3D;&quot;2&quot;&gt;上海&lt;&#x2F;option&gt;</span><br><span class="line">    &lt;option value&#x3D;&quot;3&quot;&gt;广州&lt;&#x2F;option&gt;</span><br><span class="line">    &lt;option value&#x3D;&quot;4&quot;&gt;深圳&lt;&#x2F;option&gt;</span><br><span class="line">  &lt;&#x2F;select&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure><p>属性说明：</p><ul><li>multiple：布尔属性，设置后为多选，否则默认单选</li><li>disabled：禁用</li><li>selected：默认选中该项</li><li>value：定义提交时的选项值</li></ul><h4 id="label标签"><a href="#label标签" class="headerlink" title="label标签"></a>label标签</h4><p>定义：<label> 标签为 input 元素定义标注（标记）。<br>说明：</p><ol><li>label 元素不会向用户呈现任何特殊效果。</li><li><label> 标签的 for 属性值应当与相关元素的 id 属性值相同。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action&#x3D;&quot;&quot;&gt;</span><br><span class="line">  &lt;label for&#x3D;&quot;username&quot;&gt;用户名&lt;&#x2F;label&gt;</span><br><span class="line">  &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;username&quot; name&#x3D;&quot;username&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure></li></ol><h4 id="textarea-多行文本"><a href="#textarea-多行文本" class="headerlink" title="textarea 多行文本"></a>textarea 多行文本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;textarea name&#x3D;&quot;memo&quot; id&#x3D;&quot;memo&quot; cols&#x3D;&quot;32&quot; rows&#x3D;&quot;12&quot;&gt;</span><br><span class="line">  默认内容</span><br><span class="line">&lt;&#x2F;textarea&gt;</span><br></pre></td></tr></table></figure><p>属性说明：</p><ul><li>name：名称</li><li>rows：行数</li><li>cols：列数</li><li>disabled：禁用</li></ul><br><hr>## 框架<h3 id="lt-frameset-gt-框架"><a href="#lt-frameset-gt-框架" class="headerlink" title="&lt;frameset&gt; 框架"></a><code>&lt;frameset&gt; </code>框架</h3><p>用来划分窗体，不能放在<body>中，否则没有效果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cols （纵向分割页面。其数值表示方法有三种：“30%、30（或者30px）、*”；数值的个数代表分成的视窗数目且数值之间用“,”隔开。“30%”表示该框架区域占全部浏览器页面区域的30%；“30”表示该区域横向宽度为30像素；“*”表示该区域占用余下页面空间。例如：cols&#x3D;&quot;25%,200,*&quot; 表示将页面分为三部分，左面部分占页面30%，中间横向宽度为200像素，页面余下的作为右面部分。）</span><br><span class="line"></span><br><span class="line">   rows（横向分割页面。属性和cols一样）</span><br><span class="line"></span><br><span class="line">   frameborder（设置是否显示框架边框。设定值只有0、1；0 表示不要边框，1 表示要显示边框）</span><br><span class="line"></span><br><span class="line">   border（框架之间的距离，一般设置为0）</span><br><span class="line"></span><br><span class="line">   bordercolor（边框的颜色）</span><br><span class="line"></span><br><span class="line">   framespacing（设置框架与框架间的保留的空白距离）</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1. &lt;frameset cols&#x3D;&quot;40%,*,*&quot;&gt; 第一个框架占整个浏览器窗口的40%,剩下的空间平均分配给另外两个框架。</span><br><span class="line">2. &lt;frameset cols&#x3D;&quot;*,*,*,*&quot;&gt; 浏览器窗口等分为四部分。&#96;&#96;&#96;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### &#96;&lt;iframe&gt;&#96; 框架</span><br><span class="line"></span><br><span class="line">元素会创建包含另外一个文档的内联框架（即行内框架）</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>name （设置框架名称。此为必须设置的属性）src （设置此框架要显示的网页名称或路径。此为必须设置的属性）scrolling （设置是否要显示滚动条。设定值为auto, yes, no）bordercolor （设置框架的边框颜色）frameborder （设置是否显示框架边框。设定值只有0、1；0 表示不要边框，1 表示要显示边框）noresize （设置框架大小是否能手动调节）marginwidth （设置框架边界和其中内容之间的宽度）marginhight （设置框架边界和其中内容之间的高度）width（设置框架宽度）height （设置框架高度）</code></pre><p>```</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客文章</title>
      <link href="posts/15650.html"/>
      <url>posts/15650.html</url>
      
        <content type="html"><![CDATA[<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><p>内容</p><hr><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><p>内容</p><hr><p>##参考文献</p><p><a href="http://www.lqsblog.cn/">www.lqsblog.cn</a></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="posts/16107.html"/>
      <url>posts/16107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="创建new-page"><a href="#创建new-page" class="headerlink" title="创建new page"></a>创建new page</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1，创建一般的文章：hexo new <span class="string">&quot;文章名称&quot;</span></span><br><span class="line">2，创建菜单栏中的等页面 eg:<span class="string">&quot;标签&quot;</span>等，：hexo new page <span class="string">&quot;about&quot;</span>这里的about要和你用的主题()的_config.yml文件中的menu中进行匹配</span><br><span class="line">如：menu:</span><br><span class="line">Index: /</span><br><span class="line">Tags: /Tags</span><br><span class="line">About: /about</span><br><span class="line"></span><br><span class="line">找到新建的文件夹 /<span class="built_in">source</span>/about下的index.md文件</span><br><span class="line">vim index.md 进到文件中修改其front-matter</span><br><span class="line">格式如下：</span><br><span class="line">---</span><br><span class="line">title: about</span><br><span class="line">date: xxxxx</span><br><span class="line"><span class="built_in">type</span>: about // 帮助脚本识别这是一个用来创建tags的文档</span><br><span class="line">layout: about // 我的tags模版标签叫tag你可以根据你的模版名称输入对应的名称</span><br><span class="line">---</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
